import os
import json
import aiogram
import logging
import sys
import copy
import random
import math
import asyncio
from aiogram import Bot, types, Dispatcher
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, InputFile, FSInputFile, InputMediaPhoto
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from collections import defaultdict
from functools import partial
from aiogram import F
from typing import Dict, Tuple, Union
from datetime import datetime, timedelta
import time
from aiogram.exceptions import TelegramBadRequest

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
CHANNEL_ID = -  # ID –≤–∞—à–µ–≥–æ –∫–∞–Ω–∞–ª–∞
CHANNEL_LINK = ""  # –°—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª
AUTHORIZED_KEYS = ["123"]  # –°–ø–∏—Å–æ–∫ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –∫–ª—é—á–µ–π
SUBSCRIPTION_DATA_FILE = "subscription_data.json"  # –§–∞–π–ª –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫
CHARACTER_DATA_FILE = "character_data.json"  # –§–∞–π–ª –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π

user_data = defaultdict(lambda: {

    'key_dang_labirint_diryk': False,  # –∫–ª—é—á –æ—Ç –ª–∞–±–∏—Ä–∏–Ω—Ç–∞ –¥–∏—Ä—É–∫–∞
    'current_category': False,  # –ü—Ä–æ–∫–ª—è—Ç—å–µ
    'current_battle': None,  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ —Å—Ä–∞–∂–µ–Ω–∏–µ
    'in_battle': False,  # –°—Ç–∞—Ç—É—Å –±–æ—è
    'user_curses': None,
    'equipped_armor': None,  # –ù–∞–¥–µ—Ç–∞—è –±—Ä–æ–Ω—è
    'equipped_weapon': None,  # –ù–∞–¥–µ—Ç–æ–µ –æ—Ä—É–∂–∏–µ
    'equipped_kyrka': True,  # –ö–∏—Ä–∫–∞
    'gold': 100,  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–æ–ª–æ—Ç–∞
    'hero_stats': {
        'hp': 30,
        'hp_max': 30,
        'mana': 20,
        'mana_max': 20,
        'attack': 7,
        'defense': 1,
        'strength': 1,
        'agility': 1,
        'intelligence': 1,
        'crit_chance': 0.02,  # 2%
        'crit_damage': 1.1,  # 110%
    },
    "special_skills": {
        "–ö–∞–º–µ–Ω—å-–û–≥–Ω–µ–Ω–Ω—ã–π –≤–∑—Ä—ã–≤": {
            "description": "üî• –ú–æ—â–Ω—ã–π –≤–∑—Ä—ã–≤ –æ–≥–Ω—è, –Ω–∞–Ω–æ—Å—è—â–∏–π —É—Ä–æ–Ω —Ä–∞–≤–Ω—ã–π (intelligence * 3) + (attack * 2)",
            "cost": 30,  # —Å—Ç–æ–∏–º–æ—Å—Ç—å –º–∞–Ω—ã
            "effect": lambda stats: (stats['intelligence'] * 3) + (stats['attack'] * 2)
        },

    },
    "–ê—Ä—Ç–µ—Ñ–∞–∫—Ç—ã": {"–ö–∞–º–µ–Ω—å-–û–≥–Ω–µ–Ω–Ω—ã–π –≤–∑—Ä—ã–≤": 1},
    "material_user": {},
    "recipes": {
        "recipes_armor": {},
        "recipes_weapon": {}
    },
    'equipmentDang': {},  # –≠–∫–∏–ø–∏—Ä–æ–≤–∫–∞ (–æ—Ä—É–∂–∏–µ –∏ –±—Ä–æ–Ω—è)
    'BR': {  # –ë—Ä–æ–Ω—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        "–ö–æ–∂–∞–Ω–∞—è –±—Ä–æ–Ω—è": {
            'hp': 10,
            'mana': 5,
            'attack': 0,
            'defense': 5,
            'strength': 1,
            'agility': 1,
            'intelligence': 1,
            'crit_chance': 0.00,
            'crit_damage': 0.00,
        },

    },
    'AR': {  # –û—Ä—É–∂–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        "–î–µ—Ä–µ–≤—è–Ω–Ω—ã–π –º–µ—á": {
            'hp': 0,
            'mana': 0,
            'attack': 5,
            'defense': 0,
            'strength': 0,
            'agility': 0,
            'intelligence': 0,
            'crit_chance': 0.01,
            'crit_damage': 0.05,
        },

    }
})
# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
subscription_data = {"users": {}, "authorized_users": []}
character_data = {}

authorized_users = set()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
)
logger = logging.getLogger(__name__)

bot = Bot(token='')
dp = Dispatcher()


# –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
def load_data():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –∏ –ø–æ–¥–ø–∏—Å–æ–∫ –∏–∑ —Ñ–∞–π–ª–æ–≤"""
    global character_data, user_data, subscription_data, authorized_users

    # –ó–∞–≥—Ä—É–∂–∞–µ–º subscription_data
    try:
        with open(SUBSCRIPTION_DATA_FILE, "r", encoding='utf-8') as f:
            loaded_data = json.load(f)
            subscription_data["users"] = loaded_data.get("users", {})
            subscription_data["authorized_users"] = loaded_data.get("authorized_users", [])
    except (FileNotFoundError, json.JSONDecodeError):
        logging.info("Subscription data file not found or corrupted, using default")

    authorized_users = set(subscription_data.get("authorized_users", []))

    # –ó–∞–≥—Ä—É–∂–∞–µ–º character_data –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º user_data
    try:
        with open(CHARACTER_DATA_FILE, "r", encoding='utf-8') as f:
            character_data = json.load(f)

            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º user_data –Ω–∞ –æ—Å–Ω–æ–≤–µ character_data
            for user_id_str, data in character_data.items():
                user_id = int(user_id_str)
                user_data[user_id] = {
                    'material_user': defaultdict(int, data.get('material_user', {})),
                    'recipes': {
                        'recipes_weapon': data.get('recipes', {}).get('recipes_weapon', {}),
                        'recipes_armor': data.get('recipes', {}).get('recipes_armor', {})
                    },
                    'AR': data.get('AR', {}),  # –≠–∫–∏–ø–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –æ—Ä—É–∂–∏–µ
                    'BR': data.get('BR', {}),  # –≠–∫–∏–ø–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –±—Ä–æ–Ω—è
                    'hero_stats': data.get('hero_stats', {}),
                    'gold': data.get('gold', 0),
                    'equipped_weapon': data.get('equipped_weapon'),
                    'equipped_armor': data.get('equipped_armor'),
                    'inventory': data.get('inventory', []).copy()
                }
    except (FileNotFoundError, json.JSONDecodeError) as e:
        logging.info(f"Character data file not found or corrupted: {e}, using default")
        character_data = {}


# —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
def save_data():
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –∏ –ø–æ–¥–ø–∏—Å–æ–∫ –≤ —Ñ–∞–π–ª—ã"""
    try:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º subscription_data
        with open(SUBSCRIPTION_DATA_FILE, "w", encoding='utf-8') as f:
            json.dump({
                "users": subscription_data["users"],
                "authorized_users": list(authorized_users)
            }, f, indent=4, ensure_ascii=False)

        # –û–±–Ω–æ–≤–ª—è–µ–º character_data –∏–∑ user_data
        for user_id, data in user_data.items():
            user_id_str = str(user_id)

            if user_id_str not in character_data:
                character_data[user_id_str] = {}

            character_data[user_id_str].update({
                'material_user': dict(data.get('material_user', {})),
                'recipes': {
                    'recipes_weapon': data.get('recipes', {}).get('recipes_weapon', {}),
                    'recipes_armor': data.get('recipes', {}).get('recipes_armor', {})
                },
                'AR': data.get('AR', {}),
                'BR': data.get('BR', {}),
                'hero_stats': data.get('hero_stats', {}),
                'gold': data.get('gold', 0),
                'equipped_weapon': data.get('equipped_weapon'),
                'equipped_armor': data.get('equipped_armor'),
                'inventory': data.get('inventory', []).copy()
            })

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º character_data
        with open(CHARACTER_DATA_FILE, "w", encoding='utf-8') as f:
            json.dump(character_data, f, indent=4, ensure_ascii=False)

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")


# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏
async def is_subscribed(user_id: int) -> bool:
    try:
        member = await bot.get_chat_member(chat_id=CHANNEL_ID, user_id=user_id)
        return member.status in ["member", "administrator", "creator"]
    except Exception as e:
        logger.error(f"Error checking subscription: {e}")
        return False


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏
def get_subscribe_keyboard():
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", url=CHANNEL_LINK),
                InlineKeyboardButton(text="‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è", callback_data="check_sub")
            ]
        ]
    )


# –û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é
def get_main_menu():
    return ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="–ö–æ—Ä–æ–ª–µ–≤—Å–∫–æ–µ –ø–æ–¥–∑–µ–º–µ–ª—å–µ üè∞")]],
        resize_keyboard=True
    )


# =====================================–ö–æ–º–∞–Ω–¥—ã========================
@dp.message(Command("help"))
async def help_bot(message: types.Message, bot: Bot):
    help_text = """
–î–æ–±—Ä—ã–π –¥–µ–Ω—å —É–≤–∞–∂–∞–µ–º—ã–µ —á–∏—Ç–∞—Ç–µ–ª–∏.
–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Tales_of_the_Moreless_RPG_bot.

1Ô∏è‚É£ -‚öúÔ∏è–ë–æ–µ–≤–∞—è –º–æ—â—å (–ë–ú)
–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å ‚öúÔ∏è–ë–æ–µ–≤—É—é –º–æ—â—å?
- –≤–∞—à–∞ –º–æ—â—å, —ç—Ç–æ –≤–∞—à–∞ —ç–∫–∏–ø–∏—Ä–æ–≤–∫–∞ (–ê—Ä—Å–µ–Ω–∞–ª –∏ –ë—Ä–æ–Ω—è) –∏ –≤–∞—à–∏ –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ (–°–∏–ª–∞|–õ–æ–≤–∫–æ—Å—Ç—å|–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç)

2Ô∏è‚É£ - –ë–∞—à–Ω—è –ù–µ–≤–µ–¥–æ–º–æ–≥–æ üóº
–ß—Ç–æ —Ç–∞–º –¥–µ–ª–∞—Ç—å ?
- –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–Ω—è—Ç—å—Å—è –Ω–∞ —ç—Ç–∞–∂ –≤—ã—à–µ –¥—Ä—É–≥–∏—Ö –∏–≥—Ä–æ–∫–æ–≤. –û—Å–Ω–æ–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –∫–æ—Ç–æ—Ä—ã–µ —Ç–∞–º –µ—Å—Ç—å "–ë—Ä–æ—Å–∏—Ç—å –≤—ã–∑–æ–≤" (—ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞—à—É –ë–ú —Å –ë–ú —ç—Ç–∞–∂–∞. –ï—Å–ª–∏ –≤–∞—à–∞ –ë–ú < –ë–ú —ç—Ç–∞–∂–∞, —Ç–æ –≤—ã –Ω–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç–µ —ç—Ç–∞–∂. –ö–Ω–æ–ø–∫–∞ "–í–µ—Ä–Ω—É—Ç—å—Å—è" –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤–∞—Å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
–ü—Ä–∏–º–µ—Ä
üëë –í—ã —É—Å–ø–µ—à–Ω–æ —Å–ø—É—Å—Ç–∏–ª–∏—Å—å –Ω–∞ 22-–π –ø–æ–¥–∑–µ–º–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å!
‚öúÔ∏è  –í–∞—à–∞ –º–æ—â—å: 20071.7
‚öúÔ∏è –¢—Ä–µ–±—É–µ—Ç—Å—è: 135

3Ô∏è‚É£ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ üìä
–î–ª—è —á–µ–≥–æ –æ–Ω–∞ –Ω—É–∂–Ω–∞?
- –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞—Å.
–ü—Ä–∏–º–µ—Ä 
üí∞–ó–æ–ª–æ—Ç–æ: 101011
‚öúÔ∏è –ë–æ–µ–≤–∞—è –º–æ—â—å: 20071.7

üî∞–ë—Ä–æ–Ω—è: –ö–æ–∂–∞–Ω–∞—è –±—Ä–æ–Ω—è
üó°Ô∏è–û—Ä—É–∂–∏–µ: –î–µ—Ä–µ–≤—è–Ω–Ω—ã–π –º–µ—á

‚ù§Ô∏è–ó–¥–æ—Ä–æ–≤—å–µ: 100040.0/100040.0
üîÆ–ú–∞–Ω–∞: 100025.0/100025.0
‚öîÔ∏è–ê—Ç–∞–∫–∞: 12.0
üõ°Ô∏è–ó–∞—â–∏—Ç–∞: 60.0
üí™–°–∏–ª–∞: 3.0
üèπ–õ–æ–≤–∫–æ—Å—Ç—å: 3.0
üìö–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç: 3.0
üéØ–®–∞–Ω—Å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ —É–¥–∞—Ä–∞: 3.0%
üí•–£—Ä–æ–Ω –æ—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ —É–¥–∞—Ä–∞: 115.0%

4Ô∏è‚É£ –ë—Ä–æ–Ω—è üõ°Ô∏è –∏ –ê—Ä—Å–µ–Ω–∞–ª ‚öîÔ∏è
–ö–∞–∫ –Ω–∞–¥–µ—Ç—å –≤–µ—â—å?
- –≤—ã–±–∏—Ä–∞–µ–º —á—Ç–æ –º—ã —Ö–æ–¥–∏–º –Ω–∞–¥–µ—Ç—å, –±—Ä–æ–Ω—é –∏–ª–∏ –∞—Ä—Å–µ–Ω–∞–ª. –ù–∞–∂–∏–º–∞–µ–º –Ω–∞ –∫–Ω–æ–ø–∫—É ¬´–ù–∞–¥–µ—Ç—å¬ª, –µ—Å–ª–∏ —Ö–æ—Ç–∏–º —Å–Ω—è—Ç—å, —Ç–æ –Ω–∞–∂–∏–º–∞–µ–º –Ω–∞ ¬´–°–Ω—è—Ç—å¬ª

5Ô∏è‚É£ –î–æ–¥–∑—ë‚õ©Ô∏è
–î–ª—è —á–µ–≥–æ –æ–Ω–∞ –Ω—É–∂–Ω–∞?
- –ø—Ä–æ–∫–∞—á–∫–∞ –≤–∞—à–∏—Ö –æ—Å–Ω–æ–≤–Ω—ã—Ö –Ω–∞–≤—ã–∫–æ–≤. –°–∏–ª—É, –ª–æ–≤–∫–æ—Å—Ç—å, –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç. –¢—É—Ç –º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å —á—Ç–æ –∏–º–µ–Ω–Ω–æ –º—ã —Ö–æ—Ç–∏–º –ø—Ä–æ–∫–∞—á–∞—Ç—å, –ø—Ä–æ–∫–∞—á–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ä–∞–∑ –≤ 8 —á–∞—Å–æ–≤ –µ—Å–ª–∏ –≤—ã–±–∏—Ä–∞–µ–º 1 —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫—É. –ï—Å–ª–∏ –≤—ã–±–∏—Ä–∞–µ–º –≤—Å–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏, —Ç–æ –≤—Ä–µ–º—è –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–∫–∞—á–∫–∏ –≤–æ–∑—Ä–∞—Å—Ç–∞–µ—Ç –¥–æ 24 —á–∞—Å–æ–≤. 

6Ô∏è‚É£ –ö—É–∑–Ω—è üî®
–î–ª—è —á–µ–≥–æ –æ–Ω–∞ –Ω—É–∂–Ω–∞?
- –æ–Ω–∞ –Ω—É–∂–Ω–∞ —á—Ç–æ–±—ã —Å–æ–∑–¥–∞–≤–∞—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã –∏ —Ä–∞–∑–ª–∏—á–Ω—ã–µ –≤–µ—â–∏.

7Ô∏è‚É£–õ–∞–±–∏—Ä–∏–Ω—Ç –î–∏—Ä—É–∫–∞ üß©
–ö–∞–∫ –≤ –Ω–µ–µ –∏–≥—Ä–∞—Ç—å?
- –æ–Ω–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç –±—ã—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ–π –ø–æ—Å–ª–µ 9 —ç—Ç–∞–∂–∞ –≤ –ë–∞—à–Ω–µ –Ω–µ–≤–µ–¥–æ–º–æ–≥–æ. –ì–ª–∞–≤–Ω–∞—è —Å—É—Ç—å –õ–∞–±–∏—Ä–∏–Ω—Ç–∞ ‚Äì —ç—Ç–æ –ø–æ–ª—É—á–µ–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤, —Ä–µ—Ü–µ–ø—Ç–æ–≤ –∏ –≤–µ—â–µ–π –¥–ª—è –∏–≥—Ä—ã. –í –õ–∞–±–∏—Ä–∏–Ω—Ç–µ 40 –∫–æ–º–Ω–∞—Ç. –í —Å–∞–º–æ–º –Ω–∞—á–∞–ª–µ –≤—ã –∫–∏–¥–∞–µ—Ç–µ –∫—É–±–∏–∫, –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞, –≤—ã–ø–∞–¥–∞–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∞—è –∫–æ–º–Ω–∞—Ç–∞. –ö–æ–≥–¥–∞ –º—ã –¥–æ—Å—Ç–∏–≥–∞–µ–º 40 –∫–æ–º–Ω–∞—Ç—ã, —Ç–æ –ø–æ–ø–∞–¥–∞–µ–º –≤ ¬´–ö—Ä–∏–ø—Ç–∞ –£–Ω–∏—á—Ç–æ–∂–µ–Ω–∏—è¬ª, –µ—Å–ª–∏ –º—ã –≤—ã–±–∏–≤–∞–µ–º —á–∏—Å–ª–æ –Ω–∞ –∫—É–±–∏–∫–µ 1, —Ç–æ —É –Ω–∞—Å –æ—Ç–Ω–∏–º–∞–µ—Ç—Å—è 40% –∑–¥–æ—Ä–æ–≤—å—è –∏ —Å–Ω–æ–≤–∞ –∫–∏–¥–∞–µ–º –∫—É–±–∏–∫. –ï—Å–ª–∏ –º—ã –≤—ã–±–∏–ª–∏ ‚â† 1, —Ç–æ –º—ã –ø—Ä–æ—Ö–æ–∂–∏–º –õ–∞–±–∏—Ä–∏–Ω—Ç –∏ –ø–æ–ª—É—á–∞–µ–º –Ω–∞–≥—Ä–∞–¥—É)

–ï—Å–ª–∏ –≥–¥–µ-—Ç–æ –∑–∞—Å—Ç—Ä—è–ª–∏, —Ç–æ –ø–∏—à–∏—Ç–µ /start —ç—Ç–æ –≤–µ—Ä–Ω–µ—Ç –≤–∞—Å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
–í —Å–ª—É—á–∞–µ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤ –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º, —Ç–æ –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å @Proto_one
"""
    await message.answer(help_text)


@dp.message(Command("start"))
async def start(message: Message):
    user_id = str(message.from_user.id)
    user_name = message.from_user.username or message.from_user.first_name

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    if user_id not in subscription_data["users"]:
        subscription_data["users"][user_id] = {
            "user_name": user_name,
            "join_date": datetime.now().isoformat(),
            "subscription_checked": False
        }
        save_data()

    if int(user_id) in authorized_users:
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_main_menu()
        )
        return

    if await is_subscribed(int(user_id)):
        await message.answer("üîë –í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã! –í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á –¥–æ—Å—Ç—É–ø–∞:")
    else:
        await message.answer(
            "üì¢ –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª:",
            reply_markup=get_subscribe_keyboard()
        )


@dp.message(Command("season_leader"))
async def season_leader(message: types.Message, bot: Bot):
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞
        with open(SUBSCRIPTION_DATA_FILE, "r", encoding="utf-8") as file:
            data = json.load(file)

        users = data.get("users", {})

        if not users:
            await message.answer("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö.")
            return

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        current_user_id = str(message.from_user.id)
        current_user = users.get(current_user_id)

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ power (–æ—Ç –±–æ–ª—å—à–µ–≥–æ –∫ –º–µ–Ω—å—à–µ–º—É)
        sorted_by_power = sorted(
            users.items(),
            key=lambda x: x[1].get("power", 0),
            reverse=True
        )[:3]  # –ë–µ—Ä—ë–º —Ç–æ–ø-3

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ dungeon_floor (–æ—Ç –º–µ–Ω—å—à–µ–≥–æ –∫ –±–æ–ª—å—à–µ–º—É)
        sorted_by_floor = sorted(
            users.items(),
            key=lambda x: x[1].get("dungeon_floor", 0)
        )[:3]  # –ë–µ—Ä—ë–º —Ç–æ–ø-3

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        response = "üèÜ <b>–¢–æ–ø-3 –ª–∏–¥–µ—Ä–æ–≤ —Å–µ–∑–æ–Ω–∞</b> ÔøΩ\n\n"

        # –¢–æ–ø-3 –ø–æ —Å–∏–ª–µ
        response += "‚ö° <b>–°–∞–º—ã–µ —Å–∏–ª—å–Ω—ã–µ –∏–≥—Ä–æ–∫–∏:</b>\n"
        for i, (user_id, user_data) in enumerate(sorted_by_power, 1):
            response += (
                f"{i}. {user_data.get('user_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')} - {user_data.get('power', 0)} ‚öúÔ∏è–ë–ú\n"
            )

        if current_user:
            response += f"\n–í–∞—à —É—Ä–æ–≤–µ–Ω—å ‚öúÔ∏è–ë–ú: {current_user.get('power', 0)}\n\n"
        else:
            response += "\n–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.\n\n"

        # –¢–æ–ø-3 –ø–æ –≥–ª—É–±–∏–Ω–µ –ø–æ–¥–∑–µ–º–µ–ª—å—è
        response += "üíØ<b>–≠—Ç–∞–∂ –≤ –ë–∞—à–Ω–µ –ù–µ–≤–µ–¥–æ–º–æ–≥–æ üóº:</b>\n"
        for i, (user_id, user_data) in enumerate(sorted_by_floor, 1):
            response += (
                f"{i}. {user_data.get('user_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')} - —ç—Ç–∞–∂ {user_data.get('dungeon_floor', 0)}\n"
            )

        if current_user:
            response += f"\n–í–∞—à —ç—Ç–∞–∂: {current_user.get('dungeon_floor', 0)}"
        else:
            response += "\n–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."

        await message.answer(response, parse_mode="HTML")

    except FileNotFoundError:
        await message.answer("–§–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    except json.JSONDecodeError:
        await message.answer("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö.")
    except Exception as e:
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
        print(f"Error in season_leader: {e}")


# ============================—Ç–µ—Å—Ç–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã============================
@dp.message(Command("gold_modUB40FAN"))
async def gold_mod(message: Message):
    user_id = str(message.from_user.id)

    if user_id not in character_data:
        await message.answer("‚ùå –í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ —Å–Ω–∞—á–∞–ª–∞.")
        return

    try:
        # 1. –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ character_data (–≥–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è)
        character_data[user_id]["gold"] += 100000

        materials = [
            "—Å—Ç–∞–ª—å", "–∂–µ–ª–µ–∑–æ", "–¥–µ—Ä–µ–≤–æ", "–∫–æ–∂–∞", "–∞–ª–º–∞–∑",
            "–∫–∞–º–µ–Ω—å", "–º–∏—Ñ—Ä–∏–ª", "—Ç–µ–Ω–µ–≤–æ–π —à–µ–ª–∫", "–∫–æ—Å—Ç—è–Ω–∞—è —Å—Ç–∞–ª—å",
            "—Ñ–∞–Ω—Ç–æ–º–Ω—ã–π —à–µ–ª–∫", "—Ç–∫–∞–Ω—å –∑–∞–±—ã—Ç—ã—Ö", "–ø–µ–ø–µ–ª —Ñ–µ–Ω–∏–∫—Å–∞",
            "—Ç–µ–Ω–µ–≤–æ–π —Å–∞–≤–∞–Ω", "–∏—Å–∫—Ä–∞ –¥—É—à–∏"
        ]

        if "material_user" not in character_data[user_id]:
            character_data[user_id]["material_user"] = {}

        for material in materials:
            current_value = character_data[user_id]["material_user"].get(material, 0)
            character_data[user_id]["material_user"][material] = current_value + 500

        # 2. –û–±–Ω–æ–≤–ª—è–µ–º user_data (—á—Ç–æ–±—ã save_data() —Å–æ—Ö—Ä–∞–Ω–∏–ª –∏–∑–º–µ–Ω–µ–Ω–∏—è)
        if int(user_id) in user_data:
            user_data[int(user_id)]["gold"] = character_data[user_id]["gold"]
            user_data[int(user_id)]["material_user"] = defaultdict(int, character_data[user_id]["material_user"])

        # 3. –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        save_data()

        await message.answer("‚úÖ –í–∞–º –±—ã–ª–æ –≤—ã–¥–∞–Ω–æ:\n"
                             "- 100000 –∑–æ–ª–æ—Ç–∞\n"
                             "- –ü–æ 500 –∫–∞–∂–¥–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞")

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ test_mod: {e}", exc_info=True)
        await message.answer("‚ö† –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–∞—á–µ –Ω–∞–≥—Ä–∞–¥—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


@dp.message(Command("god_modUB40FAN"))
async def god_mod(message: Message):
    user_id = str(message.from_user.id)

    if user_id not in character_data:
        await message.answer("‚ùå –í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ —Å–Ω–∞—á–∞–ª–∞.")
        return

    try:
        # 1. –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ character_data (–≥–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è)
        character_data[user_id]["hero_stats"]["hp"] += 100000
        character_data[user_id]["hero_stats"]["hp_max"] += 100000
        character_data[user_id]["hero_stats"]["mana"] += 100000
        character_data[user_id]["hero_stats"]["mana_max"] += 100000
        character_data[user_id]["hero_stats"]["attack"] += 100000

        # 2. –û–±–Ω–æ–≤–ª—è–µ–º user_data (—á—Ç–æ–±—ã save_data() —Å–æ—Ö—Ä–∞–Ω–∏–ª –∏–∑–º–µ–Ω–µ–Ω–∏—è)
        if int(user_id) in user_data:
            user_data[int(user_id)]["hero_stats"] = character_data[user_id]["hero_stats"]

        # 3. –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        save_data()

        await message.answer("‚úÖ –í–∞–º –±—ã–ª–æ –≤—ã–¥–∞–Ω–æ:\n"
                             "- +100000 HP\n"
                             "- +100000 –º–∞–Ω—ã\n"
                             "- +100000 –∞—Ç–∞–∫–∏")

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ character_mod: {e}", exc_info=True)
        await message.answer("‚ö† –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


# ============================—Ç–µ—Å—Ç–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã============================

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
@dp.callback_query(lambda c: c.data == "check_sub")
async def check_subscription(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    if await is_subscribed(user_id):
        await callback.message.edit_text("üîë –í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã! –í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á –¥–æ—Å—Ç—É–ø–∞:")
    else:
        await callback.answer("–í—ã –µ—â—ë –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª!", show_alert=True)


@dp.message(F.text.in_(AUTHORIZED_KEYS))
async def handle_auth_key(message: Message):
    user_id = message.from_user.id
    if await is_subscribed(user_id):
        authorized_users.add(user_id)
        subscription_data["authorized_users"].append(user_id)
        save_data()

        await message.answer(
            "‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –î–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É –æ—Ç–∫—Ä—ã—Ç.",
            reply_markup=get_main_menu()
        )
    else:
        await message.answer(
            "üì¢ –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª:",
            reply_markup=get_subscribe_keyboard()
        )


@dp.message(F.text == "–ö–æ—Ä–æ–ª–µ–≤—Å–∫–æ–µ –ø–æ–¥–∑–µ–º–µ–ª—å–µ üè∞")
async def create_character(message: Message):
    user_id = str(message.from_user.id)

    if not await is_subscribed(int(user_id)):
        await message.answer(
            "üì¢ –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª:",
            reply_markup=get_subscribe_keyboard()
        )
        return

    await message.answer(
        "–°–æ–∑–¥–∞–µ–º –ö–æ—Ä–æ–ª–µ–≤—Å–∫–æ–µ –ø–æ–¥–∑–µ–º–µ–ª—å–µüè∞....",
        reply_markup=ReplyKeyboardRemove()
    )
    await asyncio.sleep(2.1)

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
    if user_id not in character_data:
        character_data[user_id] = {
            'created_at': datetime.now().isoformat(),
            'last_played': datetime.now().isoformat(),
            'key_dang_labirint_diryk': False,
            'current_category': False,
            'current_battle': None,
            'in_battle': False,
            'user_curses': None,
            'equipped_armor': None,
            'equipped_weapon': None,
            'equipped_kyrka': True,
            'gold': 100,
            'hero_stats': {
                'hp': 30,
                'hp_max': 30,
                'mana': 20,
                'mana_max': 20,
                'attack': 7,
                'defense': 1,
                'strength': 1,
                'agility': 1,
                'intelligence': 1,
                'crit_chance': 0.02,
                'crit_damage': 1.1,
            },
            "special_skills": {
                "–ö–∞–º–µ–Ω—å-–û–≥–Ω–µ–Ω–Ω—ã–π –≤–∑—Ä—ã–≤": {
                    "description": "üî• –ú–æ—â–Ω—ã–π –≤–∑—Ä—ã–≤ –æ–≥–Ω—è, –Ω–∞–Ω–æ—Å—è—â–∏–π —É—Ä–æ–Ω —Ä–∞–≤–Ω—ã–π (intelligence * 3) + (attack * 2)",
                    "cost": 30,
                    "effect": "lambda stats: (stats['intelligence'] * 3) + (stats['attack'] * 2)"
                },
            },
            "–ê—Ä—Ç–µ—Ñ–∞–∫—Ç—ã": {"–ö–∞–º–µ–Ω—å-–û–≥–Ω–µ–Ω–Ω—ã–π –≤–∑—Ä—ã–≤": 1},
            "material_user": {},
            "recipes": {
                "recipes_armor": {},
                "recipes_weapon": {},

            },
            'equipmentDang': {},
            'BR': {
                "–ö–æ–∂–∞–Ω–∞—è –±—Ä–æ–Ω—è": {
                    'hp': 10,
                    'mana': 5,
                    'attack': 0,
                    'defense': 5,
                    'strength': 1,
                    'agility': 1,
                    'intelligence': 1,
                    'crit_chance': 0.00,
                    'crit_damage': 0.00,
                },
            },
            'AR': {
                "–î–µ—Ä–µ–≤—è–Ω–Ω—ã–π –º–µ—á": {
                    'hp': 0,
                    'mana': 0,
                    'attack': 5,
                    'defense': 0,
                    'strength': 0,
                    'agility': 0,
                    'intelligence': 0,
                    'crit_chance': 0.01,
                    'crit_damage': 0.05,
                },
            },
            "inventory": [],
            "quests": {},
            "achievements": {},
            "dungeon_progress": {},
            "settings": {
                "notifications": True,
                "language": "ru"
            }
        }

        save_data()
        await message.answer("‚úÖ –ü–µ—Ä—Å–æ–Ω–∞–∂ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!")
    else:
        character_data[user_id]['last_played'] = datetime.now().isoformat()
        save_data()
        await message.answer("üîÅ –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤–∞—à–µ–º—É –ø–µ—Ä—Å–æ–Ω–∞–∂—É...")

    await asyncio.sleep(3.2)
    await message.answer("–ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –º–µ–Ω—é –ø–æ–¥–∑–µ–º–µ–ª—å—èüè∞....")
    await asyncio.sleep(2.5)

    # –û–±–Ω–æ–≤–ª—è–µ–º –±–æ–µ–≤—É—é –º–æ—â—å –≤ subscription_data
    await update_power_in_subscription_data(int(user_id), character_data[user_id]['hero_stats'])

    # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ñ—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –º–µ–Ω—é –ø–æ–¥–∑–µ–º–µ–ª—å—è
    await dang_menu(message)


@dp.message(Command("dang"))
async def dang_menu(message: types.Message):
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏
    buttons = [[KeyboardButton(text="–ë–∞—à–Ω—è –ù–µ–≤–µ–¥–æ–º–æ–≥–æ üóº"), KeyboardButton(text="–õ–∞–±–∏—Ä–∏–Ω—Ç –î–∏—Ä—É–∫–∞ üß©")],
               [KeyboardButton(text="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ üìä"), KeyboardButton(text="–î–æ–¥–∑—ë‚õ©Ô∏è")],
               [KeyboardButton(text="–ë—Ä–æ–Ω—è üõ°Ô∏è"), KeyboardButton(text="–ê—Ä—Å–µ–Ω–∞–ª ‚öîÔ∏è"), KeyboardButton(text="–ö—É–∑–Ω—è üî®")],
               # [ KeyboardButton(text="–í–æ–∑–≤—ã—à–µ–Ω–∏–µ üåå")],

               ]

    markup = ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)


# –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
# =====================================–ü—Ä–µ–¥–º–µ—Ç—ã=====================================#
all_recipes_mater = {
    "recipes_weapon": {
        # –û–†–£–ñ–ò–ï –î–ï–†–ï–í–Ø–ù–ù–û–ï
        "–†–µ—Ü–µ–ø—Ç-–î–µ—Ä–µ–≤—è–Ω–Ω–æ–µ –∫–æ–ø—å–µ": {
            "–∫–æ–∂–∞": 2, "–¥–µ—Ä–µ–≤–æ": 8},
        "–†–µ—Ü–µ–ø—Ç-–î–µ—Ä–µ–≤—è–Ω–Ω—ã–π –º–µ—á": {
            "–∫–æ–∂–∞": 5, "–¥–µ—Ä–µ–≤–æ": 5},
        "–†–µ—Ü–µ–ø—Ç-–î–µ—Ä–µ–≤—è–Ω–Ω—ã–π –ø–æ—Å–æ—Ö": {
            "–∫–æ–∂–∞": 5, "–¥–µ—Ä–µ–≤–æ": 7},
        "–†–µ—Ü–µ–ø—Ç-–î–µ—Ä–µ–≤—è–Ω–Ω—ã–π –¥–≤—É—Ä—É—á–Ω—ã–π –º–µ—á": {
            "–∫–æ–∂–∞": 7, "–¥–µ—Ä–µ–≤–æ": 10},
        "–†–µ—Ü–µ–ø—Ç-–î–µ—Ä–µ–≤—è–Ω–Ω—ã–π –ª—É–∫": {
            "–∫–æ–∂–∞": 4, "–¥–µ—Ä–µ–≤–æ": 5},
        # –ñ–µ–ª–µ–∑–Ω–∞—è –æ—Ä—É–∂–∏–µ
        "–†–µ—Ü–µ–ø—Ç-–ñ–µ–ª–µ–∑–Ω–æ–µ –∫–æ–ø—å–µ": {
            "–∂–µ–ª–µ–∑–æ": 25, "–¥–µ—Ä–µ–≤–æ": 15, "–∫–æ–∂–∞": 10},
        "–†–µ—Ü–µ–ø—Ç-–ñ–µ–ª–µ–∑–Ω—ã–π –º–µ—á": {
            "–∂–µ–ª–µ–∑–æ": 25, "–¥–µ—Ä–µ–≤–æ": 5, "–∫–æ–∂–∞": 10},
        "–†–µ—Ü–µ–ø—Ç-–ñ–µ–ª–µ–∑–Ω—ã–π —Ç–æ–ø–æ—Ä": {
            "–∂–µ–ª–µ–∑–æ": 15, "–¥–µ—Ä–µ–≤–æ": 7, "–∫–æ–∂–∞": 10},
        "–†–µ—Ü–µ–ø—Ç-–ñ–µ–ª–µ–∑–Ω—ã–π –¥–≤—É—Ä—É—á–Ω—ã–π –º–µ—á": {
            "–∂–µ–ª–µ–∑–æ": 10, "–¥–µ—Ä–µ–≤–æ": 15, "–∫–æ–∂–∞": 10},
        "–†–µ—Ü–µ–ø—Ç-–ñ–µ–ª–µ–∑–Ω—ã–π –ª—É–∫": {
            "–∂–µ–ª–µ–∑–æ": 4, "–¥–µ—Ä–µ–≤–æ": 5, "–∫–æ–∂–∞": 10},
        "–†–µ—Ü–µ–ø—Ç-–ñ–µ–ª–µ–∑–Ω—ã–π –∫–∏–Ω–∂–∞–ª": {
            "–∂–µ–ª–µ–∑–æ": 4, "–¥–µ—Ä–µ–≤–æ": 5, "–∫–æ–∂–∞": 10},
        "–†–µ—Ü–µ–ø—Ç-–ñ–µ–ª–µ–∑–Ω—ã–π –∞—Ä–±–∞–ª–µ—Ç": {
            "–∂–µ–ª–µ–∑–æ": 4, "–¥–µ—Ä–µ–≤–æ": 5, "–∫–æ–∂–∞": 10},
        "–†–µ—Ü–µ–ø—Ç-–ñ–µ–ª–µ–∑–Ω–∞—è –ø–∞–ª–∏—Ü–∞": {
            "–∂–µ–ª–µ–∑–æ": 4, "–¥–µ—Ä–µ–≤–æ": 5, "–∫–æ–∂–∞": 10},
        "–†–µ—Ü–µ–ø—Ç-–ñ–µ–ª–µ–∑–Ω–∞—è –ø–∞–ª–∞—à": {
            "–∂–µ–ª–µ–∑–æ": 4, "–¥–µ—Ä–µ–≤–æ": 5, "–∫–æ–∂–∞": 10},
        "–†–µ—Ü–µ–ø—Ç-–ñ–µ–ª–µ–∑–Ω–∞—è –±—É–ª–∞–≤–∞": {
            "–∂–µ–ª–µ–∑–æ": 22, "–¥–µ—Ä–µ–≤–æ": 6, "–∫–æ–∂–∞": 5},
        "–†–µ—Ü–µ–ø—Ç-–ñ–µ–ª–µ–∑–Ω–∞—è —Å–∞–±–ª—è": {
            "–∂–µ–ª–µ–∑–æ": 16, "–¥–µ—Ä–µ–≤–æ": 6, "–∫–æ–∂–∞": 9},
        "–†–µ—Ü–µ–ø—Ç-–ñ–µ–ª–µ–∑–Ω—ã–π –±–æ–µ–≤–æ–π –º–æ–ª–æ—Ç": {
            "–∂–µ–ª–µ–∑–æ": 28, "–¥–µ—Ä–µ–≤–æ": 10, "–∫–æ–∂–∞": 12},
        # –°—Ç–∞–ª—å–Ω–æ–µ –æ—Ä—É–∂–∏–µ
        "–†–µ—Ü–µ–ø—Ç-–°—Ç–∞–ª—å–Ω–æ–π –º–µ—á": {
            "—Å—Ç–∞–ª—å": 45, "–¥–µ—Ä–µ–≤–æ": 5, "–∫–æ–∂–∞": 10},
        "–†–µ—Ü–µ–ø—Ç-–°—Ç–∞–ª—å–Ω–æ–µ –∫–æ–ø—å–µ": {
            "—Å—Ç–∞–ª—å": 45, "–¥–µ—Ä–µ–≤–æ": 10, "–∫–æ–∂–∞": 5},
        "–†–µ—Ü–µ–ø—Ç-–°—Ç–∞–ª—å–Ω–æ–π –¥–≤—É—Ä—É—á–Ω—ã–π –º–µ—á": {
            "—Å—Ç–∞–ª—å": 65, "–¥–µ—Ä–µ–≤–æ": 15, "–∫–æ–∂–∞": 10},
        "–†–µ—Ü–µ–ø—Ç-–°—Ç–∞–ª—å–Ω–æ–π –∫–∏–Ω–∂–∞–ª": {
            "—Å—Ç–∞–ª—å": 35, "–¥–µ—Ä–µ–≤–æ": 5, "–∫–æ–∂–∞": 5},
        "–†–µ—Ü–µ–ø—Ç-–°—Ç–∞–ª—å–Ω–æ–π –∞—Ä–±–∞–ª–µ—Ç": {
            "—Å—Ç–∞–ª—å": 40, "–¥–µ—Ä–µ–≤–æ": 10, "–∫–æ–∂–∞": 5},
        "–†–µ—Ü–µ–ø—Ç-–°—Ç–∞–ª—å–Ω–æ–π –±–æ–µ–≤–æ–π –º–æ–ª–æ—Ç": {
            "—Å—Ç–∞–ª—å": 55, "–¥–µ—Ä–µ–≤–æ": 12, "–∫–æ–∂–∞": 8},
        "–†–µ—Ü–µ–ø—Ç-–°—Ç–∞–ª—å–Ω–∞—è –∫–∞—Ç–∞–Ω–∞": {
            "—Å—Ç–∞–ª—å": 50, "–¥–µ—Ä–µ–≤–æ": 8, "–∫–æ–∂–∞": 6},
        # –ú–∏—Ñ—Ä–∏–ª–æ–≤—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã
        "–†–µ—Ü–µ–ø—Ç-–ú–∏—Ñ—Ä–∏–ª–æ–≤—ã–π –ø–æ—Å–æ—Ö": {
            "–¥–µ—Ä–µ–≤–æ": 10,
            "–∫–æ–∂–∞": 5,
            "–∞–ª–º–∞–∑": 1,
            "–º–∏—Ñ—Ä–∏–ª": 35
        },
        "–†–µ—Ü–µ–ø—Ç-–ú–∏—Ñ—Ä–∏–ª–æ–≤—ã–π –º–µ—á": {
            "–¥–µ—Ä–µ–≤–æ": 12,
            "–∫–æ–∂–∞": 8,
            "–º–∏—Ñ—Ä–∏–ª": 35
        },
        "–†–µ—Ü–µ–ø—Ç-–ú–∏—Ñ—Ä–∏–ª–æ–≤—ã–π –ª—É–∫": {
            "–¥–µ—Ä–µ–≤–æ": 10,
            "–∫–æ–∂–∞": 6,
            "–º–∏—Ñ—Ä–∏–ª": 32
        },
        "–†–µ—Ü–µ–ø—Ç-–ú–∏—Ñ—Ä–∏–ª–æ–≤—ã–π –∫–∏–Ω–∂–∞–ª": {
            "–¥–µ—Ä–µ–≤–æ": 5,
            "–∫–æ–∂–∞": 10,
            "–º–∏—Ñ—Ä–∏–ª": 40
        },
        "–†–µ—Ü–µ–ø—Ç-–ú–∏—Ñ—Ä–∏–ª–æ–≤–∞—è –Ω–∞–≥–∏–Ω–∞—Ç–∞": {
            "–¥–µ—Ä–µ–≤–æ": 15,
            "–∫–æ–∂–∞": 10,
            "–º–∏—Ñ—Ä–∏–ª": 50
        },

    },
    "recipes_armor": {
        # –±—Ä–æ–Ω—è –∫–æ–∂–∞
        "–†–µ—Ü–µ–ø—Ç-–ö–æ–∂–∞–Ω–∞—è –±—Ä–æ–Ω—è": {
            "–∫–æ–∂–∞": 25, "–∂–µ–ª–µ–∑–æ": 5},
        # –ñ–µ–ª–µ–∑–Ω–∞—è –±—Ä–æ–Ω—è
        "–†–µ—Ü–µ–ø—Ç-–ñ–µ–ª–µ–∑–Ω–∞—è –∫–∏—Ä–∞—Å–∞": {
            "–∂–µ–ª–µ–∑–æ": 9, "—Å—Ç–∞–ª—å": 20, "–∫–æ–∂–∞": 10},
        "–†–µ—Ü–µ–ø—Ç-–ñ–µ–ª–µ–∑–Ω—ã–µ –ª–∞—Ç—ã": {
            "–∂–µ–ª–µ–∑–æ": 10, "—Å—Ç–∞–ª—å": 30, "–∫–æ–∂–∞": 10},
        "–†–µ—Ü–µ–ø—Ç-–ñ–µ–ª–µ–∑–Ω–∞—è –∫–æ–ª—å—á—É–≥–∞": {
            "–∂–µ–ª–µ–∑–æ": 8, "—Å—Ç–∞–ª—å": 18, "–∫–æ–∂–∞": 5},
        # –ú–∏—Ñ—Ä–∏–ª–æ–≤—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã
        "–†–µ—Ü–µ–ø—Ç-–ú–∏—Ñ—Ä–∏–ª–æ–≤—ã–π –¥–æ—Å–ø–µ—Ö": {
            "–∫–æ–∂–∞": 20,
            "–º–∏—Ñ—Ä–∏–ª": 65,
            "—Ç–µ–Ω–µ–≤–æ–π —à–µ–ª–∫": 10
        },
        # –û–¥–µ–∂–¥—ã –∏ –ø–ª–∞—â–∏
        "–†–µ—Ü–µ–ø—Ç-–ü–ª–∞—â –ª–µ–≥–∫–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞": {
            "–∫–æ–∂–∞": 15,
            "—Ç–µ–Ω–µ–≤–æ–π —à–µ–ª–∫": 15
        },
        "–†–µ—Ü–µ–ø—Ç-–û–¥–µ—è–Ω–∏–µ —É—á–µ–Ω–∏–∫–∞ –º–∞–≥–∞": {
            "–∫–æ–∂–∞": 12,
            "—Ñ–∞–Ω—Ç–æ–º–Ω—ã–π —à–µ–ª–∫": 13
        },
        "–†–µ—Ü–µ–ø—Ç-–û–¥–µ—è–Ω–∏–µ —Å—Ç–∞—Ä–æ–≥–æ –º–∞–≥–∞": {
            "–∫–æ–∂–∞": 13,
            "–∫–∞–º–µ–Ω—å": 10,
            "—Ç–∫–∞–Ω—å –∑–∞–±—ã—Ç—ã—Ö": 14
        },
        "–†–µ—Ü–µ–ø—Ç-–ë–ª–∞—Ö–∞–Ω —Ü–∏–Ω—Ç–∞": {
            "–º–∏—Ñ—Ä–∏–ª": 10,
            "–∏—Å–∫—Ä–∞ –¥—É—à–∏": 12
        },
        "–†–µ—Ü–µ–ø—Ç-–ü–ª–∞—â –ª—É–Ω–Ω–æ–π –ø—ã–ª–∏": {
            "–∫–∞–º–µ–Ω—å": 14,
            "—Ñ–∞–Ω—Ç–æ–º–Ω—ã–π —à–µ–ª–∫": 10
        },
        "–†–µ—Ü–µ–ø—Ç-–ü–ª–∞—â –ª—É–Ω–Ω–æ–≥–æ —Å–≤–µ—Ç–∞": {
            "–∫–∞–º–µ–Ω—å": 14,
            "—Ç–µ–Ω–µ–≤–æ–π —à–µ–ª–∫": 8
        },
        "–†–µ—Ü–µ–ø—Ç-–ú–∞–Ω—Ç–∏—è –ø—ã–ª–∞—é—â–µ–π –º–∞–≥–º—ã": {
            "—Å—Ç–∞–ª—å": 2,
            "–∞–ª–º–∞–∑": 3,
            "–ø–µ–ø–µ–ª —Ñ–µ–Ω–∏–∫—Å–∞": 7
        },
        "–†–µ—Ü–µ–ø—Ç-–ú–∞–Ω—Ç–∏—è –≥—Ä–æ–∑–æ–≤–æ–≥–æ —à—ë–ø–æ—Ç–∞": {
            "—Ç–∫–∞–Ω—å –∑–∞–±—ã—Ç—ã—Ö": 13,
            "–∏—Å–∫—Ä–∞ –¥—É—à–∏": 1
        },
        "–†–µ—Ü–µ–ø—Ç-–û–¥–µ—è–Ω–∏–µ –≤–µ—Ç—Ä–∞": {
            "—Ç–µ–Ω–µ–≤–æ–π —Å–∞–≤–∞–Ω": 12
        },
        "–†–µ—Ü–µ–ø—Ç-–û–¥–µ—è–Ω–∏–µ –ª–µ–¥—è–Ω–æ–≥–æ –≤–∑–¥–æ—Ö–∞": {
            "–∞–ª–º–∞–∑": 3,
            "—Ñ–∞–Ω—Ç–æ–º–Ω—ã–π —à–µ–ª–∫": 13
        }

    }

}
char_recipes = {
    "armor_diryk": {
        # –û–¥–µ—è–Ω–∏–µ –∏ –ø–ª–∞—â–∏
        "–ü–ª–∞—â –ª–µ–≥–∫–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞": {
            'hp': 0,
            'mana': 10,
            'attack': -2,
            'defense': 5,
            'strength': 0,
            'agility': 3,
            'intelligence': 1,
            'crit_chance': 0.00,
            'crit_damage': 0.00,
        },
        "–û–¥–µ—è–Ω–∏–µ —É—á–µ–Ω–∏–∫–∞ –º–∞–≥–∞": {
            'hp': 5,
            'mana': 25,
            'attack': -5,
            'defense': 8,
            'strength': 0,
            'agility': -1,
            'intelligence': 3,
            'crit_chance': 0.00,
            'crit_damage': 0.00,
        },
        "–û–¥–µ—è–Ω–∏–µ —Å—Ç–∞—Ä–æ–≥–æ –º–∞–≥–∞": {
            'hp': 15,
            'mana': 30,
            'attack': -10,
            'defense': 12,
            'strength': 0,
            'agility': -2,
            'intelligence': 5,
            'crit_chance': 0.00,
            'crit_damage': 0.00,
        },
        "–ë–ª–∞—Ö–∞–∏ —Ü–∏–Ω—Ç–∞": {
            'hp': 0,
            'mana': 40,
            'attack': -12,
            'defense': 6,
            'strength': 0,
            'agility': 0,
            'intelligence': 6,
            'crit_chance': 0.03,
            'crit_damage': 0.00,
        },
        "–ü–ª–∞—â –ª—É–Ω–Ω–æ–π –ø—ã–ª–∏": {
            'hp': 0,
            'mana': 15,
            'attack': -5,
            'defense': 6,
            'strength': 0,
            'agility': 2,
            'intelligence': 2,
            'crit_chance': 0.00,
            'crit_damage': 0.00,
        },
        "–ü–ª–∞—â –ª—É–Ω–Ω–æ–≥–æ —Å–≤–µ—Ç–∞": {
            'hp': 0,
            'mana': 20,
            'attack': -5,
            'defense': 4,
            'strength': 0,
            'agility': 1,
            'intelligence': 4,
            'crit_chance': 0.00,
            'crit_damage': 0.00,
        },
        "–ú–∞–Ω—Ç–∏—è –ø—ã–ª–∞—é—â–µ–π –º–∞–≥–º—ã": {
            'hp': 10,
            'mana': 0,
            'attack': 8,
            'defense': 15,
            'strength': 3,
            'agility': -3,
            'intelligence': 0,
            'crit_chance': 0.00,
            'crit_damage': 0.15,
        },
        "–ú–∞–Ω—Ç–∏—è –≥—Ä–æ–∑–æ–≤–æ–≥–æ —à—ë–ø–æ—Ç–∞": {
            'hp': 10,
            'mana': 45,
            'attack': 0,
            'defense': 7,
            'strength': -1,
            'agility': 0,
            'intelligence': 6,
            'crit_chance': 0.05,
            'crit_damage': 0.00,
        },
        "–û–¥–µ—è–Ω–∏–µ –≤–µ—Ç—Ä–∞": {
            'hp': 0,
            'mana': 12,
            'attack': 0,
            'defense': 7,
            'strength': 0,
            'agility': 5,
            'intelligence': 1,
            'crit_chance': 0.00,
            'crit_damage': 0.00,
        },
        "–û–¥–µ—è–Ω–∏–µ –ª–µ–¥—è–Ω–æ–≥–æ –≤–∑–¥–æ—Ö–∞": {
            'hp': 5,
            'mana': 18,
            'attack': 0,
            'defense': 10,
            'strength': 0,
            'agility': -1,
            'intelligence': 3,
            'crit_chance': 0.00,
            'crit_damage': 0.10,
        },
        # –±—Ä–æ–Ω—è –∫–æ–∂–∞
        "–ö–æ–∂–∞–Ω–∞—è –±—Ä–æ–Ω—è": {
            'hp': 10,
            'mana': 5,
            'attack': 0,
            'defense': 5,
            'strength': 1,
            'agility': 1,
            'intelligence': 1,
            'crit_chance': 0.00,
            'crit_damage': 0.00,
        },
        # –ñ–µ–ª–µ–∑–Ω–∞—è-—Å—Ç–∞–ª—å–Ω–∞—è –±—Ä–æ–Ω—è
        "–ñ–µ–ª–µ–∑–Ω–∞—è –∫–∏—Ä–∞—Å–∞": {
            'hp': 20,
            'mana': 0,
            'attack': 0,
            'defense': 15,
            'strength': 3,
            'agility': -1,
            'intelligence': 0,
            'crit_chance': 0.00,
            'crit_damage': 0.00,
        },
        "–ñ–µ–ª–µ–∑–Ω—ã–µ –ª–∞—Ç—ã": {
            'hp': 25,
            'mana': 0,
            'attack': 0,
            'defense': 20,
            'strength': 4,
            'agility': -2,
            'intelligence': 0,
            'crit_chance': 0.00,
            'crit_damage': 0.00,
        },
        "–ñ–µ–ª–µ–∑–Ω–∞—è –∫–æ–ª—å—á—É–≥–∞": {
            'hp': 15,
            'mana': 0,
            'attack': 0,
            'defense': 10,
            'strength': 2,
            'agility': 1,
            'intelligence': 0,
            'crit_chance': 0.00,
            'crit_damage': 0.00,
        },
        # –ú–∏—Ñ—Ä–∏–ª–æ–≤—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã
        "–ú–∏—Ñ—Ä–∏–ª–æ–≤—ã–π –¥–æ—Å–ø–µ—Ö": {
            'hp': 50,
            'mana': 0,
            'attack': 0,
            'defense': 40,
            'strength': 10,
            'agility': -2,
            'intelligence': 5,
            'crit_chance': 0.00,
            'crit_damage': 0.00,
        },

    },

    "weapon_diryk": {
        # –î–µ—Ä–µ–≤—è–Ω–Ω–æ–µ –æ—Ä—É–∂–∏–µ
        "–î–µ—Ä–µ–≤—è–Ω–Ω—ã–π –º–µ—á": {
            'hp': 0, 'mana': 0, 'attack': 5, 'defense': 0, 'strength': 0, 'agility': 0, 'intelligence': 0,
            'crit_chance': 0.01, 'crit_damage': 0.05,
        },
        "–î–µ—Ä–µ–≤—è–Ω–Ω–æ–µ –∫–æ–ø—å–µ": {
            'hp': 0,
            'mana': 0,
            'attack': 0,
            'defense': 0,
            'strength': 0,
            'agility': 1,
            'intelligence': 0,
            'crit_chance': 0.01,
            'crit_damage': 0.05,
        },
        "–î–µ—Ä–µ–≤—è–Ω–Ω–æ–µ –ø–æ—Å–æ—Ö": {
            'hp': 0,
            'mana': 2,
            'attack': 5,
            'defense': 0,
            'strength': 0,
            'agility': 0,
            'intelligence': 1,
            'crit_chance': 0,
            'crit_damage': 0,
        },
        "–î–µ—Ä–µ–≤—è–Ω–Ω—ã–π –¥–≤—É—Ä—É—á–Ω—ã–π –º–µ—á": {
            'hp': 0,
            'mana': 0,
            'attack': 8,
            'defense': 1,
            'strength': 2,
            'agility': 0,
            'intelligence': 0,
            'crit_chance': 0,
            'crit_damage': 0,
        },
        "–î–µ—Ä–µ–≤—è–Ω–Ω—ã–π –ª—É–∫": {
            'hp': 0,
            'mana': 0,
            'attack': 5,
            'defense': 0,
            'strength': 0,
            'agility': 2,
            'intelligence': 0,
            'crit_chance': 0.03,
            'crit_damage': 0.05,
        },
        # –ñ–µ–ª–µ–∑–Ω–æ–µ –æ—Ä—É–∂–∏–µ
        "–ñ–µ–ª–µ–∑–Ω—ã–π –º–µ—á": {
            'hp': 0,
            'mana': 0,
            'attack': 15,
            'defense': 0,
            'strength': 2,
            'agility': 1,
            'intelligence': 1,
            'crit_chance': 0.04,
            'crit_damage': 0.05,
        },
        "–ñ–µ–ª–µ–∑–Ω—ã–π —Ç–æ–ø–æ—Ä": {
            'hp': 10,
            'mana': 0,
            'attack': 10,
            'defense': 0,
            'strength': 2,
            'agility': 1,
            'intelligence': 1,
            'crit_chance': 0.04,
            'crit_damage': 0.05,
        },
        "–ñ–µ–ª–µ–∑–Ω—ã–π –∫–æ–ø—å–µ": {
            'hp': 0,
            'mana': 0,
            'attack': 15,
            'defense': 0,
            'strength': 1,
            'agility': 2,
            'intelligence': 0,
            'crit_chance': 0.03,
            'crit_damage': 0.01,
        },
        "–ñ–µ–ª–µ–∑–Ω—ã–π –ø–æ—Å–æ—Ö": {
            'hp': 0,
            'mana': 10,
            'attack': 5,
            'defense': 0,
            'strength': 1,
            'agility': 1,
            'intelligence': 3,
            'crit_chance': 0.02,
            'crit_damage': 0.03,
        },
        "–ñ–µ–ª–µ–∑–Ω—ã–π –¥–≤—É—Ä—É—á–Ω—ã–π –º–µ—á": {
            'hp': 5,
            'mana': 0,
            'attack': 25,
            'defense': 0,
            'strength': 5,
            'agility': 1,
            'intelligence': 0,
            'crit_chance': 0.05,
            'crit_damage': 0.10,
        },
        "–ñ–µ–ª–µ–∑–Ω—ã–π –ª—É–∫": {
            'hp': 0,
            'mana': 0,
            'attack': 18,
            'defense': 0,
            'strength': 2,
            'agility': 4,
            'intelligence': 1,
            'crit_chance': 0.06,
            'crit_damage': 0.08,
        },
        "–ñ–µ–ª–µ–∑–Ω—ã–π –∫–∏–Ω–∂–∞–ª": {
            'hp': 0,
            'mana': 0,
            'attack': 12,
            'defense': 0,
            'strength': 1,
            'agility': 3,
            'intelligence': 0,
            'crit_chance': 0.08,
            'crit_damage': 0.12,
        },
        "–ñ–µ–ª–µ–∑–Ω—ã–π –∞—Ä–±–∞–ª–µ—Ç": {
            'hp': 0,
            'mana': 0,
            'attack': 20,
            'defense': 0,
            'strength': 3,
            'agility': 2,
            'intelligence': 1,
            'crit_chance': 0.04,
            'crit_damage': 0.07,
        },
        "–ñ–µ–ª–µ–∑–Ω–∞—è –ø–∞–ª–∏—Ü–∞": {
            'hp': 0,
            'mana': 0,
            'attack': 16,
            'defense': 0,
            'strength': 4,
            'agility': 1,
            'intelligence': 0,
            'crit_chance': 0.03,
            'crit_damage': 0.05,
        },
        "–ñ–µ–ª–µ–∑–Ω—ã–π –ø–∞–ª–∞—à": {
            'hp': 0,
            'mana': 0,
            'attack': 20,
            'defense': 0,
            'strength': 3,
            'agility': 2,
            'intelligence': 0,
            'crit_chance': 0.05,
            'crit_damage': 0.09,
        },
        "–ñ–µ–ª–µ–∑–Ω–∞—è –±—É–ª–∞–≤–∞": {
            'hp': 0,
            'mana': 0,
            'attack': 18,
            'defense': 0,
            'strength': 4,
            'agility': 1,
            'intelligence': 0,
            'crit_chance': 0.04,
            'crit_damage': 0.06,
        },
        "–ñ–µ–ª–µ–∑–Ω—ã–π –±–æ–µ–≤–æ–π –º–æ–ª–æ—Ç": {
            'hp': 0,
            'mana': 0,
            'attack': 30,
            'defense': 0,
            'strength': 6,
            'agility': 0,
            'intelligence': 0,
            'crit_chance': 0.03,
            'crit_damage': 0.15,
        },
        "–ñ–µ–ª–µ–∑–Ω–∞—è —Å–∞–±–ª—è": {
            'hp': 0,
            'mana': 0,
            'attack': 18,
            'defense': 0,
            'strength': 2,
            'agility': 3,
            'intelligence': 0,
            'crit_chance': 0.06,
            'crit_damage': 0.08,
        },
        # –°—Ç–∞–ª—å–Ω–æ–µ –æ—Ä—É–∂–∏–µ
        "–°—Ç–∞–ª—å–Ω–æ–π –º–µ—á": {
            'hp': 0,
            'mana': 0,
            'attack': 38,  # –£–≤–µ–ª–∏—á–µ–Ω –¥–ª—è –±–æ–ª—å—à–µ–π —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            'defense': 0,
            'strength': 4
            ,  # –£–≤–µ–ª–∏—á–µ–Ω –¥–ª—è –ª—É—á—à–µ–≥–æ —É—Ä–æ–Ω–∞
            'agility': 1,
            'intelligence': 1,
            'crit_chance': 0.05,  # –ù–µ–º–Ω–æ–≥–æ —É–≤–µ–ª–∏—á–µ–Ω —à–∞–Ω—Å –∫—Ä–∏—Ç–∞
            'crit_damage': 0.06,  # –ù–µ–º–Ω–æ–≥–æ —É–≤–µ–ª–∏—á–µ–Ω —É—Ä–æ–Ω –æ—Ç –∫—Ä–∏—Ç–∞
        },
        "–°—Ç–∞–ª—å–Ω–æ–µ –∫–æ–ø—å–µ": {
            'hp': 0,
            'mana': 0,
            'attack': 38,  # –£–≤–µ–ª–∏—á–µ–Ω –¥–ª—è –±–æ–ª—å—à–µ–π —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            'defense': 0,
            'strength': 2,  # –£–≤–µ–ª–∏—á–µ–Ω –¥–ª—è –ª—É—á—à–µ–≥–æ —É—Ä–æ–Ω–∞
            'agility': 4,
            'intelligence': 0,
            'crit_chance': 0.06,  # –ù–µ–º–Ω–æ–≥–æ —É–≤–µ–ª–∏—á–µ–Ω —à–∞–Ω—Å –∫—Ä–∏—Ç–∞
            'crit_damage': 0.02,  # –ù–µ–º–Ω–æ–≥–æ —É–≤–µ–ª–∏—á–µ–Ω —É—Ä–æ–Ω –æ—Ç –∫—Ä–∏—Ç–∞
        },
        "–°—Ç–∞–ª—å–Ω–æ–π –¥–≤—É—Ä—É—á–Ω—ã–π –º–µ—á": {
            'hp': 5,
            'mana': 0,
            'attack': 55,  # –û—Å—Ç–∞–≤–ª—è–µ–º –Ω–∞ —É—Ä–æ–≤–Ω–µ –∂–µ–ª–µ–∑–Ω–æ–≥–æ –¥–≤—É—Ä—É—á–Ω–æ–≥–æ –º–µ—á–∞
            'defense': 2,
            'strength': 8,
            'agility': 1,
            'intelligence': 0,
            'crit_chance': 0.06,  # –£–≤–µ–ª–∏—á–µ–Ω —à–∞–Ω—Å –∫—Ä–∏—Ç–∞
            'crit_damage': 0.12,  # –£–≤–µ–ª–∏—á–µ–Ω —É—Ä–æ–Ω –æ—Ç –∫—Ä–∏—Ç–∞
        },
        "–°—Ç–∞–ª—å–Ω–æ–π –∫–∏–Ω–∂–∞–ª": {
            'hp': 0,
            'mana': 0,
            'attack': 34,  # –£–≤–µ–ª–∏—á–µ–Ω –¥–ª—è –±–æ–ª—å—à–µ–π —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            'defense': 0,
            'strength': 2,
            'agility': 8,  # –£–≤–µ–ª–∏—á–µ–Ω–∞ –ª–æ–≤–∫–æ—Å—Ç—å –¥–ª—è –±–æ–ª—å—à–µ–π —Å–∫–æ—Ä–æ—Å—Ç–∏
            'intelligence': 0,
            'crit_chance': 0.09,  # –£–≤–µ–ª–∏—á–µ–Ω —à–∞–Ω—Å –∫—Ä–∏—Ç–∞
            'crit_damage': 0.14,  # –£–≤–µ–ª–∏—á–µ–Ω —É—Ä–æ–Ω –æ—Ç –∫—Ä–∏—Ç–∞
        },
        "–°—Ç–∞–ª—å–Ω–æ–π –∞—Ä–±–∞–ª–µ—Ç": {
            'hp': 0,
            'mana': 0,
            'attack': 42,  # –£–≤–µ–ª–∏—á–µ–Ω –¥–ª—è –±–æ–ª—å—à–µ–π —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            'defense': 0,
            'strength': 3,
            'agility': 4,
            'intelligence': 1,
            'crit_chance': 0.05,  # –ù–µ–º–Ω–æ–≥–æ —É–≤–µ–ª–∏—á–µ–Ω —à–∞–Ω—Å –∫—Ä–∏—Ç–∞
            'crit_damage': 0.08,  # –ù–µ–º–Ω–æ–≥–æ —É–≤–µ–ª–∏—á–µ–Ω —É—Ä–æ–Ω –æ—Ç –∫—Ä–∏—Ç–∞
        },
        "–°—Ç–∞–ª—å–Ω–æ–π –±–æ–µ–≤–æ–π –º–æ–ª–æ—Ç": {
            'hp': 0,
            'mana': 0,
            'attack': 55,  # –£–≤–µ–ª–∏—á–µ–Ω –¥–ª—è –±–æ–ª—å—à–µ–π —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            'defense': 0,
            'strength': 8,  # –£–≤–µ–ª–∏—á–µ–Ω –¥–ª—è –ª—É—á—à–µ–≥–æ —É—Ä–æ–Ω–∞
            'agility': 2,
            'intelligence': 0,
            'crit_chance': 0.04,  # –ù–µ–º–Ω–æ–≥–æ —É–≤–µ–ª–∏—á–µ–Ω —à–∞–Ω—Å –∫—Ä–∏—Ç–∞
            'crit_damage': 0.18,  # –£–≤–µ–ª–∏—á–µ–Ω —É—Ä–æ–Ω –æ—Ç –∫—Ä–∏—Ç–∞
        },
        "–°—Ç–∞–ª—å–Ω–∞—è –∫–∞—Ç–∞–Ω–∞": {
            'hp': 0,
            'mana': 0,
            'attack': 45,  # –£–≤–µ–ª–∏—á–µ–Ω –¥–ª—è –±–æ–ª—å—à–µ–π —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            'defense': 0,
            'strength': 2,
            'agility': 8,
            'intelligence': 0,
            'crit_chance': 0.09,  # –£–≤–µ–ª–∏—á–µ–Ω —à–∞–Ω—Å –∫—Ä–∏—Ç–∞
            'crit_damage': 0.15,  # –£–≤–µ–ª–∏—á–µ–Ω —É—Ä–æ–Ω –æ—Ç –∫—Ä–∏—Ç–∞
        },
        # –ú–∏—Ñ—Ä–∏–ª–æ–≤—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã
        "–ú–∏—Ñ—Ä–∏–ª–æ–≤—ã–π –ø–æ—Å–æ—Ö": {
            'hp': 0,
            'mana': 45,
            'attack': 35,
            'defense': 0,
            'strength': 0,
            'agility': 0,
            'intelligence': 15,
            'crit_chance': 0.00,
            'crit_damage': 0.00,
        },
        "–ú–∏—Ñ—Ä–∏–ª–æ–≤—ã–π –º–µ—á": {
            'hp': 0,
            'mana': 0,
            'attack': 75,
            'defense': 5,
            'strength': 8,
            'agility': 6,
            'intelligence': 0,
            'crit_chance': 0.07,
            'crit_damage': 0.12,
        },
        "–ú–∏—Ñ—Ä–∏–ª–æ–≤—ã–π –ª—É–∫": {
            'hp': 0,
            'mana': 0,
            'attack': 60,
            'defense': 0,
            'strength': 3,
            'agility': 12,
            'intelligence': 0,
            'crit_chance': 0.10,
            'crit_damage': 0.15,
        },
        "–ú–∏—Ñ—Ä–∏–ª–æ–≤—ã–π –∫–∏–Ω–∂–∞–ª": {
            'hp': 0,
            'mana': 0,
            'attack': 65,
            'defense': 0,
            'strength': 1,
            'agility': 15,
            'intelligence': 0,
            'crit_chance': 0.15,
            'crit_damage': 0.35,
        },
        "–ú–∏—Ñ—Ä–∏–ª–æ–≤–∞—è –Ω–∞–≥–∏–Ω–∞—Ç–∞": {
            'hp': 10,
            'mana': 0,
            'attack': 95,
            'defense': 3,
            'strength': 8,
            'agility': 7,
            'intelligence': 0,
            'crit_chance': 0.08,
            'crit_damage': 0.18,
        },

    },

}
SPECIAL_SKILLS = {
    "–ö–∞–º–µ–Ω—å-–û–≥–Ω–µ–Ω–Ω—ã–π –≤–∑—Ä—ã–≤": {
        "description": "üî• –ú–æ—â–Ω—ã–π –≤–∑—Ä—ã–≤ –æ–≥–Ω—è, –Ω–∞–Ω–æ—Å—è—â–∏–π —É—Ä–æ–Ω —Ä–∞–≤–Ω—ã–π (intelligence * 3) + (attack * 2)",
        "cost": 30,  # —Å—Ç–æ–∏–º–æ—Å—Ç—å –º–∞–Ω—ã
        "effect": lambda stats: (stats['intelligence'] * 3) + (stats['attack'] * 2)
    },
    "–ö–∞–º–µ–Ω—å-–õ–µ—á–µ–Ω–∏–µ": {
        "description": "üíö –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∑–¥–æ—Ä–æ–≤—å–µ —Ä–∞–≤–Ω–æ–µ (intelligence * 2) + (strength * 1.5)",
        "cost": 25,
        "effect": lambda stats: (stats['intelligence'] * 2) + (stats['strength'] * 1.5)
    },
    "–ö–∞–º–µ–Ω—å-–Ø—Ä–æ—Å—Ç—å": {
        "description": "üí¢ –£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –∞—Ç–∞–∫—É –Ω–∞ 50% –∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —É—Ä–æ–Ω –Ω–∞ 25% –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —Ö–æ–¥",
        "cost": 40,
        "effect": lambda stats: {
            'attack_multiplier': 1.5,
            'crit_damage_multiplier': 1.25
        }
    }
}

# =====================================–ü—Ä–µ–¥–º–µ—Ç—ã=====================================#


PHOTO_ARMOR = {
    "–ë—Ä–æ–Ω—è –ú–∏–º–∏—Ä–∞": "Photo/KingDang/ARM/Armor Mimir.jpg",
    "–¢–∫–∞–Ω–µ–≤–∞—è –±—Ä–æ–Ω—è": "Photo/KingDang/ARM/—Ç–∫–∞–Ω—å.jpg",
    "–õ–µ–≥–∫–∞—è –±—Ä–æ–Ω—è": "Photo/KingDang/ARM/–ª–µ–≥–∫–∞—è.jpg",

}
PHOTO_ARSENAL = {
    "–î–µ—Ä–µ–≤—è–Ω–Ω—ã–π –º–µ—á": "Photo/KingDang/ARs/sword.jpg",
    "–î–µ—Ä–µ–≤—è–Ω–Ω–æ–µ –∫–æ–ø—å–µ": "Photo/KingDang/ARs/spear.jpg",
    "–õ–µ–≥–∫–∞—è –±—Ä–æ–Ω—è": "Photo/KingDang/ARM/–ª–µ–≥–∫–∞—è.jpg",

}


# =====================================–ë–∞—à–Ω—è –ù–µ–≤–µ–¥–æ–º–æ–≥–æ üóº=====================================#
def calculate_hero_power(hero_stats):
    """–í—ã—á–∏—Å–ª—è–µ—Ç –æ–±—â—É—é –º–æ—â—å –≥–µ—Ä–æ—è"""
    if not hero_stats:
        return 0

    return ((hero_stats.get('hp', 0) * 0.1 + hero_stats.get('mana', 0) * 0.1) + (
            hero_stats.get('attack', 0) + hero_stats.get('defense', 0)) *
            ((hero_stats.get('strength', 0) + hero_stats.get('agility', 0) + hero_stats.get('intelligence', 0)) * 0.1) +
            (hero_stats.get('attack', 0) *
             (hero_stats.get('crit_chance', 0) * hero_stats.get('crit_damage', 0))))


@dp.message(F.text == "–ë–∞—à–Ω—è –ù–µ–≤–µ–¥–æ–º–æ–≥–æ üóº")
async def spuck(message: types.Message):
    await message.answer("–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —ç—Ç–∞–∂–∏ –ë–∞—à–Ω–∏ –ù–µ–≤–µ–¥–æ–º–æ–≥–æ üóº....", reply_markup=types.ReplyKeyboardRemove())

    try:
        user_id = str(message.from_user.id)  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å—Ç—Ä–æ–∫—É –¥–ª—è consistency —Å subscription_data

        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–æ–≤
        with open(SUBSCRIPTION_DATA_FILE, "r") as f:
            subscription_data = json.load(f)
        with open(CHARACTER_DATA_FILE, "r") as f:
            character_data = json.load(f)

        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≥–µ—Ä–æ—è
        hero_stats = character_data.get(user_id, {}).get('hero_stats', {})

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å –∏ –º–æ—â—å –∏–∑ subscription_data
        user_sub_data = subscription_data["users"].get(user_id, {})
        current_floor = user_sub_data.get("dungeon_floor", 0)
        power = user_sub_data.get("power", 0)  # –ë–µ—Ä–µ–º –º–æ—â–Ω–æ—Å—Ç—å –∏–∑ subscription_data
        abs_floor = abs(current_floor)

        # –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —ç—Ç–∞–∂–µ–π –ø–æ –≥—Ä—É–ø–ø–∞–º
        if abs_floor <= 15:
            photo_group = "–°–ø—É—Å–∫ 0-15"
        elif 16 <= abs_floor <= 30:
            photo_group = "–°–ø—É—Å–∫ 16-30"
        else:
            photo_group = "–°–ø—É—Å–∫ 31-45"

        spuck_photos = spusk_photo_dang.get(photo_group, {})

        if not spuck_photos:
            await message.answer("üö™ –í—Ö–æ–¥ –≤ –ø–æ–¥–∑–µ–º–µ–ª—å–µ —Å–µ–≥–æ–¥–Ω—è –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç...")
            return

        # –ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ —Å–ª—É—á–∞–π–Ω—ã–π –≤—ã–±–æ—Ä
        random.seed()
        photos_list = list(spuck_photos.items())
        if not photos_list:
            await message.answer("üåÄ –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è —ç—Ç–æ–≥–æ —É—Ä–æ–≤–Ω—è")
            return

        random_photo_key, photo_path = random.choice(photos_list)

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç—Ä–µ–±—É–µ–º—É—é –º–æ—â—å –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —ç—Ç–∞–∂–∞
        next_floor = current_floor - 1
        required_power = lvl_spusk_dang.get(abs(next_floor), {}).get("power_required", 0)

        power_info = (f"\n\n‚öúÔ∏è –í–∞—à–∞ –±–æ–µ–≤–∞—è –º–æ—â—å: {power:.1f}"
                      f"\n‚öúÔ∏è –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–ª—è –ø—Ä–æ—Ö–æ–¥–∞: {required_power}")

        try:
            if not os.path.exists(photo_path):
                raise FileNotFoundError(f"–§–∞–π–ª {photo_path} –Ω–µ –Ω–∞–π–¥–µ–Ω")

            # –î–æ–±–∞–≤–ª—è–µ–º timestamp –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
            timestamp = int(time.time())
            with open(photo_path, 'rb') as photo_file:
                await message.answer_photo(
                    types.BufferedInputFile(
                        photo_file.read(),
                        filename=f"dungeon_{timestamp}.jpg"
                    ),
                    caption=f"üåÄ {random_photo_key}{power_info}",
                    reply_markup=get_descent_keyboard()
                )
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ç–æ: {e}")
            await message.answer(
                f"üåÄ {random_photo_key}{power_info}",
                reply_markup=get_descent_keyboard()
            )

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ spuck: {e}")
        await message.answer("‚ö† –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ –ø–æ–¥–∑–µ–º–µ–ª—å–µ!")


@dp.callback_query(F.data == "try_descent")
async def process_descent(callback: types.CallbackQuery):
    try:
        await callback.answer("‚è≥ –ù–∞—á–∏–Ω–∞–µ–º —Å–ø—É—Å–∫...")

        user_id = str(callback.from_user.id)
        hero_stats = user_data.get(int(user_id), {}).get('hero_stats', {})

        # –ü–æ–ª—É—á–∞–µ–º –º–æ—â–Ω–æ—Å—Ç—å –∏–∑ subscription_data
        power = subscription_data["users"].get(user_id, {}).get("power", 0)
        if not power:
            power = calculate_hero_power(hero_stats)  # –†–µ–∑–µ—Ä–≤–Ω—ã–π —Ä–∞—Å—á–µ—Ç, –µ—Å–ª–∏ power –Ω–µ—Ç –≤ subscription_data

        # –ê–Ω–∏–º–∞—Ü–∏—è —Å–ø—É—Å–∫–∞
        random_text = random.choice(list(text_spusk_dang))
        temp_text = ""
        for char in random_text:
            temp_text += char
            try:
                await callback.message.edit_caption(
                    caption=f"üåÄ {temp_text}...",
                    reply_markup=None
                )
            except:
                pass
            await asyncio.sleep(0.0)

        await asyncio.sleep(random.uniform(0.7, 1.5))

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —ç—Ç–∞–∂ –∏–∑ subscription_data
        current_floor = subscription_data["users"].get(user_id, {}).get("dungeon_floor", 0)
        next_floor = current_floor - 1
        abs_next_floor = abs(next_floor)

        # –û—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π...
        # –õ–æ–≥–∏–∫–∞ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö —ç—Ç–∞–∂–µ–π
        floor_data = lvl_spusk_dang.get(next_floor, {})
        required_power = floor_data.get("power_required", float('inf'))

        power_info = (f"\n\n‚öúÔ∏è  –í–∞—à–∞ –º–æ—â—å: {power:.1f}"
                      f"\n‚öúÔ∏è –¢—Ä–µ–±—É–µ—Ç—Å—è: {required_power}")

        if power >= required_power:
            # –û–±–Ω–æ–≤–ª—è–µ–º —ç—Ç–∞–∂ –≤ subscription_data
            if user_id not in subscription_data["users"]:
                subscription_data["users"][user_id] = {}
            subscription_data["users"][user_id]["dungeon_floor"] = next_floor
            save_data()

            reaction = random.choice(["‚úÖ", "üéâ", "‚ú®", "üëë", "üèÜ"])
            floor_name = floor_data.get("name", f"{abs_next_floor}-–π –ø–æ–¥–∑–µ–º–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å")
            message = f"{reaction} –í—ã —É—Å–ø–µ—à–Ω–æ —Å–ø—É—Å—Ç–∏–ª–∏—Å—å –Ω–∞ {floor_name}!{power_info}"

            # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö —ç—Ç–∞–∂–µ–π
            if abs_next_floor == 4:
                message += "\n\nüî® –í—ã –æ—Ç–∫—Ä—ã–ª–∏ –ö—É–∑–Ω—é!"
            elif abs_next_floor == 6:
                message += "\n\n‚õ©Ô∏è –í—ã –æ—Ç–∫—Ä—ã–ª–∏ –î–æ–¥–∑—ë!"
            elif abs_next_floor == 9:
                message += "\n\nüß© –í—ã –æ—Ç–∫—Ä—ã–ª–∏ –õ–∞–±–∏—Ä–∏–Ω—Ç –î–∏—Ä—É–∫–∞!"

            try:
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –≥—Ä—É–ø–ø—É —Ñ–æ—Ç–æ
                if abs_next_floor <= 15:
                    photo_group = "–°–ø—É—Å–∫ 0-15"
                elif 16 <= abs_next_floor <= 30:
                    photo_group = "–°–ø—É—Å–∫ 16-30"
                else:
                    photo_group = "–°–ø—É—Å–∫ 31-45"

                if photo_group in spusk_photo_dang and spusk_photo_dang[photo_group]:
                    photo_path = random.choice(list(spusk_photo_dang[photo_group].values()))
                    photo = FSInputFile(photo_path)
                    await callback.message.edit_media(
                        InputMediaPhoto(
                            media=photo,
                            caption=message
                        ),
                        reply_markup=get_descent_keyboard()
                    )
                else:
                    await callback.message.edit_caption(
                        caption=message,
                        reply_markup=get_descent_keyboard()
                    )
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ: {e}")
                await callback.message.edit_caption(
                    caption=message,
                    reply_markup=get_descent_keyboard()
                )
        else:
            reaction = random.choice(["‚ùå", "üíÄ", "‚ò†", "üëπ"])
            fail_text = random.choice([
                "–í–∞–º –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–ø—É—Å—Ç–∏—Ç—å—Å—è!",
                "–ü–æ–ø—ã—Ç–∫–∞ –ø—Ä–æ–≤–∞–ª–∏–ª–∞—Å—å!",
                "–°–ø—É—Å–∫ —Å–æ—Ä–≤–∞–ª—Å—è!"
            ])
            await callback.message.edit_caption(
                caption=f"{reaction} {fail_text}{power_info}",
                reply_markup=get_descent_keyboard()
            )

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ process_descent: {e}", exc_info=True)
        try:
            await callback.message.edit_caption(
                caption="‚ö† –ü—Ä–æ–∏–∑–æ—à–ª–∞ –º–∞–≥–∏—á–µ—Å–∫–∞—è –∞–Ω–æ–º–∞–ª–∏—è –ø—Ä–∏ —Å–ø—É—Å–∫–µ!",
                reply_markup=get_descent_keyboard()
            )
        except:
            pass


@dp.callback_query(F.data == "attack_boss")
async def attack_boss_handler_dang(callback: types.CallbackQuery):
    try:
        user_id = callback.from_user.id

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        if user_id not in user_data:
            user_data[user_id] = {}
        if 'hero_stats' not in user_data[user_id]:
            user_data[user_id]['hero_stats'] = {}
        if 'dungeon_floor' not in user_data[user_id]:
            user_data[user_id]['dungeon_floor'] = 0  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º

        hero_stats = user_data[user_id].get('hero_stats', {})
        boss_data = user_data[user_id].get('current_boss', {})

        if not boss_data:
            await callback.answer("–ë–æ—Å—Å –∏—Å—á–µ–∑!", show_alert=True)
            return

        boss_name = boss_data['name']
        boss_stats = boss_data['stats']

        # –õ–æ–≥ –±–æ—è
        battle_log = []

        # 1. –ê—Ç–∞–∫–∞ –∏–≥—Ä–æ–∫–∞
        player_damage = max(1, hero_stats.get('attack', 1) - (boss_stats.get('defense', 0) // 2))
        boss_stats['hp'] -= player_damage
        battle_log.append(f"‚öîÔ∏è –í—ã –∞—Ç–∞–∫–æ–≤–∞–ª–∏ {boss_name} –∏ –Ω–∞–Ω–µ—Å–ª–∏ {player_damage} —É—Ä–æ–Ω–∞!")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–±–µ–¥—ã
        if boss_stats['hp'] <= 0:
            battle_log.append(f"üéâ –í—ã –ø–æ–±–µ–¥–∏–ª–∏ {boss_name} –∏ –ø—Ä–æ—à–ª–∏ —ç—Ç–∞–∂!")

            # –£–º–µ–Ω—å—à–∞–µ–º —ç—Ç–∞–∂ (–µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
            current_floor = user_data[user_id].get('dungeon_floor', 0)
            user_data[user_id]['dungeon_floor'] = current_floor - 1

            # –£–¥–∞–ª—è–µ–º –±–æ—Å—Å–∞ –∏–∑ –¥–∞–Ω–Ω—ã—Ö
            if 'current_boss' in user_data[user_id]:
                del user_data[user_id]['current_boss']

            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º HP –∏ –º–∞–Ω—É
            hero_stats['hp'] = hero_stats.get('hp_max', hero_stats.get('hp', 100))
            hero_stats['mana'] = hero_stats.get('mana_max', hero_stats.get('mana', 50))
            battle_log.append(f"‚ù§Ô∏è –í–∞—à–µ HP –∏ –º–∞–Ω–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!")

            # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Å–ø—É—Å–∫–∞
            await process_descent(callback)
            return

        # 2. –ê—Ç–∞–∫–∞ –±–æ—Å—Å–∞
        boss_damage = max(1, boss_stats.get('attack', 1) - (hero_stats.get('defense', 0) // 2))
        hero_stats['hp'] = hero_stats.get('hp', 100) - boss_damage
        battle_log.append(f"üëπ {boss_name} –∞—Ç–∞–∫–æ–≤–∞–ª –≤–∞—Å –∏ –Ω–∞–Ω–µ—Å {boss_damage} —É—Ä–æ–Ω–∞!")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä–∞–∂–µ–Ω–∏—è
        if hero_stats['hp'] <= 0:
            battle_log.append("üíÄ –í—ã –ø–æ—Ç–µ—Ä–ø–µ–ª–∏ –ø–æ—Ä–∞–∂–µ–Ω–∏–µ...")
        await callback.message.answer("\n".join(battle_log))
        return

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ —Ç–∞–±–ª–∏—Ü—É
        def format_battle_stats(boss_stats, hero_stats):
            stats = [
                ("üëπ –ë–æ—Å—Å", "", "üßç –ü–µ—Ä—Å–æ–Ω–∞–∂"),
                (
                    "‚ù§Ô∏è HP", f" {boss_stats['hp']}/{boss_stats['max_hp']}",
                    f"  {hero_stats['hp']}/{hero_stats['hp_max']}"),
                ("üó°Ô∏è –ê—Ç–∞–∫–∞", f" {boss_stats['attack']}", f"  {hero_stats['attack']}"),
                ("üõ°Ô∏è –ó–∞—â–∏—Ç–∞", f" {boss_stats['defense']}", f"  {hero_stats['defense']}"),
                ("üéØ –ö—Ä–∏—Ç", f"{boss_stats.get('crit_chance', 0) * 100:.1f}%",
                 f" {hero_stats.get('crit_chance', 0) * 100:.1f}%"),
                ("üí• –£—Ä–æ–Ω", f"{boss_stats.get('crit_damage', 1)}x", f" {hero_stats.get('crit_damage', 1)}x")
            ]

            col1_width = max(len(row[0]) for row in stats) + 2
            col2_width = max(len(row[1]) for row in stats) + 2
            col3_width = max(len(row[2]) for row in stats) + 2

            table = []
            for row in stats:
                line = row[0].ljust(col1_width) + row[1].ljust(col2_width) + row[2].ljust(col3_width)
                table.append(line)

            return "\n".join(table)

        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ –ª–æ–≥ –±–æ—è
        battle_stats = format_battle_stats(boss_stats, hero_stats)
        battle_log.append("\n" + battle_stats)

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏
        try:
            await callback.message.edit_caption(
                caption="\n".join(battle_log),
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚öîÔ∏è –ê—Ç–∞–∫–æ–≤–∞—Ç—å", callback_data="attack_boss")],
                    # [InlineKeyboardButton(text="üîÆ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —É–º–µ–Ω–∏–µ", callback_data="use_skill")]
                ]))
        except Exception as edit_error:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {edit_error}")
            await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –±–æ—è", show_alert=True)

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ attack_boss_handler_dang: {e}", exc_info=True)
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ –±–æ—é!", show_alert=True)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —É–º–µ–Ω–∏–π


def get_descent_keyboard():
    return InlineKeyboardMarkup(
        inline_keyboard=[

            [InlineKeyboardButton(text="–ë—Ä–æ—Å–∏—Ç—å –≤—ã–∑–æ–≤", callback_data="try_descent"),
             InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è", callback_data="return_to_menu")]
        ]
    )


@dp.callback_query(F.data == "return_to_menu")
async def return_to_menu_handler(callback: types.CallbackQuery):
    try:
        # –£–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        await callback.message.delete()

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –º–µ–Ω—é
        await dang_menu(callback.message)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –≤ –º–µ–Ω—é: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –≤ –º–µ–Ω—é", show_alert=True)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–∞–∂ –±–æ—Å—Å–æ–º
def is_boss_floor(floor):
    return lvl_spusk_dang.get(floor, {}).get('is_boss_floor', False)


# –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –±–æ—è —Å –±–æ—Å—Å–æ–º


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —É–º–µ–Ω–∏—è
@dp.callback_query(F.data == "use_skill")
async def show_skills_handler_dang(callback: types.CallbackQuery):
    try:
        user_id = callback.from_user.id
        user_info = user_data.get(user_id, {})
        special_skills = user_info.get("special_skills", {})  # –¢–µ–ø–µ—Ä—å –±–µ—Ä—ë–º –∏–∑ user_data

        if not special_skills:
            await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –Ω–∞–≤—ã–∫–æ–≤!", show_alert=True)
            return

        # –°–æ–∑–¥–∞—ë–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –Ω–∞–≤—ã–∫–∞
        skill_buttons = [
            [InlineKeyboardButton(
                text=f"{skill_name} (üîÆ{skill_data['cost']})",
                callback_data=f"use_skill:{skill_name}"
            )]
            for skill_name, skill_data in special_skills.items()
        ]

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
        skill_buttons.append(
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_battle")]
        )

        skill_keyboard = InlineKeyboardMarkup(inline_keyboard=skill_buttons)

        await callback.message.edit_caption(
            caption="üîÆ –í—ã–±–µ—Ä–∏—Ç–µ —É–º–µ–Ω–∏–µ:",
            reply_markup=skill_keyboard
        )

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ show_skills_handler_dang: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —É–º–µ–Ω–∏—è", show_alert=True)


# –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" –≤ –º–µ–Ω—é —É–º–µ–Ω–∏–π


@dp.callback_query(F.data == "back_to_battle")
async def back_to_battle_handler_dang(callback: types.CallbackQuery):
    try:
        user_id = callback.from_user.id
        hero_stats = user_data.get(user_id, {}).get('hero_stats', {})
        boss_data = user_data.get(user_id, {}).get('current_boss', {})

        if not boss_data:
            await callback.answer("–ë–æ—Å—Å –∏—Å—á–µ–∑!", show_alert=True)
            return

        boss_name = boss_data['name']
        boss_stats = boss_data['stats']

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—è
        await callback.message.edit_caption(
            caption=f"‚öîÔ∏è –ë–æ–π —Å {boss_name}\n\n"
                    f"‚ù§Ô∏è –í–∞—à–µ HP: {hero_stats['hp']}/{hero_stats['hp_max']}\n"
                    f"üîÆ –ú–∞–Ω–∞: {hero_stats['mana']}/{hero_stats['mana_max']}\n"
                    f"‚ù§Ô∏è HP {boss_name}: {boss_stats['hp']}/{boss_stats['max_hp']}",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚öîÔ∏è –ê—Ç–∞–∫–æ–≤–∞—Ç—å", callback_data="attack_boss"),
                 InlineKeyboardButton(text="üîÆ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —É–º–µ–Ω–∏–µ", callback_data="use_skill")]
            ])
        )

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ back_to_battle_handler_dang: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!", show_alert=True)


bosses_spusk_dang = {
    "–°–ª–∏–∑—å": {
        "photo": "Photo/KingDang/Spuck/Boss/1.jpeg",
        'hp': 10,
        "max_hp": 10,
        "mana": 200,
        'attack': 2,
        'defense': 1,
        'crit_chance': 0.05,
        'crit_damage': 1.5,
    },
    "–õ–∏–¥–µ—Ä –ì–Ω–æ–ª–ª–æ–≤": {
        "photo": "Photo/KingDang/Spuck/Boss/2.jpeg",
        'hp': 100,
        "max_hp": 100,
        "mana": 10,
        'attack': 7,
        'defense': 3,
        'crit_chance': 0.1,
        'crit_damage': 1.5,
    },
    "–ö–æ—Ä–æ–ª–µ–≤–∞ –ø–∞—É—Ç–∏–Ω—ã": {
        "photo": "Photo/KingDang/Spuck/Boss/3.jpg",
        'hp': 500,
        "max_hp": 500,
        "mana": 200,
        'attack': 25,
        'defense': 10,
        'crit_chance': 0.25,
        'crit_damage': 1.5,
    },
    "–ö–∞–ø–∏—Ç–∞–Ω –ú–æ—Ä—Ä–æ–∫": {
        "photo": "Photo/KingDang/Spuck/Boss/4.jpg",
        'hp': 700,
        "max_hp": 700,
        "mana": 10,
        'attack': 45,
        'defense': 18,
        'crit_chance': 0.17,
        'crit_damage': 2.5,
    },
}
text_spusk_dang = {
    "–ü—ã—Ç–∞–µ–º—Å—è –æ–±–≤–æ—Ä–æ–≤–∞—Ç—å —Å–ø—è—â–∏—Ö –≥–æ–±–ª–∏–Ω–æ–≤",
    "–°—Ä–∞–∂–∞–µ–º—Å—è —Å –æ—Ä–¥–æ–π –∫—Ä—ã—Å-–º—É—Ç–∞–Ω—Ç–æ–≤",
    "–†–∞–∑—Ä—É—à–∞–µ–º —è–¥—Ä–æ –¥—Ä–µ–≤–Ω–µ–≥–æ –≥–æ–ª–µ–º–∞",
    "–£–≤–æ—Ä–∞—á–∏–≤–∞–µ–º—Å—è –æ—Ç –ø–∞–¥–∞—é—â–∏—Ö —Å—Ç–∞–ª–∞–∫—Ç–∏—Ç–æ–≤",
    "–ü–µ—Ä–µ–≤–æ–¥–∏–º —Å—Ç—Ä–µ–ª–∫–∏ –Ω–∞ –º–µ—Ö–∞–Ω–∏—á–µ—Å–∫–∏—Ö —á–∞—Å–∞—Ö –ª–æ–≤—É—à–∫–∏",
    "–ü–æ–¥–∫—É–ø–∞–µ–º —Ç—Ä–æ–ª–ª—è-–æ—Ö—Ä–∞–Ω–Ω–∏–∫–∞ —Ç—É—Ö–ª—ã–º–∏ —è–π—Ü–∞–º–∏",
    "–†–∞–∑–≥–∞–¥—ã–≤–∞–µ–º —Ä–µ–±—É—Å –Ω–∞ –¥—Ä–µ–≤–Ω–µ–º –æ–±–µ–ª–∏—Å–∫–µ",
    "–£–±–µ–≥–∞–µ–º –æ—Ç –ø—Ä–æ–±—É–¥–∏–≤—à–µ–≥–æ—Å—è —Å–ª–∏–∑–Ω–µ–∫–æ—Ä–æ–ª—è",
    "–¢–æ—Ä–≥—É–µ–º—Å—è —Å –ø—Ä–∏–∑—Ä–∞–∫–æ–º –∞–ª—Ö–∏–º–∏–∫–∞ –∑–∞ –ø—Ä–æ–ø—É—Å–∫",
    "–£—Å–ø–æ–∫–∞–∏–≤–∞–µ–º —Ä–∞–∑–≥–Ω–µ–≤–∞–Ω–Ω–æ–≥–æ –¥—É—Ö–∞ —Ñ–æ–Ω—Ç–∞–Ω–∞",
    "–ü—Ä–æ—Ö–æ–¥–∏–º —Å–∫–≤–æ–∑—å –∏–ª–ª—é–∑–æ—Ä–Ω—É—é —Å—Ç–µ–Ω—É",
    "–û—Ç–≤–ª–µ–∫–∞–µ–º —Å—Ç–∞—é –ª–µ—Ç—É—á–∏—Ö –º—ã—à–µ–π-–≤–∞–º–ø–∏—Ä–æ–≤",
    "–ß–∏–Ω–∏–º —Å–ª–æ–º–∞–Ω–Ω—ã–π –ª–∏—Ñ—Ç –≥–Ω–æ–º–æ–≤",
    "–ü–µ—Ä–µ–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä—É–µ–º –º–∞–≥–∏—á–µ—Å–∫–∏–π –∑–∞–º–æ–∫ —Ä—É–Ω–∞–º–∏",
    "–ü–æ–±–µ–∂–¥–∞–µ–º –≤ –∫–æ—Å—Ç—è–Ω—ã—Ö –∫–æ—Å—Ç—è—Ö —É —Å–∫–µ–ª–µ—Ç–∞-–±–∞–Ω–∫–∏—Ä–∞",
    "–£–±–µ–∂–¥–∞–µ–º –º–∏–º–∏–∫–∞, —á—Ç–æ –º—ã ‚Äî —á–∞—Å—Ç—å –º–µ–±–µ–ª–∏",
    "–ü—Ä–æ—Ö–æ–¥–∏–º –ª–∞–±–∏—Ä–∏–Ω—Ç –∑–µ—Ä–∫–∞–ª—å–Ω—ã—Ö –∏–ª–ª—é–∑–∏–π",
    "–ö–æ—Ä–º–∏–º —Ç—Ä–µ—Ö–≥–æ–ª–æ–≤–æ–≥–æ –ø—Å–∞ –¶–µ—Ä–±–µ—Ä–∞ –∫–æ—Å—Ç—è–º–∏",
    "–ò–≥—Ä–∞–µ–º –≤ —à–∞—Ö–º–∞—Ç—ã —Å –æ–∂–∏–≤—à–∏–º–∏ —Ñ–∏–≥—É—Ä–∞–º–∏",
    "–û—Ç–≤–µ—á–∞–µ–º –Ω–∞ –∫–∞–≤–µ—Ä–∑–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã —Å—Ñ–∏–Ω–∫—Å–∞",
    "–ü–µ—Ä–µ–±–∏—Ä–∞–µ–º—Å—è —á–µ—Ä–µ–∑ –ø—Ä–æ–ø–∞—Å—Ç—å –Ω–∞ –ø–∞—É—Ç–∏–Ω–µ",
    "–£–Ω–∏—á—Ç–æ–∂–∞–µ–º –ø—Ä–æ–∫–ª—è—Ç—ã–µ –≤–∞–∑—ã —Å –ø—Ä–∏–∑—Ä–∞–∫–∞–º–∏",
    "–†–∞–∑–º–∏–Ω–∏—Ä—É–µ–º –≤–æ–ª—à–µ–±–Ω—ã–µ —Ä—É–Ω–∏—á–µ—Å–∫–∏–µ –ª–æ–≤—É—à–∫–∏",
    "–£–±–µ–≥–∞–µ–º –æ—Ç –∫–∞—Ç—è—â–µ–≥–æ—Å—è –≤–∞–ª—É–Ω–∞ (–∫–ª–∞—Å—Å–∏–∫–∞!)",
    "–ü—Ä–æ—Ö–æ–¥–∏–º —Å–∫–≤–æ–∑—å –∑–∞–ª –ø–æ—é—â–∏—Ö —Å—Ç–∞—Ç—É–π",
    "–£—Å–ø–æ–∫–∞–∏–≤–∞–µ–º —Ä–∞–∑—ä—è—Ä–µ–Ω–Ω–æ–≥–æ –∫–∞–º–µ–Ω–Ω–æ–≥–æ –≥–æ–ª–µ–º–∞",
    "–û–±–º–∞–Ω—ã–≤–∞–µ–º –¥–µ—Ç–µ–∫—Ç–æ—Ä –ª–∂–∏ —É –¥–≤–µ—Ä–∏",
    "–ù–∞—Ö–æ–¥–∏–º —Å–µ–∫—Ä–µ—Ç–Ω—ã–π —Ä—ã—á–∞–≥ –∑–∞ –∫–∞—Ä—Ç–∏–Ω–æ–π",
    "–û—Ç–≥–∞–¥—ã–≤–∞–µ–º –ø–∞—Ä–æ–ª—å —É –¥–≤–µ—Ä–∏ —Å –ª–∏—Ü–æ–º",
    "–ü—Ä–æ—Ö–æ–¥–∏–º —Å–∫–≤–æ–∑—å –∫–æ–º–Ω–∞—Ç—É –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã—Ö –¥–≤–µ—Ä–µ–π",
    "–£–±–µ–∂–¥–∞–µ–º –¥—Ä–∞–∫–æ–Ω–∞, —á—Ç–æ –º—ã ‚Äî –µ–≥–æ –¥–µ—Ç–∫–∏",
    "–ü–µ—Ä–µ–æ–¥–µ–≤–∞–µ–º—Å—è –≤ –≥–∞—Ä–¥–µ—Ä–æ–±–µ –ø—Ä–∏–∑—Ä–∞—á–Ω–æ–≥–æ –±–∞—Ä–æ–Ω–∞",
    "–ü—Ä–æ—Ö–æ–¥–∏–º –∏—Å–ø—ã—Ç–∞–Ω–∏–µ —Å–µ–º–∏ —Å–º–µ—Ä—Ç–µ–ª—å–Ω—ã—Ö –∑–∞–ø–∞—Ö–æ–≤",
    "–ü–æ–±–µ–∂–¥–∞–µ–º –≤ —Ç–∞–Ω—Ü–µ–≤–∞–ª—å–Ω–æ–π –±–∏—Ç–≤–µ —Å —Ç–µ–Ω—è–º–∏",
    "–ù–∞—Ö–æ–¥–∏–º –≤—ã—Ö–æ–¥ –∏–∑ –∫–æ–º–Ω–∞—Ç—ã –≠—à–µ—Ä–∞",
    "–£–≤–æ—Ä–∞—á–∏–≤–∞–µ–º—Å—è –æ—Ç —Å—Ç—Ä–µ–ª –∞–≤—Ç–æ–∞—Ä–±–∞–ª–µ—Ç–æ–≤",
    "–†–µ—à–∞–µ–º –≥–æ–ª–æ–≤–æ–ª–æ–º–∫—É —Å –ø–µ—Ä–µ–º–µ—â–∞—é—â–∏–º–∏—Å—è –ø–ª–∏—Ç–∞–º–∏",
    "–ü–µ—Ä–µ—Ö–∏—Ç—Ä—è–µ–º —Å–∏—Å—Ç–µ–º—É –æ—Ö—Ä–∞–Ω—ã –¥—Ä–µ–≤–Ω–∏—Ö –º–∞–≥–æ–≤",
    "–ü—Ä–æ—Ö–æ–¥–∏–º —Å–∫–≤–æ–∑—å –∑–∞–ª –≤–µ—á–Ω–æ —Å–º–µ—é—â–∏—Ö—Å—è –º–∞—Å–æ–∫",
    "–ù–∞—Ö–æ–¥–∏–º —Å–ø—Ä—è—Ç–∞–Ω–Ω—ã–π –∫–ª—é—á –≤ –∂–µ–ª—É–¥–∫–µ —á—É—á–µ–ª–∞",
    "–£–∫–ª–æ–Ω—è–µ–º—Å—è –æ—Ç —è–¥–æ–≤–∏—Ç—ã—Ö —à–∏–ø–æ–≤ –≤ –ø–æ–ª—É",
    "–£—Å–º–∏—Ä—è–µ–º —Ä–∞–∑–±—É—à–µ–≤–∞–≤—à–∏–π—Å—è –º–∞–≥–∏—á–µ—Å–∫–∏–π —à—Ç–æ—Ä–º",
    "–í–∑–ª–∞–º—ã–≤–∞–µ–º –ø–µ—á–∞—Ç—å –¥–µ–º–æ–Ω–∏—á–µ—Å–∫–∏—Ö –≤—Ä–∞—Ç",
    "–£–±–µ–≥–∞–µ–º –æ—Ç –Ω–∞—à–µ—Å—Ç–≤–∏—è –≥–∏–≥–∞–Ω—Ç—Å–∫–∏—Ö –∂—É–∫–æ–≤",
    "–ü–µ—Ä–µ–º–∞–Ω–∏–≤–∞–µ–º —Å—Ç—Ä–∞–∂–Ω–∏–∫–æ–≤ —Ñ–∞–ª—å—à–∏–≤—ã–º –∫–ª—é—á–æ–º",
    "–ü—Ä—è—á–µ–º—Å—è –æ—Ç –≤—Å–µ–≤–∏–¥—è—â–µ–≥–æ –æ–∫–∞ –∞—Ä—Ö–æ–Ω—Ç–∞",
    "–†–∞–∑—Ä—É—à–∞–µ–º –∞–ª—Ç–∞—Ä—å —Ç–µ–º–Ω–æ–≥–æ –∫—É–ª—å—Ç–∞",
    "–ü–µ—Ä–µ–ø–∏—Å—ã–≤–∞–µ–º —Å—É–¥—å–±—É –≤ –∫–Ω–∏–≥–µ —Ö—Ä–æ–Ω–∏–∫",
    "–û–±—â–∞–µ–º—Å—è —Å –¥—Ä–µ–≤–Ω–∏–º –¥—É—Ö–æ–º –º–µ—á–∞ –Ω–∞ –∑–∞–±—ã—Ç–æ–º —è–∑—ã–∫–µ",
    "–ü—Ä–æ—Ö–æ–¥–∏–º —Å–∫–≤–æ–∑—å –∫–æ—Ä–∏–¥–æ—Ä –≤–µ—á–Ω–æ–π —Ç—å–º—ã",
    "–£—Å–ø–æ–∫–∞–∏–≤–∞–µ–º –ø—Ä–∏–∑—Ä–∞—á–Ω–æ–≥–æ –ø—Å–∞-–æ—Ö—Ä–∞–Ω–Ω–∏–∫–∞",
    "–†–∞–∑–≥–∞–¥—ã–≤–∞–µ–º —Ç–∞–π–Ω—É —à–µ–ø—á—É—â–∏—Ö—Å—è —á–µ—Ä–µ–ø–æ–≤",
    "–£–±–µ–∂–¥–∞–µ–º –≥–∞—Ä–ø–∏–π, —á—Ç–æ –º—ã ‚Äî –∏—Ö –ø–ª–µ–Ω–Ω–∏–∫–∏",
    "–ù–∞—Ö–æ–¥–∏–º –≤—ã—Ö–æ–¥ –∏–∑ –∑–µ—Ä–∫–∞–ª—å–Ω–æ–≥–æ –ª–∞–±–∏—Ä–∏–Ω—Ç–∞",
    "–û—Ç–∫–ª—é—á–∞–µ–º –¥—Ä–µ–≤–Ω–∏–π –º–µ—Ö–∞–Ω–∏–∑–º —Å–∞–º–æ—É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏—è",
    "–ü—Ä–æ—Ö–æ–¥–∏–º —Å–∫–≤–æ–∑—å –æ–≥–Ω–µ–Ω–Ω—É—é –∑–∞–≤–µ—Å—É",
    "–£–º–∏—Ä–æ—Ç–≤–æ—Ä—è–µ–º –¥—Ä–µ–≤–Ω–µ–≥–æ –ª–µ—Å–Ω–æ–≥–æ –¥—É—Ö–∞",
    "–û–±–º–∞–Ω—ã–≤–∞–µ–º —Å–∏—Å—Ç–µ–º—É –º–∞–≥–∏—á–µ—Å–∫–∏—Ö –≤–µ—Å–æ–≤",
    "–ù–∞—Ö–æ–¥–∏–º —Å–ø—Ä—è—Ç–∞–Ω–Ω—ã–π –ø–æ—Ä—Ç–∞–ª –≤ —Å—Ç–µ–Ω–µ",
    "–£–±–µ–≥–∞–µ–º –æ—Ç –ø—Ä–æ–±—É–∂–¥–∞—é—â–µ–≥–æ—Å—è –∫–∞–º–µ–Ω–Ω–æ–≥–æ –∫–æ–ª–æ—Å—Å–∞",
    "–†–∞–∑–≥–∞–¥—ã–≤–∞–µ–º —à–∏—Ñ—Ä –Ω–∞ –ø–æ—Ç–æ–ª–∫–µ –≥—Ä–æ–±–Ω–∏—Ü—ã",
    "–£–∫–ª–æ–Ω—è–µ–º—Å—è –æ—Ç –∞—Ç–∞–∫ –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–æ—Å–ø–µ—Ö–æ–≤",
    "–ü–µ—Ä–µ—Ö–∏—Ç—Ä—è–µ–º –ª–æ–≤—É—à–∫—É —Å –ø–∞–¥–∞—é—â–∏–º –ø–æ—Ç–æ–ª–∫–æ–º",
    "–ü—Ä–æ—Ö–æ–¥–∏–º —Å–∫–≤–æ–∑—å –∑–∞–ª –≤–µ—á–Ω–æ–≥–æ –¥–æ–∂–¥—è",
    "–ù–∞—Ö–æ–¥–∏–º —Ç–∞–π–Ω—ã–π —Ö–æ–¥ –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫–µ —Ç–µ–Ω–µ–π",
    "–£—Å–ø–æ–∫–∞–∏–≤–∞–µ–º —Ä–∞–∑–≥–Ω–µ–≤–∞–Ω–Ω–æ–≥–æ –¥—É—Ö–∞ —Ä–µ–∫–∏",
    "–ü–æ–±–µ–∂–¥–∞–µ–º –≤ –ø–æ–µ–¥–∏–Ω–∫–µ —Å —Ç–µ–Ω–µ–≤—ã–º –¥–≤–æ–π–Ω–∏–∫–æ–º",
    "–†–∞–∑–≥–∞–¥—ã–≤–∞–µ–º –∑–∞–≥–∞–¥–∫—É –ø–ª–∞—á—É—â–µ–π —Å—Ç–∞—Ç—É–∏",
    "–ü—Ä–æ—Ö–æ–¥–∏–º —Å–∫–≤–æ–∑—å –∫–æ—Ä–∏–¥–æ—Ä –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã—Ö –∑–µ—Ä–∫–∞–ª",
    "–£–±–µ–∂–¥–∞–µ–º –ø—Ä–∏–∑—Ä–∞—á–Ω–æ–≥–æ —Ä—ã—Ü–∞—Ä—è, —á—Ç–æ –º—ã ‚Äî –µ–≥–æ —Å–æ—é–∑–Ω–∏–∫–∏",
    "–ù–∞—Ö–æ–¥–∏–º —Å–ø—Ä—è—Ç–∞–Ω–Ω—ã–π —Ä—ã—á–∞–≥ –≤ –ø–∞—Å—Ç–∏ –∫–∞–º–µ–Ω–Ω–æ–≥–æ –¥—Ä–∞–∫–æ–Ω–∞",
    "–û—Ç–∫–ª—é—á–∞–µ–º –º–∞–≥–∏—á–µ—Å–∫–∏–µ –±–∞—Ä—å–µ—Ä—ã —Å –ø–æ–º–æ—â—å—é –¥—Ä–µ–≤–Ω–µ–≥–æ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞",
    "–ü—Ä–æ—Ö–æ–¥–∏–º —Å–∫–≤–æ–∑—å –∑–∞–ª –∑–∞—Å—Ç—ã–≤—à–∏—Ö –≤–æ –≤—Ä–µ–º–µ–Ω–∏",
    "–£–±–µ–≥–∞–µ–º –æ—Ç –Ω–∞—à–µ—Å—Ç–≤–∏—è –æ–∂–∏–≤—à–∏—Ö —Ç–µ–Ω–µ–π",
    "–†–∞–∑–≥–∞–¥—ã–≤–∞–µ–º —Ç–∞–π–Ω—É –º–µ—Ä—Ü–∞—é—â–∏—Ö —Ä—É–Ω",
    "–£—Å–ø–æ–∫–∞–∏–≤–∞–µ–º –¥—É—Ö –ø–æ–≥–∏–±—à–µ–≥–æ –º–∞–≥–∞, –æ—Ö—Ä–∞–Ω—è—é—â–µ–≥–æ —Å–æ–∫—Ä–æ–≤–∏—â–µ"
}
spusk_photo_dang = {
    "–°–ø—É—Å–∫ 0-15": {
        "–°–ø—É—Å–∫1": "Photo/KingDang/Spuck/0-15/Spuck1.jpg",
        "–°–ø—É—Å–∫2": "Photo/KingDang/Spuck/0-15/Spuck2.jpg",
        "–°–ø—É—Å–∫3": "Photo/KingDang/Spuck/0-15/Spuck3.jpg",
        "–°–ø—É—Å–∫4": "Photo/KingDang/Spuck/0-15/Spuck4.jpeg",
        "–°–ø—É—Å–∫5": "Photo/KingDang/Spuck/0-15/Spuck5.jpg",
        "–°–ø—É—Å–∫6": "Photo/KingDang/Spuck/0-15/Spuck6.jpg",
    },
    "–°–ø—É—Å–∫ 16-30": {
        "–°–ø—É—Å–∫1": "Photo/KingDang/Spuck/16-30/Spuck1.jpg",
        "–°–ø—É—Å–∫2": "Photo/KingDang/Spuck/16-30/Spuck2.jpg",
        "–°–ø—É—Å–∫3": "Photo/KingDang/Spuck/16-30/Spuck3.jpeg",
        "–°–ø—É—Å–∫4": "Photo/KingDang/Spuck/16-30/Spuck4.jpg",
        "–°–ø—É—Å–∫5": "Photo/KingDang/Spuck/16-30/Spuck5.jpg",
        "–°–ø—É—Å–∫6": "Photo/KingDang/Spuck/16-30/Spuck6.jpg",
        "–°–ø—É—Å–∫7": "Photo/KingDang/Spuck/16-30/Spuck7.jpg",
        "–°–ø—É—Å–∫8": "Photo/KingDang/Spuck/16-30/Spuck8.jpg",

    },
    "–°–ø—É—Å–∫ 31-45": {
        "–°–ø—É—Å–∫1": "Photo/KingDang/Spuck/31-45/Spuck1.jpg",
        "–°–ø—É—Å–∫2": "Photo/KingDang/Spuck/31-45/Spuck2.jpg",
        "–°–ø—É—Å–∫3": "Photo/KingDang/Spuck/31-45/Spuck3.jpg",
        "–°–ø—É—Å–∫4": "Photo/KingDang/Spuck/31-45/Spuck4.jpg",
        "–°–ø—É—Å–∫5": "Photo/KingDang/Spuck/31-45/Spuck5.jpg",
        "–°–ø—É—Å–∫6": "Photo/KingDang/Spuck/31-45/Spuck6.jpg",
        "–°–ø—É—Å–∫7": "Photo/KingDang/Spuck/31-45/Spuck7.jpg",
        "–°–ø—É—Å–∫8": "Photo/KingDang/Spuck/31-45/Spuck8.jpg",

    },
}
lvl_spusk_dang = {
    0: {"name": "–í—Ö–æ–¥", "power_required": 0},
    -1: {"name": "1-–π –ø–æ–¥–∑–µ–º–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å", "power_required": 0.5},
    -2: {"name": "2-–π –ø–æ–¥–∑–µ–º–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å", "power_required": 1},
    -3: {"name": "3-–π –ø–æ–¥–∑–µ–º–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å", "power_required": 1.5},
    -4: {"name": "4-–π –ø–æ–¥–∑–µ–º–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å", "power_required": 2},
    -5: {"name": "5-–π –ø–æ–¥–∑–µ–º–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å", "power_required": 3},
    -6: {"name": "6-–π –ø–æ–¥–∑–µ–º–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å", "power_required": 4},
    -7: {"name": "7-–π –ø–æ–¥–∑–µ–º–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å", "power_required": 8},
    -8: {"name": "8-–π –ø–æ–¥–∑–µ–º–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å", "power_required": 10},
    -9: {"name": "9-–π –ø–æ–¥–∑–µ–º–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å", "power_required": 12},
    -10: {"name": "10-–π –ø–æ–¥–∑–µ–º–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å", "power_required": 14},
    -11: {"name": "11-–π –ø–æ–¥–∑–µ–º–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å", "power_required": 18},
    -12: {"name": "12-–π –ø–æ–¥–∑–µ–º–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å", "power_required": 22},
    -13: {"name": "13-–π –ø–æ–¥–∑–µ–º–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å", "power_required": 28},
    -14: {"name": "14-–π –ø–æ–¥–∑–µ–º–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å", "power_required": 35},
    -15: {"name": "15-–π –ø–æ–¥–∑–µ–º–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å", "power_required": 40},
    -16: {"name": "16-–π –ø–æ–¥–∑–µ–º–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å", "power_required": 50},
    -17: {"name": "17-–π –ø–æ–¥–∑–µ–º–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å", "power_required": 65},
    -18: {"name": "18-–π –ø–æ–¥–∑–µ–º–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å", "power_required": 80},
    -19: {"name": "19-–π –ø–æ–¥–∑–µ–º–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å", "power_required": 100},
    -20: {"name": "20-–π –ø–æ–¥–∑–µ–º–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å", "power_required": 120},
    -21: {"name": "21-–π –ø–æ–¥–∑–µ–º–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å", "power_required": 125},
    -22: {"name": "22-–π –ø–æ–¥–∑–µ–º–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å", "power_required": 135},
    -23: {"name": "23-–π –ø–æ–¥–∑–µ–º–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å", "power_required": 170},
    -24: {"name": "24-–π –ø–æ–¥–∑–µ–º–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å", "power_required": 220},
    -25: {"name": "25-–π –ø–æ–¥–∑–µ–º–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å", "power_required": 270},
    -26: {"name": "26-–π –ø–æ–¥–∑–µ–º–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å", "power_required": 330},
    -27: {"name": "27-–π –ø–æ–¥–∑–µ–º–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å", "power_required": 390},
    -28: {"name": "28-–π –ø–æ–¥–∑–µ–º–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å", "power_required": 400},
    -29: {"name": "29-–π –ø–æ–¥–∑–µ–º–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å", "power_required": 450},
    -30: {"name": "30-–π –ø–æ–¥–∑–µ–º–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å", "power_required": 550},
    -31: {"name": "31-–π –ø–æ–¥–∑–µ–º–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å", "power_required": 650},
    -32: {"name": "32-–π –ø–æ–¥–∑–µ–º–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å", "power_required": 750},
    -33: {"name": "33-–π –ø–æ–¥–∑–µ–º–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å", "power_required": 850},
    -34: {"name": "34-–π –ø–æ–¥–∑–µ–º–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å", "power_required": 950},
    -35: {"name": "35-–π –ø–æ–¥–∑–µ–º–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å", "power_required": 999},
    -36: {"name": "36-–π –ø–æ–¥–∑–µ–º–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å", "power_required": 1000},
    -37: {"name": "37-–π –ø–æ–¥–∑–µ–º–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å", "power_required": 1200},
    -38: {"name": "38-–π –ø–æ–¥–∑–µ–º–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å", "power_required": 1400},
    -39: {"name": "39-–π –ø–æ–¥–∑–µ–º–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å", "power_required": 1600},
    -40: {"name": "40-–π –ø–æ–¥–∑–µ–º–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å", "power_required": 1800},
    -41: {"name": "41-–π –ø–æ–¥–∑–µ–º–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å", "power_required": 2000},
    -42: {"name": "28-–π –ø–æ–¥–∑–µ–º–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å", "power_required": 2500},
    -43: {"name": "43-–π –ø–æ–¥–∑–µ–º–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å", "power_required": None},

}
floor_names = {
    -1: "1-–º –ø–æ–¥–∑–µ–º–Ω–æ–º —É—Ä–æ–≤–Ω–µ",
    -2: "2-–º –ø–æ–¥–∑–µ–º–Ω–æ–º —É—Ä–æ–≤–Ω–µ",
    -3: "3-–º –ø–æ–¥–∑–µ–º–Ω–æ–º —É—Ä–æ–≤–Ω–µ",
    -4: "4-–º –ø–æ–¥–∑–µ–º–Ω–æ–º —É—Ä–æ–≤–Ω–µ",
    -5: "5-–º –ø–æ–¥–∑–µ–º–Ω–æ–º —É—Ä–æ–≤–Ω–µ",
    -6: "6-–º –ø–æ–¥–∑–µ–º–Ω–æ–º —É—Ä–æ–≤–Ω–µ",
    -7: "7-–º —ç—Ç–∞–∂–µ - –õ–æ–≥–æ–≤–µ –ë–æ—Å—Å–∞",
    -8: "8-–º –ø–æ–¥–∑–µ–º–Ω–æ–º —É—Ä–æ–≤–Ω–µ",
    -9: "9-–º –ø–æ–¥–∑–µ–º–Ω–æ–º —É—Ä–æ–≤–Ω–µ",
    -10: "10-–π –ø–æ–¥–∑–µ–º–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å",
    -11: "11-–π –ø–æ–¥–∑–µ–º–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å",
    -12: "12-–π –ø–æ–¥–∑–µ–º–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å",
    -13: "13-–π –ø–æ–¥–∑–µ–º–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å",
    -14: "14-–π —ç—Ç–∞–∂–µ - –õ–æ–≥–æ–≤–µ –ë–æ—Å—Å–∞",
    -15: "15-–π –ø–æ–¥–∑–µ–º–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å",
    -16: "16-–π –ø–æ–¥–∑–µ–º–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å",
    -17: "17-–π –ø–æ–¥–∑–µ–º–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å",
    -18: "18-–π –ø–æ–¥–∑–µ–º–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å",
    -19: "19-–π –ø–æ–¥–∑–µ–º–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å",
    -20: "20-–π –ø–æ–¥–∑–µ–º–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å",
    -21: "21-–π —ç—Ç–∞–∂–µ - –õ–æ–≥–æ–≤–µ –ë–æ—Å—Å–∞",
    -22: "22-–π –ø–æ–¥–∑–µ–º–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å",
    -23: "23-–π –ø–æ–¥–∑–µ–º–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å",
    -24: "24-–π –ø–æ–¥–∑–µ–º–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å",
    -25: "25-–π –ø–æ–¥–∑–µ–º–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å",
    -26: "26-–π –ø–æ–¥–∑–µ–º–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å",
    -27: "27-–π –ø–æ–¥–∑–µ–º–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å",
    -28: "28-–π —ç—Ç–∞–∂–µ - –õ–æ–≥–æ–≤–µ –ë–æ—Å—Å–∞",
    -29: "29-–π –ø–æ–¥–∑–µ–º–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å",
    -30: "30-–π –ø–æ–¥–∑–µ–º–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å",
    -31: "31-–π –ø–æ–¥–∑–µ–º–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å",
    -32: "32-–π –ø–æ–¥–∑–µ–º–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å",
    -33: "33-–π –ø–æ–¥–∑–µ–º–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å",
    -34: "34-–π –ø–æ–¥–∑–µ–º–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å",
    -35: "35-–π - —ç—Ç–∞–∂–µ - –õ–æ–≥–æ–≤–µ –ë–æ—Å—Å–∞",
    -36: "36-–π –ø–æ–¥–∑–µ–º–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å",
    -37: "37-–π –ø–æ–¥–∑–µ–º–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å",
    -38: "38-–π –ø–æ–¥–∑–µ–º–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å",
    -39: "39-–π –ø–æ–¥–∑–µ–º–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å",
    -40: "40-–π –ø–æ–¥–∑–µ–º–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å",
    -41: "41-–π –ø–æ–¥–∑–µ–º–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å",
    -42: "42-–π - —ç—Ç–∞–∂–µ - –õ–æ–≥–æ–≤–µ –ë–æ—Å—Å–∞",
    -43: "43-–π –ø–æ–¥–∑–µ–º–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å",

}
user_keys = {}  # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–ª—é—á–µ–π —É –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è


# =====================================–ë–∞—à–Ω—è –ù–µ–≤–µ–¥–æ–º–æ–≥–æ üóº=====================================#


# =======================================–î–æ–¥–∑—ë‚õ©Ô∏è=====================================#
@dp.message(F.text == "–î–æ–¥–∑—ë‚õ©Ô∏è")
async def dodze(message: types.Message):
    try:
        user_id = str(message.from_user.id)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —ç—Ç–∞–∂–∞
        current_floor = subscription_data["users"].get(user_id, {}).get("dungeon_floor", 0)
        if abs(current_floor) < 6:
            await message.answer("–ú–∞—Å—Ç–µ—Ä –µ—â–µ –Ω–µ –≥–æ—Ç–æ–≤ –ø—Ä–∏–Ω—è—Ç—å —Ç–µ–±—è –≤ –î–æ–¥–∑—ë‚õ©Ô∏è \n"
                                 "Ô∏è–î–æ—Å—Ç–∏–≥–Ω–∏ 6-–æ–≥–æ —ç—Ç–∞–∂–∞ –ë–∞—à–Ω–∏ –ù–µ–≤–µ–¥–æ–º–æ–≥–æüóº!")
            return

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if int(user_id) not in user_data:
            user_data[int(user_id)] = {
                'hero_stats': {
                    'hp': 30,
                    'hp_max': 30,
                    'mana': 20,
                    'mana_max': 20,
                    'attack': 7,
                    'defense': 1,
                    'strength': 1,
                    'agility': 1,
                    'intelligence': 1,
                    'crit_chance': 0.02,
                    'crit_damage': 1.1,
                }
            }

        await message.answer("–ì–æ—Ç–æ–≤–∏–º —Ç–µ–ª–æ –¥–ª—è –ø—Ä–æ–∫–∞—á–∫–∏....", reply_markup=types.ReplyKeyboardRemove())
        await asyncio.sleep(random.uniform(1.5, 2.5))

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ –¥–æ–¥–∑—ë
        try:
            photo_path = photo_dodze_dang["–î–æ–¥–∑—ë"]["–î–æ–¥–∑—ë"]
            with open(photo_path, 'rb') as photo:
                await message.answer_photo(
                    photo=types.BufferedInputFile(photo.read(), filename="dojo.jpg"),
                    caption="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –¥–æ–¥–∑—ë! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                        [
                            InlineKeyboardButton(text="–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞", callback_data="dojo_training"),
                            InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è", callback_data="exit_to_dang_menu")
                        ]
                    ])
                )
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ –¥–æ–¥–∑—ë: {e}")
            await message.answer(
                "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –¥–æ–¥–∑—ë! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [
                        InlineKeyboardButton(text="–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞", callback_data="dojo_training"),
                        InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è", callback_data="exit_to_dang_menu")
                    ]
                ])
            )

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ dodze: {e}", exc_info=True)
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ –¥–æ–¥–∑—ë. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
training_cooldowns = {}
photo_dodze_dang = {
    "–î–æ–¥–∑—ë": {
        "–î–æ–¥–∑—ë": "Photo/KingDang/Dojo/1.jpeg", }}
text_dojo_dang = {
    1: "–ò—Å–ø—ã—Ç—ã–≤–∞–µ–º –¥–µ—Ä–µ–≤—è–Ω–Ω—ã–π –º–µ—á –Ω–∞ –ø—Ä–æ—á–Ω–æ—Å—Ç—å",
    2: "–û—á–∏—â–∞–µ–º —Ä–∞–∑—É–º –ø–æ–¥ –ª–µ–¥—è–Ω—ã–º –≤–æ–¥–æ–ø–∞–¥–æ–º",
    3: "–û—Ç—Ç–∞—á–∏–≤–∞–µ–º —É–¥–∞—Ä—ã –Ω–∞ —Å–æ–ª–æ–º–µ–Ω–Ω—ã—Ö –º–∞–Ω–µ–∫–µ–Ω–∞—Ö",
    4: "–£–∫—Ä–µ–ø–ª—è–µ–º –¥—É—Ö —á–µ—Ä–µ–∑ —Å—Ç–æ–π–∫—É –Ω–∞ –æ–¥–Ω–æ–π —Ä—É–∫–µ",
    5: "–ó–∞–∫–∞–ª—è–µ–º —Ç–µ–ª–æ, —Ä–∞–∑–±–∏–≤–∞—è –∫–∞–º–Ω–∏ –ª–∞–¥–æ–Ω—å—é",
    6: "–°–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤—É–µ–º —Ç–µ—Ö–Ω–∏–∫—É –≤–ª–∞–¥–µ–Ω–∏—è –∫–∞—Ç–∞–Ω–æ–π",
    7: "–ü–æ—Å—Ç–∏–≥–∞–µ–º –¥—Ä–µ–≤–Ω–∏–µ –±–æ–µ–≤—ã–µ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è",
    8: "–†–∞–∑–≤–∏–≤–∞–µ–º —Å–∏–ª—É, –ø–æ–¥–Ω–∏–º–∞—è –≤–∞–ª—É–Ω—ã",
    9: "–ú–µ–¥–∏—Ç–∏—Ä—É–µ–º –≤ –ø–æ–∑–µ –∂–µ–ª–µ–∑–Ω–æ–≥–æ –¥—Ä–∞–∫–æ–Ω–∞",
    10: "–¢—Ä–µ–Ω–∏—Ä—É–µ–º –±–∞–ª–∞–Ω—Å –Ω–∞ –æ—Å—Ç—Ä—ã—Ö –±–∞–º–±—É–∫–æ–≤—ã—Ö —à–µ—Å—Ç–∞—Ö",
    11: "–£—á–∏–º—Å—è —á–∏—Ç–∞—Ç—å –¥–≤–∏–∂–µ–Ω–∏—è –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞ –ø–æ —Ç–µ–Ω–∏",
    12: "–†–∞–∑–±–∏–≤–∞–µ–º –ª–µ—Ç—è—â–∏–µ —Å—Ç—Ä–µ–ª—ã –≥–æ–ª—ã–º–∏ —Ä—É–∫–∞–º–∏",
    13: "–ü—Ä–∞–∫—Ç–∏–∫—É–µ–º ¬´—É–¥–∞—Ä –ø—è—Ç–∏ —Å—Ç–∏—Ö–∏–π¬ª –Ω–∞ –º–∞–∫–∏–≤–∞—Ä–µ",
    14: "–ü–æ—Å—Ç–∏–≥–∞–µ–º –∏—Å–∫—É—Å—Å—Ç–≤–æ –±–µ—Å—à—É–º–Ω–æ–≥–æ —à–∞–≥–∞",
    15: "–ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∏—Ä—É–µ–º —ç–Ω–µ—Ä–≥–∏—é –≤ —Ç–æ—á–∫–µ –¥–∞–Ω—å—Ç—è–Ω—å",
    16: "–ü–∞—Ä–∫—É–µ–º—Å—è –º–µ–∂–¥—É –æ—Å—Ç—Ä—ã—Ö –∫–æ–ø–∏–π —Å –∑–∞–≤—è–∑–∞–Ω–Ω—ã–º–∏ –≥–ª–∞–∑–∞–º–∏",
    17: "–†–∞–∑–≥–∞–¥—ã–≤–∞–µ–º —Ç–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Å—Ö–µ–º—ã –Ω–∞ –ø–µ—Å–æ—á–Ω–æ–π –¥–æ—Å–∫–µ",
    18: "–¢—Ä–µ–Ω–∏—Ä—É–µ–º —Ö–≤–∞—Ç–∫—É, —Å–∂–∏–º–∞—è —Ä–∞—Å–∫–∞–ª—ë–Ω–Ω—ã–π —É–≥–æ–ª—å",
    19: "–ü—Ä—ã–≥–∞–µ–º —á–µ—Ä–µ–∑ –∫–æ—Å—Ç—Ä—ã –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è –ª–æ–≤–∫–æ—Å—Ç–∏",
    20: "–£—á–∏–º—Å—è –ø–∞—Ä–∏—Ä–æ–≤–∞—Ç—å —É–¥–∞—Ä—ã —Å –ø–æ–º–æ—â—å—é –≤–µ–µ—Ä–∞",
    21: "–ü–æ–≥—Ä—É–∂–∞–µ–º—Å—è –≤ —Ç—Ä–∞–Ω—Å –ø–æ–¥ –±–æ–π –±–∞—Ä–∞–±–∞–Ω–æ–≤",
    22: "–†–∞–∑–≤–∏–≤–∞–µ–º –ø–µ—Ä–∏—Ñ–µ—Ä–∏–π–Ω–æ–µ –∑—Ä–µ–Ω–∏–µ —Å –≥–æ—Ä—è—â–∏–º–∏ —Å–≤–µ—á–∞–º–∏",
    23: "–ü—Ä–∞–∫—Ç–∏–∫—É–µ–º ¬´—Ç–∞–Ω—Ü—É—é—â–∏–π –∫–ª–∏–Ω–æ–∫¬ª –≤ –ø–æ–ª–Ω–æ–π —Ç—å–º–µ",
    24: "–ü–æ—Å—Ç–∏–≥–∞–µ–º —Ñ–∏–ª–æ—Å–æ—Ñ–∏—é ¬´–º–µ—á–∞ –∏ —Ü–≤–µ—Ç–∫–∞¬ª",
    25: "–¢—Ä–µ–Ω–∏—Ä—É–µ–º –≤—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å –≤ –±–µ–≥–µ –ø–æ –∫—Ä—É–≥—É —Å –≥—Ä—É–∑–æ–º",
    26: "–†–∞–∑–º–∏–Ω–∞–µ–º —Å—É—Å—Ç–∞–≤—ã —Å –ø–æ–º–æ—â—å—é –∫–∞–º–µ–Ω–Ω—ã—Ö —à–∞—Ä–æ–≤",
    27: "–£—á–∏–º—Å—è –ø–∞–¥–∞—Ç—å –Ω–∞ –æ—Å—Ç—Ä—ã–µ –∫–∞–º–Ω–∏ –±–µ–∑ –≤—Ä–µ–¥–∞",
    28: "–ö–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ–º –¥—ã—Ö–∞–Ω–∏–µ –≤ –¥—ã–º—É –±–ª–∞–≥–æ–≤–æ–Ω–∏–π",
    29: "–†–∞–∑–≤–∏–≤–∞–µ–º —Ö–ª—ë—Å—Ç–∫–æ—Å—Ç—å —É–¥–∞—Ä–∞ —á–µ—Ä–µ–∑ —Ä–∞–∑—Ä–µ–∑–∞–Ω–∏–µ –≤–æ–¥—ã",
    30: "–ü—Ä–∞–∫—Ç–∏–∫—É–µ–º ¬´–∫—É–ª–∞–∫ —Ç–∏–≥—Ä–∞¬ª –Ω–∞ –¥—É–±–æ–≤—ã—Ö —â–∏—Ç–∞—Ö",
    31: "–°–æ–∑–µ—Ä—Ü–∞–µ–º –∏–µ—Ä–æ–≥–ª–∏—Ñ—ã –Ω–∞ –¥—Ä–µ–≤–Ω–∏—Ö —Å–≤–∏—Ç–∫–∞—Ö",
    32: "–¢—Ä–µ–Ω–∏—Ä—É–µ–º —Ä–µ–∞–∫—Ü–∏—é, —É–≤–æ—Ä–∞—á–∏–≤–∞—è—Å—å –æ—Ç –ø–µ—Å–∫–∞",
    33: "–ü–æ—Å—Ç–∏–≥–∞–µ–º ¬´–ø—É—Å—Ç–æ—Ç—É¬ª –≤ –∑–µ—Ä–∫–∞–ª—å–Ω–æ–º –∑–∞–ª–µ",
    34: "–†–∞–∑–≤–∏–≤–∞–µ–º —Å–∏–ª—É –∫—Ä–∏–∫–∞, —Ä–∞–∑–±–∏–≤–∞—è —Å—Ç–µ–∫–ª—è–Ω–Ω—ã–µ —à–∞—Ä—ã",
    35: "–£—á–∏–º—Å—è —Ñ–µ—Ö—Ç–æ–≤–∞—Ç—å –¥–≤—É–º—è –º–µ—á–∞–º–∏ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ",
    36: "–ü—Ä–∞–∫—Ç–∏–∫—É–µ–º ¬´—É–¥–∞—Ä –≥—Ä–æ–º–∞¬ª –Ω–∞ –Ω–∞–∫–æ–≤–∞–ª—å–Ω–µ",
    37: "–ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∏—Ä—É–µ–º—Å—è –Ω–∞ –∑–≤—É–∫–µ –ø–∞–¥–∞—é—â–µ–π –∏–≥–ª—ã",
    38: "–†–∞–∑–≥–∞–¥—ã–≤–∞–µ–º –∫–æ–¥–µ–∫—Å –±—É—Å–∏–¥–æ –≤ —Å—Ç–∞—Ä—ã—Ö —Ç–µ–∫—Å—Ç–∞—Ö",
    39: "–¢—Ä–µ–Ω–∏—Ä—É–µ–º –ø–∞–ª—å—Ü—ã, –≤—Ç—ã–∫–∞—è –∏—Ö –≤ –∫–∏–ø—è—â–∏–π –ø–µ—Å–æ–∫",
    40: "–ü–æ—Å—Ç–∏–≥–∞–µ–º ¬´–ø—É—Ç—å –≤–µ—Ç—Ä–∞¬ª –≤ –ª–∞–±–∏—Ä–∏–Ω—Ç–µ –∏–∑ —Ç–∫–∞–Ω–µ–π",
    41: "–†–∞–∑–≤–∏–≤–∞–µ–º –∏–Ω—Ç—É–∏—Ü–∏—é –≤ –∏–≥—Ä–µ ¬´–∫–∞–º–µ–Ω—å-–Ω–æ–∂–Ω–∏—Ü—ã-–±—É–º–∞–≥–∞¬ª —Å —Å–∞–º–∏–º —Å–æ–±–æ–π",
    42: "–ü—Ä–∞–∫—Ç–∏–∫—É–µ–º ¬´–±–µ–∑–º–æ–ª–≤–Ω—É—é –º—É–¥—Ä–æ—Å—Ç—å¬ª —É –ø—Ä—É–¥–∞ —Å –∫–∞—Ä–ø–∞–º–∏",
    43: "–£—á–∏–º—Å—è —Å–ø–∞—Ç—å —Å—Ç–æ—è, –∫–∞–∫ –∂—É—Ä–∞–≤–ª—å",
    44: "–†–∞–∑–º–∏–Ω–∞–µ–º—Å—è —Å –º–µ—à–∫–∞–º–∏, –Ω–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–º–∏ –∑–º–µ—è–º–∏",
    45: "–ü–æ—Å—Ç–∏–≥–∞–µ–º ¬´–∏—Å–∫—Ä—É –¥—Ä–∞–∫–æ–Ω–∞¬ª —á–µ—Ä–µ–∑ —Ç—Ä–µ–Ω–∏–µ –∫–∞–º–Ω–µ–π",
    46: "–¢—Ä–µ–Ω–∏—Ä—É–µ–º –≤–µ—Å—Ç–∏–±—É–ª—è—Ä–Ω—ã–π –∞–ø–ø–∞—Ä–∞—Ç –Ω–∞ –≤—Ä–∞—â–∞—é—â–µ–º—Å—è –¥–∏—Å–∫–µ",
    47: "–†–∞–∑–≤–∏–≤–∞–µ–º ¬´–∂–µ–ª–µ–∑–Ω—É—é —Ä—É–±–∞—à–∫—É¬ª —á–µ—Ä–µ–∑ —É–¥–∞—Ä—ã –±–∞–º–±—É–∫–æ–º",
    48: "–ü—Ä–∞–∫—Ç–∏–∫—É–µ–º ¬´–≥–∏–±–∫–æ—Å—Ç—å —Ç—Ä–æ—Å—Ç–Ω–∏–∫–∞¬ª –ø–æ–¥ —Ç—è–∂–µ—Å—Ç—å—é —Ü–µ–ø–µ–π",
    49: "–£—á–∏–º—Å—è –≤–∏–¥–µ—Ç—å –≤ —Ç–µ–º–Ω–æ—Ç–µ, –∫–∞–∫ —Å–æ–≤–∞",
    50: "–ó–∞–≤–µ—Ä—à–∞–µ–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É —á–∞–µ–º –∏–∑ –≥–æ—Ä—å–∫–∏—Ö —Ç—Ä–∞–≤"
}


@dp.callback_query(F.data == "dojo_training")
async def training_menu(callback: types.CallbackQuery):
    try:
        user_id = callback.from_user.id
        user_id_str = str(user_id)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–π–º–µ—Ä–∞ –∏–∑ subscription_data
        cooldown_str = subscription_data["users"].get(user_id_str, {}).get("training_cooldown")
        if cooldown_str:
            cooldown = datetime.fromisoformat(cooldown_str)
            if datetime.now() < cooldown:
                remaining = cooldown - datetime.now()
                hours = remaining.seconds // 3600
                minutes = (remaining.seconds % 3600) // 60
                await callback.answer(
                    f"–í—ã –µ—â–µ –Ω–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–ª–∏—Å—å! –û—Ç–¥–æ—Ö–Ω–∏—Ç–µ –µ—â–µ {hours}—á {minutes}–º–∏–Ω",
                    show_alert=True
                )
                return

        # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üèÉ–õ–æ–≤–∫–æ—Å—Ç—å", callback_data="train_agility"),
             InlineKeyboardButton(text="üí™–°–∏–ª—É", callback_data="train_strength"),
             InlineKeyboardButton(text="üß†–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç", callback_data="train_intelligence")],
            [InlineKeyboardButton(text="üèÉ üí™ üß† (+1)", callback_data="train_all")],
            [InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è", callback_data="exit_to_dang_menu")]
        ])

        await callback.message.edit_caption(
            caption="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:",
            reply_markup=keyboard
        )

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ training_menu: {e}", exc_info=True)
        await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –º–µ–Ω—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏", show_alert=True)


async def update_power_in_subscription_data(user_id: int, stats: dict):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –±–æ–µ–≤—É—é –º–æ—â—å –≤ subscription_data.json"""
    try:
        user_id_str = str(user_id)
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏ –æ–∫—Ä—É–≥–ª—è–µ–º –º–æ—â—å –¥–æ 2 –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
        power = round(calculate_hero_power(stats), 2)

        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –¥–∞–Ω–Ω—ã—Ö, —Å–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å
        if user_id_str not in subscription_data["users"]:
            subscription_data["users"][user_id_str] = {}

        # –û–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –º–æ—â–Ω–æ—Å—Ç–∏ (—Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ —á–∏—Å–ª–æ —Å 2 –∑–Ω–∞–∫–∞–º–∏)
        subscription_data["users"][user_id_str]["power"] = power

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        with open(SUBSCRIPTION_DATA_FILE, 'w') as f:
            json.dump(subscription_data, f, indent=4, ensure_ascii=False)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –º–æ—â–Ω–æ—Å—Ç–∏: {e}")
        raise


@dp.callback_query(F.data.startswith("train_"))
async def handle_training(callback: types.CallbackQuery):
    try:
        user_id = callback.from_user.id
        user_id_str = str(user_id)
        training_type = callback.data.split("_")[1]

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ character_data.json, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        if user_id_str in character_data:
            if int(user_id) not in user_data:
                user_data[int(user_id)] = {}
            # –û–±–Ω–æ–≤–ª—è–µ–º hero_stats –∏–∑ character_data
            user_data[int(user_id)]['hero_stats'] = character_data[user_id_str].get('hero_stats', {
                'hp': 30,
                'hp_max': 30,
                'mana': 20,
                'mana_max': 20,
                'attack': 7,
                'defense': 1,
                'strength': 1,
                'agility': 1,
                'intelligence': 1,
                'crit_chance': 0.02,
                'crit_damage': 1.1
            })

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –¥–∞–Ω–Ω—ã—Ö
        if user_id not in user_data or 'hero_stats' not in user_data[user_id]:
            await callback.answer("‚ö†Ô∏è –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!", show_alert=True)
            return

        # –ê–Ω–∏–º–∞—Ü–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
        random_text = random.choice(list(text_dojo_dang.values()))
        temp_text = ""
        for char in random_text:
            temp_text += char
            try:
                await callback.message.edit_caption(
                    caption=f"üåÄ {temp_text}...",
                    reply_markup=None
                )
            except:
                pass
            await asyncio.sleep(0.0)

        await asyncio.sleep(random.uniform(1.5, 2.5))

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
        stats = user_data[user_id]['hero_stats']
        cooldown_hours = 8  # –ë–∞–∑–æ–≤–æ–µ –≤—Ä–µ–º—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è

        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
        if training_type == "all":
            stats['strength'] += 1
            stats['agility'] += 1
            stats['intelligence'] += 1
            result_text = "–í—Å–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ +1!"
            cooldown_hours *= 3  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤—Ä–µ–º—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞ –∫–æ–º–ø–ª–µ–∫—Å–Ω—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É
        else:
            stat_name = {
                'strength': '–°–∏–ª–∞',
                'agility': '–õ–æ–≤–∫–æ—Å—Ç—å',
                'intelligence': '–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç'
            }[training_type]
            stats[training_type] += 1
            result_text = f"{stat_name} +1!"

        # –û–±–Ω–æ–≤–ª—è–µ–º character_data.json
        if user_id_str not in character_data:
            character_data[user_id_str] = {}

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞, –∞ –Ω–µ —Ç–æ–ª—å–∫–æ hero_stats
        character_data[user_id_str].update({
            'hero_stats': copy.deepcopy(stats),
            'last_played': datetime.now().isoformat()
        })

        with open(CHARACTER_DATA_FILE, 'w') as f:
            json.dump(character_data, f, indent=4)

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
        cooldown_end = datetime.now() + timedelta(hours=cooldown_hours)

        # –û–±–Ω–æ–≤–ª—è–µ–º subscription_data
        if user_id_str not in subscription_data["users"]:
            subscription_data["users"][user_id_str] = {}

        subscription_data["users"][user_id_str].update({
            "training_cooldown": cooldown_end.isoformat(),
            "last_updated": datetime.now().isoformat()
        })

        # –û–±–Ω–æ–≤–ª—è–µ–º –±–æ–µ–≤—É—é –º–æ—â—å
        await update_power_in_subscription_data(user_id, stats)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
        with open(SUBSCRIPTION_DATA_FILE, 'w') as f:
            json.dump(subscription_data, f, indent=4)

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        stats_text = (
            f"üèãÔ∏è –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n"
            f"{result_text}\n\n"
            f"–¢–µ–∫—É—â–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:\n"
            f"üí™ –°–∏–ª–∞: {stats['strength']}\n"
            f"üèÉ –õ–æ–≤–∫–æ—Å—Ç—å: {stats['agility']}\n"
            f"üß† –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç: {stats['intelligence']}\n\n"
            f"–°–ª–µ–¥—É—é—â–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ —á–µ—Ä–µ–∑ {cooldown_hours} —á–∞—Å–æ–≤\n\n"
            f"‚öî –ë–æ–µ–≤–∞—è –º–æ—â—å: {subscription_data['users'][user_id_str].get('power', 0):.2f}"
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è", callback_data="exit_to_dang_menu")]
        ])

        await callback.message.edit_caption(
            caption=stats_text,
            reply_markup=keyboard
        )

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ handle_training: {e}", exc_info=True)
        await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏", show_alert=True)


async def reset_cooldown(user_id, hours=8):
    await asyncio.sleep(hours * 3600)
    if user_id in training_cooldowns:
        del training_cooldowns[user_id]
        user_id_str = str(user_id)

        # –û–±–Ω–æ–≤–ª—è–µ–º subscription_data.json
        if user_id_str in subscription_data["users"] and "training_cooldown" in subscription_data["users"][user_id_str]:
            del subscription_data["users"][user_id_str]["training_cooldown"]

            with open(SUBSCRIPTION_DATA_FILE, 'w') as f:
                json.dump(subscription_data, f, indent=4)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–í—ã–π—Ç–∏"
@dp.callback_query(F.data == "exit_to_dang_menu")
async def exit_to_menu(callback: types.CallbackQuery):
    await callback.message.delete()  # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–æ–π
    await dang_menu(callback.message)  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é


# =======================================–î–æ–¥–∑—ë‚õ©Ô∏è=====================================#


# =======================================–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ üìäÔ∏è=====================================#
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
@dp.message(F.text == "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ üìä")
async def show_statistics(message: types.Message):
    print("–§—É–Ω–∫—Ü–∏—è show_statistics –≤—ã–∑–≤–∞–Ω–∞")  # –û—Ç–ª–∞–¥–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    user_id = str(message.from_user.id)  # –ö–ª—é—á–∏ –≤ JSON ‚Äî —Å—Ç—Ä–æ–∫–∏

    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–æ–≤ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –∫–æ–¥–∏—Ä–æ–≤–∫–∏
        with open(CHARACTER_DATA_FILE, "r", encoding="utf-8") as f:
            character_data = json.load(f)

        with open(SUBSCRIPTION_DATA_FILE, "r", encoding="utf-8") as f:
            subscription_data = json.load(f)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ
        if user_id not in character_data:
            await message.answer("–ü–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ —Å–Ω–∞—á–∞–ª–∞.")
            return

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_stats = character_data[user_id]['hero_stats']

        # –Ø–≤–Ω–æ –ø—Ä–∏–≤–æ–¥–∏–º –∫ —Å—Ç—Ä–æ–∫–µ, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø—Ä–æ–±–ª–µ–º —Å –±–∞–π—Ç–∞–º–∏
        equipped_armor = character_data[user_id].get('equipped_armor', '–ù–µ –Ω–∞–¥–µ—Ç–∞')
        if isinstance(equipped_armor, bytes):
            equipped_armor = equipped_armor.decode('utf-8', errors='ignore')
        else:
            equipped_armor = str(equipped_armor)

        equipped_weapon = character_data[user_id].get('equipped_weapon', '–ù–µ –Ω–∞–¥–µ—Ç–æ')
        if isinstance(equipped_weapon, bytes):
            equipped_weapon = equipped_weapon.decode('utf-8', errors='ignore')
        else:
            equipped_weapon = str(equipped_weapon)

        gold = character_data[user_id].get('gold', 0)

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ subscription_data
        user_sub_data = subscription_data.get('users', {}).get(user_id, {})
        power = user_sub_data.get('power', 0)
        dungeon_floor = user_sub_data.get('dungeon_floor', 0)  # –ü–æ–ª—É—á–∞–µ–º —ç—Ç–∞–∂ –±–∞—à–Ω–∏

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        stats = (
            f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–∞—à–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:\n\n"
            f"üí∞–ó–æ–ª–æ—Ç–æ: {gold}\n"
            f"‚öúÔ∏è –ë–æ–µ–≤–∞—è –º–æ—â—å: {power:.1f}\n"
            f"üóº–ë–∞—à–Ω—è –ù–µ–≤–µ–¥–æ–º–æ–≥–æ: {dungeon_floor} —ç—Ç–∞–∂\n\n"
            f"üî∞–ë—Ä–æ–Ω—è: {equipped_armor if equipped_armor else '–ù–µ –Ω–∞–¥–µ—Ç–∞'}\n"
            f"üó°Ô∏è–û—Ä—É–∂–∏–µ: {equipped_weapon if equipped_weapon else '–ù–µ –Ω–∞–¥–µ—Ç–æ'}\n\n"
            f"‚ù§Ô∏è–ó–¥–æ—Ä–æ–≤—å–µ: {user_stats['hp']}/{user_stats['hp_max']}\n"
            f"üîÆ–ú–∞–Ω–∞: {user_stats['mana']}/{user_stats['mana_max']}\n"
            f"‚öîÔ∏è–ê—Ç–∞–∫–∞: {user_stats['attack']}\n"
            f"üõ°Ô∏è–ó–∞—â–∏—Ç–∞: {user_stats['defense']}\n"
            f"üí™–°–∏–ª–∞: {user_stats['strength']}\n"
            f"üèπ–õ–æ–≤–∫–æ—Å—Ç—å: {user_stats['agility']}\n"
            f"üìö–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç: {user_stats['intelligence']}\n"
            f"üéØ–®–∞–Ω—Å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ —É–¥–∞—Ä–∞: {user_stats['crit_chance'] * 100:.1f}%\n"
            f"üí•–£—Ä–æ–Ω –æ—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ —É–¥–∞—Ä–∞: {user_stats['crit_damage'] * 100:.1f}%\n"
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
        await message.answer(stats)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


# =======================================–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ üìäÔ∏è=====================================#


# =======================================–ö—É–∑–Ω—è üî®=====================================#
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ö—É–∑–Ω—è üî®"
@dp.message(F.text == "–ö—É–∑–Ω—è üî®")
async def forge_menu(message: types.Message):
    try:
        user_id = str(message.from_user.id)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —ç—Ç–∞–∂–∞ –∏–∑ subscription_data.json
        with open(SUBSCRIPTION_DATA_FILE, 'r', encoding='utf-8') as f:
            subscription_data = json.load(f)

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —ç—Ç–∞–∂ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        current_floor = subscription_data.get("users", {}).get(user_id, {}).get("dungeon_floor", 0)

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–±—Å–æ–ª—é—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —ç—Ç–∞–∂–∞ (—Ç–∞–∫ –∫–∞–∫ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –º–æ–≥—É—Ç –æ–∑–Ω–∞—á–∞—Ç—å –Ω–∏—Å—Ö–æ–∂–¥–µ–Ω–∏–µ)
        if abs(current_floor) < 4:
            await message.answer("üöß –ö—É–∑–Ω—è üî® –Ω–∞ —Ä–µ–º–æ–Ω—Ç–µ\n"
                                 "–ü–æ–¥–Ω–∏–º–∏—Å—å –Ω–∞ 4-—ã–π —ç—Ç–∞–∂ –ë–∞—à–Ω–∏ –ù–µ–≤–µ–¥–æ–º–æ–≥–æüóº!")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∏–∑ character_data.json
        with open(CHARACTER_DATA_FILE, 'r', encoding='utf-8') as f:
            character_data = json.load(f)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–∏—Å—Ç–µ–º–µ
        if user_id not in character_data:
            await message.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –≤–∞–º –Ω—É–∂–Ω–æ –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É!")
            return

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
        char_data = character_data[user_id]

        # –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –∑–∞–≥—Ä—É–∑–∫–∏
        await message.answer("üî• –†–∞–∑–∂–∏–≥–∞–µ–º –≥–æ—Ä–Ω—ã –∫—É–∑–Ω–∏—Ü—ã...")
        await asyncio.sleep(random.uniform(1.5, 2.5))

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_materials = char_data.get("material_user", {})
        recipes = char_data.get("recipes", {})

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        buttons = [
            [KeyboardButton(text="–ú–∞—Ç–µ—Ä–∏–∞–ª—ã ‚öíÔ∏è"),
             KeyboardButton(text="–ò–∑–≥–æ—Ç–æ–≤–∏—Ç—å ‚öôÔ∏è"),
             KeyboardButton(text="–î–æ–º–µ–Ω–Ω–∞—è –ø–µ—á—å üè≠Ô∏è")],
            [KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")],
        ]
        markup = ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)

        # –ü–æ–¥—Å—á–µ—Ç –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –∏ —Ä–µ—Ü–µ–ø—Ç–æ–≤
        material_count = sum(user_materials.values()) if user_materials else 0
        recipe_count = 0

        # –°—á–∏—Ç–∞–µ–º –≤—Å–µ —Ä–µ—Ü–µ–ø—Ç—ã (–æ—Ä—É–∂–∏–µ + –±—Ä–æ–Ω—è)
        if recipes:
            recipe_count += len(recipes.get("recipes_weapon", {}))
            recipe_count += len(recipes.get("recipes_armor", {}))

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–Ω–∞—Ä—è–∂–µ–Ω–∏–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Å—Ç–∞—Ç—É—Å–µ
        equipped_weapon = char_data.get("equipped_weapon", "–Ω–µ—Ç")
        equipped_armor = char_data.get("equipped_armor", "–Ω–µ—Ç")

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message_text = (
            f"‚öíÔ∏è <b>–ö—É–∑–Ω–∏—Ü–∞</b> ‚öíÔ∏è\n\n"
            f"üó°Ô∏è –¢–µ–∫—É—â–µ–µ –æ—Ä—É–∂–∏–µ: {equipped_weapon}\n"
            f"üõ°Ô∏è –¢–µ–∫—É—â–∞—è –±—Ä–æ–Ω—è: {equipped_armor}\n\n"
            f"üì¶ –ú–∞—Ç–µ—Ä–∏–∞–ª–æ–≤: {material_count}\n"
            f"üìú –†–µ—Ü–µ–ø—Ç–æ–≤: {recipe_count}\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        )

        await message.answer(message_text, reply_markup=markup, parse_mode="HTML")

    except FileNotFoundError as e:
        logging.error(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {e}")
        await message.answer("‚ö† –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –§–∞–π–ª –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    except json.JSONDecodeError:
        logging.error("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è JSON —Ñ–∞–π–ª–∞")
        await message.answer("‚ö† –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –î–∞–Ω–Ω—ã–µ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω—ã.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ forge_menu: {e}", exc_info=True)
        await message.answer("‚ö† –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


# =======================================–ö—É–∑–Ω—è üî®=====================================#


# =======================================–ú–∞—Ç–µ—Ä–∏–∞–ª—ã ‚öíÔ∏è=====================================#
@dp.message(F.text == "–ú–∞—Ç–µ—Ä–∏–∞–ª—ã ‚öíÔ∏è")
async def show_materials(message: types.Message):
    user_id = message.from_user.id

    # Check if user is registered
    if user_id not in user_data:
        await message.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –≤–∞–º –Ω—É–∂–Ω–æ –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É!")
        return

    try:
        # Get user data
        user_materials = user_data[user_id].get('material_user', {})
        user_recipes = user_data[user_id].get('recipes', {})

        # Build materials message
        materials_msg = []
        if user_materials:
            materials_msg.append("üì¶ <b>–í–∞—à–∏ –º–∞—Ç–µ—Ä–∏–∞–ª—ã:</b>")
            for material, amount in sorted(user_materials.items()):
                materials_msg.append(f"‚ñ™ {material.capitalize()}: {amount}")
        else:
            materials_msg.append("üì¶ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤.")

        # Build recipes message
        recipes_msg = []
        has_any_recipes = False

        # Check armor recipes
        armor_recipes = user_recipes.get('recipes_armor', {})
        weapon_recipes = user_recipes.get('recipes_weapon', {})

        if armor_recipes or weapon_recipes:
            recipes_msg.append("\nüìú <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã:</b>")

            # Function to check if recipe can be crafted
            def can_craft(recipe_materials):
                for mat, needed in recipe_materials.items():
                    if user_materials.get(mat, 0) < needed:
                        return False
                return True

            # Process armor recipes by categories
            armor_categories = {
                "–ö–æ–∂–∞–Ω–∞—è –±—Ä–æ–Ω—è": [],
                "–ñ–µ–ª–µ–∑–Ω–∞—è –±—Ä–æ–Ω—è": [],
                "–ú–∏—Ñ—Ä–∏–ª–æ–≤–∞—è –±—Ä–æ–Ω—è": [],
                "–ú–∞–≥–∏—á–µ—Å–∫–∏–µ –æ–¥–µ—è–Ω–∏—è": []
            }

            for recipe_name, recipe_mats in armor_recipes.items():
                craftable = "üü¢" if can_craft(recipe_mats) else "üî¥"
                if "–ö–æ–∂–∞–Ω–∞—è" in recipe_name:
                    armor_categories["–ö–æ–∂–∞–Ω–∞—è –±—Ä–æ–Ω—è"].append((recipe_name, craftable))
                elif "–ñ–µ–ª–µ–∑–Ω–∞—è" in recipe_name:
                    armor_categories["–ñ–µ–ª–µ–∑–Ω–∞—è –±—Ä–æ–Ω—è"].append((recipe_name, craftable))
                elif "–ú–∏—Ñ—Ä–∏–ª–æ–≤—ã–π" in recipe_name:
                    armor_categories["–ú–∏—Ñ—Ä–∏–ª–æ–≤–∞—è –±—Ä–æ–Ω—è"].append((recipe_name, craftable))
                else:
                    armor_categories["–ú–∞–≥–∏—á–µ—Å–∫–∏–µ –æ–¥–µ—è–Ω–∏—è"].append((recipe_name, craftable))

            # Add armor recipes if any
            if any(armor_categories.values()):
                recipes_msg.append("\n<b>–ë—Ä–æ–Ω—è:</b>")
                for category, recipes in armor_categories.items():
                    if recipes:
                        recipes_msg.append(f"\n<b>{category}:</b>")
                        for recipe_name, craftable in sorted(recipes):
                            recipes_msg.append(f"{craftable} {recipe_name}")
                        has_any_recipes = True

            # Process weapon recipes by categories
            weapon_categories = {
                "–î–µ—Ä–µ–≤—è–Ω–Ω–æ–µ –æ—Ä—É–∂–∏–µ": [],
                "–ñ–µ–ª–µ–∑–Ω–æ–µ –æ—Ä—É–∂–∏–µ": [],
                "–°—Ç–∞–ª—å–Ω–æ–µ –æ—Ä—É–∂–∏–µ": [],
                "–ú–∏—Ñ—Ä–∏–ª–æ–≤–æ–µ –æ—Ä—É–∂–∏–µ": []
            }

            for recipe_name, recipe_mats in weapon_recipes.items():
                craftable = "üü¢" if can_craft(recipe_mats) else "üî¥"
                if "–î–µ—Ä–µ–≤—è–Ω–Ω" in recipe_name:
                    weapon_categories["–î–µ—Ä–µ–≤—è–Ω–Ω–æ–µ –æ—Ä—É–∂–∏–µ"].append((recipe_name, craftable))
                elif "–ñ–µ–ª–µ–∑–Ω" in recipe_name:
                    weapon_categories["–ñ–µ–ª–µ–∑–Ω–æ–µ –æ—Ä—É–∂–∏–µ"].append((recipe_name, craftable))
                elif "–°—Ç–∞–ª—å–Ω" in recipe_name:
                    weapon_categories["–°—Ç–∞–ª—å–Ω–æ–µ –æ—Ä—É–∂–∏–µ"].append((recipe_name, craftable))
                elif "–ú–∏—Ñ—Ä–∏–ª–æ–≤" in recipe_name:
                    weapon_categories["–ú–∏—Ñ—Ä–∏–ª–æ–≤–æ–µ –æ—Ä—É–∂–∏–µ"].append((recipe_name, craftable))

            # Add weapon recipes if any
            if any(weapon_categories.values()):
                recipes_msg.append("\n<b>–û—Ä—É–∂–∏–µ:</b>")
                for category, recipes in weapon_categories.items():
                    if recipes:
                        recipes_msg.append(f"\n<b>{category}:</b>")
                        for recipe_name, craftable in sorted(recipes):
                            recipes_msg.append(f"{craftable} {recipe_name}")
                        has_any_recipes = True

            if not has_any_recipes:
                recipes_msg.append("\n(–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–µ—Ü–µ–ø—Ç–æ–≤)")
        else:
            recipes_msg.append("\nüìú –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ä–µ—Ü–µ–ø—Ç–æ–≤.")

        # Combine and send messages
        full_msg = "\n".join(materials_msg + recipes_msg)
        await message.answer(full_msg, parse_mode="HTML")

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ show_materials –¥–ª—è {user_id}: {e}")
        await message.answer("‚ö† –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


# =======================================–ú–∞—Ç–µ—Ä–∏–∞–ª—ã ‚öíÔ∏è=====================================#


# =======================================–î–æ–º–µ–Ω–Ω–∞—è –ø–µ—á—å üè≠Ô∏è=====================================#
@dp.message(F.text == "–î–æ–º–µ–Ω–Ω–∞—è –ø–µ—á—å üè≠Ô∏è")
async def domain_furnace_handler(message: types.Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–º–µ–Ω–Ω–æ–π –ø–µ—á–∏ –¥–ª—è –∫—Ä–∞—Ñ—Ç–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤.
    """
    user_id = message.from_user.id

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –¥–æ–º–µ–Ω–Ω–æ–π –ø–µ—á–∏
    try:
        photo_path = photo_forge["–î–æ–º–µ–Ω–Ω–∞—è –ø–µ—á—å"]["–î–æ–º–µ–Ω–Ω–∞—è –ø–µ—á—å"]
        photo = FSInputFile(photo_path)
        await message.answer_photo(
            photo,
            caption="üè≠ –î–æ–º–µ–Ω–Ω–∞—è –ø–µ—á—å –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!",
            reply_markup=create_forge_keyboard()
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ –¥–æ–º–µ–Ω–Ω–æ–π –ø–µ—á–∏: {e}")
        await message.answer(
            "üè≠ –î–æ–º–µ–Ω–Ω–∞—è –ø–µ—á—å –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!",
            reply_markup=create_forge_keyboard()
        )


def create_forge_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –¥–æ–º–µ–Ω–Ω–æ–π –ø–µ—á–∏."""
    buttons = [
        [InlineKeyboardButton(text="üìú –†–µ—Ü–µ–ø—Ç—ã –Ω–∞ –º–∞—Ç–µ—Ä–∏–∞–ª—ã", callback_data="forge_recipes"),
         InlineKeyboardButton(text="üî® –°–æ–∑–¥–∞—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã", callback_data="forge_create")],
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)


# –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ—Ü–µ–ø—Ç–æ–≤
@dp.callback_query(F.data == "forge_recipes")
async def show_forge_recipes(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã."""
    try:
        recipes_text = "üìú –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã:\n\n"
        for material, components in recipes_domain_furnace.items():
            components_str = " + ".join([f"{amount} {item}" for item, amount in components.items()])
            recipes_text += f"üîπ 1 {material} = {components_str}\n"

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–æ –ª–∏ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ
        if callback.message.photo:
            await callback.message.delete()
            await callback.message.answer(
                recipes_text,
                reply_markup=InlineKeyboardMarkup(
                    inline_keyboard=[
                        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="forge_back_to_main")]
                    ])
            )
        else:
            await callback.message.edit_text(
                recipes_text,
                reply_markup=InlineKeyboardMarkup(
                    inline_keyboard=[
                        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="forge_back_to_main")]
                    ])
            )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ show_forge_recipes: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!", show_alert=True)


@dp.callback_query(F.data == "forge_create")
async def select_material_to_craft(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–∞—Ç–µ—Ä–∏–∞–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å."""
    user_id = callback.from_user.id
    user_materials = user_data[user_id]["material_user"]

    # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–ª—è –∫—Ä–∞—Ñ—Ç–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
    buttons = []
    for material, components in recipes_domain_furnace.items():
        can_craft = True

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        for item, amount in components.items():
            if user_materials.get(item, 0) < amount:
                can_craft = False
                break

        if can_craft:
            buttons.append(
                [InlineKeyboardButton(
                    text=f"üõ† –°–æ–∑–¥–∞—Ç—å {material}",
                    callback_data=f"craft_m_{material}"
                )]
            )

    message_text = "üî® –í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è:"
    if not buttons:
        message_text = "‚ùå –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –¥–ª—è –∫—Ä–∞—Ñ—Ç–∞!"

    buttons.append(
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="forge_back_to_main")]
    )

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–æ –ª–∏ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ
        if callback.message.photo:
            await callback.message.delete()
            await callback.message.answer(
                message_text,
                reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons)
            )
        else:
            await callback.message.edit_text(
                message_text,
                reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons)
            )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ select_material_to_craft: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!", show_alert=True)

    await callback.answer()


@dp.callback_query(F.data.startswith("craft_m_"))
async def craft_material(callback: types.CallbackQuery):
    """–°–æ–∑–¥–∞–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª."""
    user_id = callback.from_user.id
    material = callback.data.split("_")[2]  # –ò–∑–º–µ–Ω–µ–Ω–æ —Å [1] –Ω–∞ [2] –∏–∑-–∑–∞ –Ω–æ–≤–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞
    user_materials = user_data[user_id]["material_user"]

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
        required_components = recipes_domain_furnace[material]
        missing = []

        for item, amount in required_components.items():
            if user_materials.get(item, 0) < amount:
                missing.append(f"{amount} {item}")

        if missing:
            await callback.answer(
                f"‚ùå –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç: {', '.join(missing)}",
                show_alert=True
            )
            return

        # –í—ã—á–∏—Ç–∞–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª—ã
        for item, amount in required_components.items():
            user_materials[item] -= amount

        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª
        user_materials[material] = user_materials.get(material, 0) + 1

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ—Ç—Ä–∞—á–µ–Ω–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–∞—Ö
        used_materials = [f"{amount} {item}" for item, amount in required_components.items()]

        await callback.answer(
            f"‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ: 1 {material}\n"
            f"üìâ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: {', '.join(used_materials)}",
            show_alert=True
        )

        # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é –∫—Ä–∞—Ñ—Ç–∞
        await select_material_to_craft(callback)

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ craft_material: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏!", show_alert=True)


@dp.callback_query(F.data == "forge_back_to_main")
async def back_to_forge_main(callback: types.CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –¥–æ–º–µ–Ω–Ω–æ–π –ø–µ—á–∏."""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–æ –ª–∏ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ
        if callback.message.photo:
            await callback.message.delete()
            await callback.message.answer_photo(
                FSInputFile(photo_forge["–î–æ–º–µ–Ω–Ω–∞—è –ø–µ—á—å"]["–î–æ–º–µ–Ω–Ω–∞—è –ø–µ—á—å"]),
                caption="üè≠ –î–æ–º–µ–Ω–Ω–∞—è –ø–µ—á—å –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!",
                reply_markup=create_forge_keyboard()
            )
        else:
            await callback.message.edit_text(
                "üè≠ –î–æ–º–µ–Ω–Ω–∞—è –ø–µ—á—å –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!",
                reply_markup=create_forge_keyboard()
            )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ back_to_forge_main: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!", show_alert=True)


@dp.callback_query(F.data == "forge_back")
async def back_from_forge(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ù–∞–∑–∞–¥' –∏–∑ –¥–æ–º–µ–Ω–Ω–æ–π –ø–µ—á–∏."""
    await callback.answer("–í–æ–∑–≤—Ä–∞—Ç –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –º–µ–Ω—é")


recipes_domain_furnace = {
    "—Å—Ç–∞–ª—å": {
        "–∂–µ–ª–µ–∑–æ": 4,
        "–∫–∞–º–µ–Ω—å": 5,
    },
    "–∂–µ–ª–µ–∑–æ": {
        "–∫–∞–º–µ–Ω—å": 10,
    },
    "—Ñ–∞–Ω—Ç–æ–º–Ω—ã–π —à–µ–ª–∫": {
        "—Ç–µ–Ω–µ–≤–æ–π —à–µ–ª–∫": 3,
        "–∫–æ–∂–∞": 10
    },
    "—Ç–∫–∞–Ω—å –∑–∞–±—ã—Ç—ã—Ö": {
        "—Ç–µ–Ω–µ–≤–æ–π —à–µ–ª–∫": 3,
        "—Ñ–∞–Ω—Ç–æ–º–Ω—ã–π —à–µ–ª–∫": 2,
        "–∫–æ–∂–∞": 10
    },
    "–ø–µ–ø–µ–ª —Ñ–µ–Ω–∏–∫—Å–∞": {
        "–∫–æ—Å—Ç—è–Ω–∞—è —Å—Ç–∞–ª—å": 3,
        "—Ñ–∞–Ω—Ç–æ–º–Ω—ã–π —à–µ–ª–∫": 3,
        "–∞–ª–º–∞–∑": 1,
        "–∫–∞–º–µ–Ω—å": 10,
    },
    # –î–æ–±–∞–≤—å—Ç–µ –¥—Ä—É–≥–∏–µ —Ä–µ—Ü–µ–ø—Ç—ã –ø–æ –∞–Ω–∞–ª–æ–≥–∏–∏
    # "–º–∞—Ç–µ—Ä–∏–∞–ª": {"–∫–æ–º–ø–æ–Ω–µ–Ω—Ç1": –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ, "–∫–æ–º–ø–æ–Ω–µ–Ω—Ç2": –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ},
}
photo_forge = {
    "–î–æ–º–µ–Ω–Ω–∞—è –ø–µ—á—å": {"–î–æ–º–µ–Ω–Ω–∞—è –ø–µ—á—å": "Photo/KingDang/Creat_Diryk/Creat_Diryk.jpg"}
}


# =======================================–î–æ–º–µ–Ω–Ω–∞—è –ø–µ—á—å üè≠Ô∏è=====================================#


# =======================================–ò–∑–≥–æ—Ç–æ–≤–∏—Ç—å ‚öô=====================================#
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã "–ò–∑–≥–æ—Ç–æ–≤–∏—Ç—å ‚öôÔ∏è"
@dp.message(F.text == "–ò–∑–≥–æ—Ç–æ–≤–∏—Ç—å ‚öôÔ∏è")
@dp.message(Command("create_item"))
async def create_item(message: types.Message):
    user_id = message.from_user.id  # –∏—Å–ø–æ–ª—å–∑—É–µ–º int, –∞ –Ω–µ str

    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user_id not in user_data:
            await message.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ /start")
            return

        user = user_data[user_id]

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ—Ü–µ–ø—Ç–æ–≤
        if not user.get('recipes'):
            await message.answer("üìú –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–µ—Ü–µ–ø—Ç–æ–≤!")
            return

        # –°–±–æ—Ä –≤—Å–µ—Ö —Ä–µ—Ü–µ–ø—Ç–æ–≤
        all_recipes = []
        for category in ['recipes_weapon', 'recipes_armor']:
            if category in user['recipes']:
                for recipe_name, recipe_data in user['recipes'][category].items():
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∫—Ä–∞—Ñ—Ç–∞
                    can_craft = True
                    missing = []
                    for mat, qty in recipe_data.items():
                        if user['material_user'].get(mat, 0) < qty:
                            can_craft = False
                            missing.append(f"{mat} (–Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç {qty - user['material_user'].get(mat, 0)})")

                    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è
                    display_name = f"{'üü¢' if can_craft else 'üî¥'} {recipe_name.replace('–†–µ—Ü–µ–ø—Ç-', '')}"
                    if not can_craft:
                        display_name += f" (–Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç: {', '.join(missing)})"

                    all_recipes.append((recipe_name, display_name, category))

        if not all_recipes:
            await message.answer("üìú –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–µ—Ü–µ–ø—Ç–æ–≤!")
            return

        # –†–∞–∑–±–∏–≤–∫–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–ø–æ 5 —Ä–µ—Ü–µ–ø—Ç–æ–≤)
        page_size = 5
        pages = [all_recipes[i:i + page_size] for i in range(0, len(all_recipes), page_size)]

        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        buttons = []
        for recipe_name, display_name, _ in pages[0]:
            buttons.append([InlineKeyboardButton(
                text=display_name,
                callback_data=f"select_recipe_{recipe_name[:30]}"
            )])

        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if len(pages) > 1:
            buttons.append([
                InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data="prev_page_0"),
                InlineKeyboardButton(text="‚û°Ô∏è", callback_data="next_page_0")
            ])

        keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
        await message.answer("üîß <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã:</b>", reply_markup=keyboard, parse_mode="HTML")

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ create_item: {e}")
        await message.answer("‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–µ—Ü–µ–ø—Ç–æ–≤")


@dp.callback_query(lambda c: c.data.startswith("craft_"))
async def craft_item(callback: types.CallbackQuery):
    user_id = callback.from_user.id  # –∏—Å–ø–æ–ª—å–∑—É–µ–º int, –∞ –Ω–µ str
    recipe_short = callback.data[len("craft_"):]

    try:
        if user_id not in user_data:
            await callback.answer("‚ùå –ü–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return

        user = user_data[user_id]
        found_recipe = None

        # –ò—â–µ–º —Ä–µ—Ü–µ–ø—Ç –≤ –æ–±–µ–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö
        for category in ['recipes_weapon', 'recipes_armor']:
            if category in user.get('recipes', {}):
                for recipe_name in user['recipes'][category]:
                    if recipe_name.startswith(recipe_short):
                        found_recipe = (
                            recipe_name,
                            category,
                            user['recipes'][category][recipe_name]
                        )
                        break
                if found_recipe:
                    break

        if not found_recipe:
            await callback.answer("‚ùå –†–µ—Ü–µ–ø—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return

        recipe_name, category, materials = found_recipe
        item_name = recipe_name.replace("–†–µ—Ü–µ–ø—Ç-", "").strip()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
        missing_mats = []
        for mat, needed in materials.items():
            if user.get('material_user', {}).get(mat, 0) < needed:
                missing_mats.append(f"{mat} (–Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç {needed - user['material_user'].get(mat, 0)})")

        if missing_mats:
            await callback.answer(f"‚ùå –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç: {', '.join(missing_mats)}")
            return

        # –ò—â–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –ø—Ä–µ–¥–º–µ—Ç–∞ –≤ char_recipes
        item_stats = {}
        if 'weapon' in category:
            item_stats = char_recipes['weapon_diryk'].get(item_name, {
                'attack': random.randint(10, 20),
                'crit_chance': round(random.uniform(0.05, 0.15), 2),
                'durability': 100
            })
        else:
            item_stats = char_recipes['armor_diryk'].get(item_name, {
                'defense': random.randint(5, 15),
                'hp': random.randint(10, 30),
                'durability': 100
            })

        # –í—ã—á–∏—Ç–∞–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª—ã
        for mat, needed in materials.items():
            user['material_user'][mat] -= needed
            if user['material_user'][mat] <= 0:
                del user['material_user'][mat]

        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥–º–µ—Ç –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å
        if 'weapon' in category:
            if 'AR' not in user:
                user['AR'] = {}
            user['AR'][item_name] = item_stats
        else:
            if 'BR' not in user:
                user['BR'] = {}
            user['BR'][item_name] = item_stats

        # –£–¥–∞–ª—è–µ–º —Ä–µ—Ü–µ–ø—Ç (–µ—Å–ª–∏ –æ–Ω –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–π)
        del user['recipes'][category][recipe_name]

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        save_data()

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
        materials_text = "\n".join([f"‚ñ™ {mat}: {qty}" for mat, qty in materials.items()])

        # –ü–µ—Ä–µ–≤–æ–¥–∏–º –Ω–∞–∑–≤–∞–Ω–∏—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
        stat_names = {
            'hp': '‚ù§Ô∏è –ó–¥–æ—Ä–æ–≤—å–µ',
            'mana': 'üîÆ –ú–∞–Ω–∞',
            'attack': '‚öîÔ∏è –ê—Ç–∞–∫–∞',
            'defense': 'üõ°Ô∏è –ó–∞—â–∏—Ç–∞',
            'strength': 'üí™ –°–∏–ª–∞',
            'agility': 'üèπ –õ–æ–≤–∫–æ—Å—Ç—å',
            'intelligence': 'üìö –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç',
            'crit_chance': 'üéØ –®–∞–Ω—Å –∫—Ä–∏—Ç–∞',
            'crit_damage': 'üí• –£—Ä–æ–Ω –∫—Ä–∏—Ç–∞',
            'durability': 'üîß –ü—Ä–æ—á–Ω–æ—Å—Ç—å'
        }

        stats_text = "\n".join([
            f"‚ñ™ {stat_names.get(stat, stat)}: {value}"
            for stat, value in item_stats.items()
            if value != 0  # –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω—É–ª–µ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        ])

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
        await callback.message.edit_text(
            f"üéâ <b>{item_name}</b> —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n\n"
            f"üì¶ <u>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤:</u>\n{materials_text}\n\n"
            f"üìä <u>–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:</u>\n{stats_text}\n\n"
            f"–î–æ–±–∞–≤–ª–µ–Ω –≤ –≤–∞—à –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å.",
            parse_mode="HTML"
        )

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ craft_item: {e}")
        await callback.answer("‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–µ–¥–º–µ—Ç–∞")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
@dp.callback_query(lambda c: c.data == "back_to_recipes")
async def back_to_recipes(callback: types.CallbackQuery):
    user_id = callback.from_user.id

    # –ü–æ–≤—Ç–æ—Ä–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ä–µ—Ü–µ–ø—Ç–æ–≤
    all_recipes = []
    for category in ["recipes_weapon", "recipes_armor"]:
        if category in user_data[user_id]["recipes"]:
            all_recipes.extend(user_data[user_id]["recipes"][category].keys())

    if not all_recipes:
        await callback.message.edit_text("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–µ—Ü–µ–ø—Ç–æ–≤.")
        return

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ä–µ—Ü–µ–ø—Ç–æ–≤
    buttons = []
    for recipe in all_recipes[:4]:  # –ü–µ—Ä–≤—ã–µ 5 —Ä–µ—Ü–µ–ø—Ç–æ–≤
        short_name = recipe[:999]
        buttons.append([InlineKeyboardButton(
            text=recipe,
            callback_data=f"select_recipe_{short_name}"
        )])

    # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if len(all_recipes) > 4:
        buttons.append([
            InlineKeyboardButton(text="‚û°Ô∏è –°–ª–µ–¥—É—é—â–∏–µ", callback_data="recipes_page_1")
        ])

    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –≤–æ–∑–≤—Ä–∞—â–∞—è –ø—Ä–µ–¥—ã–¥—É—â–∏–π –≤–∏–¥
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ—Ü–µ–ø—Ç –¥–ª—è –∏–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons)
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã —Å–æ–∑–¥–∞–Ω–∏—è
@dp.callback_query(lambda callback_query: callback_query.data == "cancel_craft")
async def cancel_craft(callback_query: types.CallbackQuery):
    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—Ç–º–µ–Ω–æ–π
    await callback_query.message.edit_text("–°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ä–µ—Ü–µ–ø—Ç–∞
@dp.callback_query(lambda c: c.data.startswith("select_recipe_"))
async def select_recipe(callback: types.CallbackQuery):
    user_id = str(callback.from_user.id)
    recipe_short = callback.data[len("select_recipe_"):]

    try:
        # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
        with open(CHARACTER_DATA_FILE, 'r', encoding='utf-8') as f:
            character_data = json.load(f)

        if user_id not in character_data:
            await callback.answer("‚ùå –ü–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return

        user_data = character_data[user_id]
        found_recipe = None

        # –ü–æ–∏—Å–∫ —Ä–µ—Ü–µ–ø—Ç–∞ –≤ –æ–±–µ–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö
        for category in ['recipes_weapon', 'recipes_armor']:
            if category in user_data.get('recipes', {}):
                for recipe_name in user_data['recipes'][category]:
                    if recipe_name.startswith(recipe_short):
                        found_recipe = (
                            recipe_name,
                            category,
                            user_data['recipes'][category][recipe_name]
                        )
                        break
                if found_recipe:
                    break

        if not found_recipe:
            await callback.answer("‚ùå –†–µ—Ü–µ–ø—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return

        recipe_name, category, materials = found_recipe
        item_name = recipe_name.replace("–†–µ—Ü–µ–ø—Ç-", "").strip()

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
        missing_mats = []
        for mat, needed in materials.items():
            if user_data.get('material_user', {}).get(mat, 0) < needed:
                missing_mats.append(f"{mat} (–Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç {needed - user_data['material_user'].get(mat, 0)})")

        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –∏–∑ char_recipes
        item_stats = {}
        if 'weapon' in category:
            item_stats = char_recipes['weapon_diryk'].get(item_name, {
                'attack': random.randint(10, 20),
                'crit_chance': round(random.uniform(0.05, 0.15), 2),
                'durability': 100
            })
        else:
            item_stats = char_recipes['armor_diryk'].get(item_name, {
                'defense': random.randint(5, 15),
                'hp': random.randint(10, 30),
                'durability': 100
            })

        # –ü–µ—Ä–µ–≤–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
        stat_names = {
            'hp': '‚ù§Ô∏è –ó–¥–æ—Ä–æ–≤—å–µ',
            'mana': 'üîÆ –ú–∞–Ω–∞',
            'attack': '‚öîÔ∏è –ê—Ç–∞–∫–∞',
            'defense': 'üõ°Ô∏è –ó–∞—â–∏—Ç–∞',
            'strength': 'üí™ –°–∏–ª–∞',
            'agility': 'üèπ –õ–æ–≤–∫–æ—Å—Ç—å',
            'intelligence': 'üìö –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç',
            'crit_chance': 'üéØ –®–∞–Ω—Å –∫—Ä–∏—Ç–∞',
            'crit_damage': 'üí• –£—Ä–æ–Ω –∫—Ä–∏—Ç–∞',
        }

        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        materials_text = "\n".join([f"‚ñ™ {mat}: {qty}" for mat, qty in materials.items()])
        stats_text = "\n".join([
            f"‚ñ™ {stat_names.get(stat, stat)}: {value}"
            for stat, value in item_stats.items()
            if value != 0  # –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω—É–ª–µ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        ])

        # –ö–Ω–æ–ø–∫–∏
        buttons = []
        if not missing_mats:
            buttons.append(InlineKeyboardButton(
                text="‚úÖ –°–æ–∑–¥–∞—Ç—å",
                callback_data=f"craft_{recipe_short}"
            ))
        buttons.append(InlineKeyboardButton(
            text="‚ùå –û—Ç–º–µ–Ω–∞",
            callback_data="cancel_craft"
        ))

        keyboard = InlineKeyboardMarkup(inline_keyboard=[buttons])

        await callback.message.edit_text(
            f"üî® <b>{recipe_name}</b>\n\n"
            f"üì¶ <u>–ù–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã:</u>\n{materials_text}\n\n"
            f"üìä <u>–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:</u>\n{stats_text}\n\n"
            f"{'‚ùå –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤: ' + ', '.join(missing_mats) if missing_mats else '‚úÖ –ì–æ—Ç–æ–≤ –∫ —Å–æ–∑–¥–∞–Ω–∏—é'}",
            parse_mode="HTML",
            reply_markup=keyboard
        )

    except FileNotFoundError:
        await callback.answer("‚ö† –§–∞–π–ª –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω!")
    except json.JSONDecodeError:
        await callback.answer("‚ö† –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö!")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ select_recipe: {e}")
        await callback.answer("‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–µ—Ü–µ–ø—Ç–∞")


# =======================================–ò–∑–≥–æ—Ç–æ–≤–∏—Ç—å ‚öô=====================================#


# =======================================üõ°Ô∏è+ ‚öîÔ∏è=====================================#
async def update_character_stats(chat_id: int, item_name: str, is_equipping: bool, item_type: str):
    if chat_id not in user_data:
        await bot.send_message(chat_id, "–û—à–∏–±–∫–∞: –ø–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    user = user_data[chat_id]

    if item_type not in user or item_name not in user[item_type]:
        await bot.send_message(chat_id, "–ü—Ä–µ–¥–º–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    item_stats = user[item_type][item_name]
    hero_stats = user['hero_stats']

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è HP –∏ –º–∞–Ω—ã –ø–µ—Ä–µ–¥ –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º –º–∞–∫—Å–∏–º—É–º–æ–≤
    current_hp = hero_stats['hp']
    current_mana = hero_stats['mana']

    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è –¥–æ 0.01
    def round_to_002(value):
        return round(value * 100) / 100

    # –í—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –∫ –º–∞–∫—Å–∏–º—É–º–∞–º (—Å –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ–º)
    hp_max_change = round_to_002(item_stats.get('hp', 0)) if 'hp' in item_stats else 0
    mana_max_change = round_to_002(item_stats.get('mana', 0)) if 'mana' in item_stats else 0

    # –û–±–Ω–æ–≤–ª—è–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ (–∫—Ä–æ–º–µ —Ç–µ–∫—É—â–∏—Ö HP –∏ –º–∞–Ω—ã) —Å –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ–º
    for stat, value in item_stats.items():
        if stat in hero_stats and stat not in ['hp', 'mana']:
            rounded_value = round_to_002(value)
            if is_equipping:
                hero_stats[stat] = round_to_002(hero_stats[stat] + rounded_value)
            else:
                hero_stats[stat] = round_to_002(hero_stats[stat] - rounded_value)

    # –û–±–Ω–æ–≤–ª—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è —Å –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ–º
    if is_equipping:
        hero_stats['hp_max'] = round_to_002(hero_stats['hp_max'] + hp_max_change)
        hero_stats['mana_max'] = round_to_002(hero_stats['mana_max'] + mana_max_change)
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ —Å—Ç–æ–ª—å–∫–æ –∂–µ (—Å –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ–º)
        hero_stats['hp'] = round_to_002(hero_stats['hp'] + hp_max_change)
        hero_stats['mana'] = round_to_002(hero_stats['mana'] + mana_max_change)
    else:
        hero_stats['hp_max'] = round_to_002(hero_stats['hp_max'] - hp_max_change)
        hero_stats['mana_max'] = round_to_002(hero_stats['mana_max'] - mana_max_change)
        # –£–º–µ–Ω—å—à–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è, –Ω–æ –Ω–µ –Ω–∏–∂–µ 1 –¥–ª—è HP (—Å –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ–º)
        hero_stats['hp'] = max(1, round_to_002(hero_stats['hp'] - hp_max_change))
        hero_stats['mana'] = max(0, round_to_002(hero_stats['mana'] - mana_max_change))

    # –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ —Ç–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –Ω–µ –ø—Ä–µ–≤—ã—à–∞—é—Ç –º–∞–∫—Å–∏–º—É–º—ã (—Å –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ–º)
    hero_stats['hp'] = min(round_to_002(hero_stats['hp']), round_to_002(hero_stats['hp_max']))
    hero_stats['mana'] = min(round_to_002(hero_stats['mana']), round_to_002(hero_stats['mana_max']))

    # –û–±–Ω–æ–≤–ª—è–µ–º —ç–∫–∏–ø–∏—Ä–æ–≤–∫—É
    if item_type == "BR":
        user['equipped_armor'] = item_name if is_equipping else None
    elif item_type == "AR":
        user['equipped_weapon'] = item_name if is_equipping else None

    save_data()

    await bot.send_message(chat_id,
                           f"–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!‚ôªÔ∏è \n"
                           f"{'–≠–∫–∏–ø–∏—Ä–æ–≤–∞–Ω' if is_equipping else '–°–Ω—è—Ç'} {item_name}")  # =======================================üõ°Ô∏è+ ‚öîÔ∏è=====================================#


# =======================================–ë—Ä–æ–Ω—è Ô∏èüõ°Ô∏è=====================================#
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –º–µ–Ω—é –±—Ä–æ–Ω–∏
@dp.message(lambda message: message.text == "–ë—Ä–æ–Ω—è üõ°Ô∏è")
async def show_armor_options(message: types.Message):
    chat_id = message.chat.id

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π —Å –±—Ä–æ–Ω—ë–π
    buttons = [
        [KeyboardButton(text="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –±—Ä–æ–Ω—é")],
        [KeyboardButton(text="–ù–∞–¥–µ—Ç—å –±—Ä–æ–Ω—é"), KeyboardButton(text="–°–Ω—è—Ç—å –±—Ä–æ–Ω—é")],
        [KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]
    ]

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
    markup = ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –±—Ä–æ–Ω–∏
@dp.message(lambda message: message.text == "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –±—Ä–æ–Ω—é")
async def view_armor(message: types.Message):
    chat_id = message.chat.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –±—Ä–æ–Ω–∏ –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_data[chat_id]['BR']:
        armor_list = "\n".join(user_data[chat_id]['BR'].keys())
        await message.answer(f"–í–∞—à–∞ –±—Ä–æ–Ω—è:\n{armor_list}")
    else:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –±—Ä–æ–Ω–∏.")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–∞–¥–µ–≤–∞–Ω–∏—è –±—Ä–æ–Ω–∏
@dp.message(lambda message: message.text == "–ù–∞–¥–µ—Ç—å –±—Ä–æ–Ω—é")
async def equip_armor(message: types.Message):
    chat_id = message.chat.id

    try:
        if user_data[chat_id].get('equipped_armor'):
            await message.answer("–í—ã —É–∂–µ –Ω–∞–¥–µ–ª–∏ –±—Ä–æ–Ω—é. –°–Ω–∞—á–∞–ª–∞ —Å–Ω–∏–º–∏—Ç–µ —Ç–µ–∫—É—â—É—é –±—Ä–æ–Ω—é.")
            return

        user_inventory = user_data[chat_id].get('BR', {})
        if user_inventory:
            armor_buttons = [
                [InlineKeyboardButton(text=armor, callback_data=f"equip_armor_{armor}")]
                for armor in user_inventory.keys()
            ]
            markup = InlineKeyboardMarkup(inline_keyboard=armor_buttons)
            await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –±—Ä–æ–Ω—é –¥–ª—è –Ω–æ—à–µ–Ω–∏—è:", reply_markup=markup)
        else:
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ–π –±—Ä–æ–Ω–∏.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ equip_armor: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –Ω–∞–¥–µ—Ç—å –±—Ä–æ–Ω—é.")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–Ω—è—Ç–∏—è –±—Ä–æ–Ω–∏
@dp.message(lambda message: message.text == "–°–Ω—è—Ç—å –±—Ä–æ–Ω—é")
async def remove_armor(message: types.Message):
    chat_id = message.chat.id

    try:
        if user_data[chat_id].get('equipped_armor'):
            selected_armor = user_data[chat_id]['equipped_armor']
            armor_stats = user_data[chat_id]['BR'][selected_armor]

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ—Ç–µ—Ä—è–Ω–Ω—ã—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞—Ö
            lost_stats_message = ""
            stat_display_names = {
                'hp': '‚ù§Ô∏è–ó–¥–æ—Ä–æ–≤—å–µ',
                'mana': 'üîÆ–ú–∞–Ω–∞',
                'attack': '‚öîÔ∏è–ê—Ç–∞–∫–∞',
                'defense': 'üõ°Ô∏è–ó–∞—â–∏—Ç–∞',
                'strength': 'üí™–°–∏–ª–∞',
                'agility': 'üèπ–õ–æ–≤–∫–æ—Å—Ç—å',
                'intelligence': 'üìö–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç',
                'crit_chance': 'üéØ–®–∞–Ω—Å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ —É–¥–∞—Ä–∞',
                'crit_damage': 'üí•–£—Ä–æ–Ω –æ—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ —É–¥–∞—Ä–∞'
            }

            for stat, value in armor_stats.items():
                if stat in stat_display_names:
                    lost_stats_message += f"{stat_display_names[stat]}: -{value}\n"

            user_data[chat_id]['equipped_armor'] = None
            await update_character_stats(chat_id, selected_armor, is_equipping=False, item_type='BR')
            await update_power_in_subscription_data(chat_id, user_data[chat_id]['hero_stats'])

            await message.answer(
                f"–í—ã —Å–Ω—è–ª–∏ {selected_armor}.\n\n"
                f"–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —É–º–µ–Ω—å—à–µ–Ω—ãüìâ:\n{lost_stats_message}\n"
                f"‚öî –ë–æ–µ–≤–∞—è –º–æ—â—å: {subscription_data['users'][str(chat_id)].get('power', 0)}"
            )
        else:
            await message.answer("–ù–∞ –≤–∞—Å –Ω–µ –Ω–∞–¥–µ—Ç–æ –±—Ä–æ–Ω–∏.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ remove_armor: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ —Å–Ω—è—Ç—å –±—Ä–æ–Ω—é.")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –±—Ä–æ–Ω–∏ —á–µ—Ä–µ–∑ callback
@dp.callback_query(lambda callback_query: callback_query.data.startswith("equip_armor_"))
async def equip_armor_callback(callback_query: types.CallbackQuery):
    chat_id = callback_query.message.chat.id
    selected_armor = callback_query.data[len("equip_armor_"):]

    try:
        if user_data[chat_id].get('equipped_armor'):
            await callback_query.answer("–í—ã —É–∂–µ –Ω–∞–¥–µ–ª–∏ –±—Ä–æ–Ω—é. –°–Ω–∞—á–∞–ª–∞ —Å–Ω–∏–º–∏—Ç–µ —Ç–µ–∫—É—â—É—é –±—Ä–æ–Ω—é.", show_alert=True)
            return

        if selected_armor not in user_data[chat_id].get('BR', {}):
            await callback_query.answer("–ë—Ä–æ–Ω—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –≤–∞—à–µ–º –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ.", show_alert=True)
            return

        user_data[chat_id]['equipped_armor'] = selected_armor
        await update_character_stats(chat_id, selected_armor, is_equipping=True, item_type='BR')
        await update_power_in_subscription_data(chat_id, user_data[chat_id]['hero_stats'])

        armor_stats = user_data[chat_id]['BR'][selected_armor]

        # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–º–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏
        stats_message = ""
        stat_display_names = {
            'hp': '‚ù§Ô∏è–ó–¥–æ—Ä–æ–≤—å–µ',
            'mana': 'üîÆ–ú–∞–Ω–∞',
            'attack': '‚öîÔ∏è–ê—Ç–∞–∫–∞',
            'defense': 'üõ°Ô∏è–ó–∞—â–∏—Ç–∞',
            'strength': 'üí™–°–∏–ª–∞',
            'agility': 'üèπ–õ–æ–≤–∫–æ—Å—Ç—å',
            'intelligence': 'üìö–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç',
            'crit_chance': 'üéØ–®–∞–Ω—Å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ —É–¥–∞—Ä–∞',
            'crit_damage': 'üí•–£—Ä–æ–Ω –æ—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ —É–¥–∞—Ä–∞'
        }

        for stat, value in armor_stats.items():
            if stat in stat_display_names:
                stats_message += f"{stat_display_names[stat]}: +{value}\n"

        await callback_query.message.edit_text(
            f"–í—ã –Ω–∞–¥–µ–ª–∏ {selected_armor}.\n\n"
            f"–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —É–ª—É—á—à–µ–Ω—ãüìà:\n\n{stats_message}\n"
            f"‚öî –ë–æ–µ–≤–∞—è –º–æ—â—å: {subscription_data['users'][str(chat_id)].get('power', 0)}",
            reply_markup=None
        )
        await callback_query.answer()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ equip_armor_callback: {e}")
        await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–¥–µ–≤–∞–Ω–∏–∏ –±—Ä–æ–Ω–∏", show_alert=True)


# =======================================–ë—Ä–æ–Ω—è üõ°Ô∏è=====================================#


# =======================================–ê—Ä—Å–µ–Ω–∞–ª ‚öîÔ∏è=====================================#
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–∫–∞–∑–∞ –æ–ø—Ü–∏–π –∞—Ä—Å–µ–Ω–∞–ª–∞
@dp.message(F.text == "–ê—Ä—Å–µ–Ω–∞–ª ‚öîÔ∏è")
async def show_arsenal_options(message: types.Message):
    chat_id = message.chat.id

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π —Å –∞—Ä—Å–µ–Ω–∞–ª–æ–º
    buttons = [
        [KeyboardButton(text="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∞—Ä—Å–µ–Ω–∞–ª")],
        [KeyboardButton(text="–ù–∞–¥–µ—Ç—å –æ—Ä—É–∂–∏–µ"), KeyboardButton(text="–°–Ω—è—Ç—å –æ—Ä—É–∂–∏–µ")],
        [KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]
    ]

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
    markup = ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∞—Ä—Å–µ–Ω–∞–ª–∞
@dp.message(lambda message: message.text == "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∞—Ä—Å–µ–Ω–∞–ª")
async def view_arsenal(message: types.Message):
    chat_id = message.chat.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—Ä—É–∂–∏—è –≤ –∞—Ä—Å–µ–Ω–∞–ª–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_data[chat_id]['AR']:
        arsenal_list = "\n".join(user_data[chat_id]['AR'].keys())
        await message.answer(f"–í–∞—à –∞—Ä—Å–µ–Ω–∞–ª:\n{arsenal_list}")
    else:
        await message.answer("–í–∞—à –∞—Ä—Å–µ–Ω–∞–ª –ø—É—Å—Ç.")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–∞–¥–µ–≤–∞–Ω–∏—è –æ—Ä—É–∂–∏—è
@dp.message(lambda message: message.text == "–ù–∞–¥–µ—Ç—å –æ—Ä—É–∂–∏–µ")
async def equip_weapon(message: types.Message):
    chat_id = message.chat.id

    try:
        if user_data[chat_id].get('equipped_weapon'):
            await message.answer("–í—ã —É–∂–µ –Ω–∞–¥–µ–ª–∏ –æ—Ä—É–∂–∏–µ. –°–Ω–∞—á–∞–ª–∞ —Å–Ω–∏–º–∏—Ç–µ —Ç–µ–∫—É—â–µ–µ –æ—Ä—É–∂–∏–µ.")
            return

        user_inventory = user_data[chat_id].get('AR', {})
        if user_inventory:
            weapon_buttons = [
                [InlineKeyboardButton(text=weapon, callback_data=f"equip_weapon_{weapon}")]
                for weapon in user_inventory.keys()
            ]
            markup = InlineKeyboardMarkup(inline_keyboard=weapon_buttons)
            await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ä—É–∂–∏–µ –¥–ª—è –Ω–æ—à–µ–Ω–∏—è:", reply_markup=markup)
        else:
            await message.answer("–í–∞—à –∞—Ä—Å–µ–Ω–∞–ª –ø—É—Å—Ç.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ equip_weapon: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –Ω–∞–¥–µ—Ç—å –æ—Ä—É–∂–∏–µ.")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–Ω—è—Ç–∏—è –æ—Ä—É–∂–∏—è
@dp.message(lambda message: message.text == "–°–Ω—è—Ç—å –æ—Ä—É–∂–∏–µ")
async def remove_weapon(message: types.Message):
    chat_id = message.chat.id

    try:
        if user_data[chat_id].get('equipped_weapon'):
            selected_weapon = user_data[chat_id]['equipped_weapon']
            weapon_stats = user_data[chat_id]['AR'][selected_weapon]

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ—Ç–µ—Ä—è–Ω–Ω—ã—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞—Ö
            lost_stats_message = ""
            stat_display_names = {
                'hp': '‚ù§Ô∏è–ó–¥–æ—Ä–æ–≤—å–µ',
                'mana': 'üîÆ–ú–∞–Ω–∞',
                'attack': '‚öîÔ∏è–ê—Ç–∞–∫–∞',
                'defense': 'üõ°Ô∏è–ó–∞—â–∏—Ç–∞',
                'strength': 'üí™–°–∏–ª–∞',
                'agility': 'üèπ–õ–æ–≤–∫–æ—Å—Ç—å',
                'intelligence': 'üìö–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç',
                'crit_chance': 'üéØ–®–∞–Ω—Å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ —É–¥–∞—Ä–∞',
                'crit_damage': 'üí•–£—Ä–æ–Ω –æ—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ —É–¥–∞—Ä–∞'
            }

            for stat, value in weapon_stats.items():
                if stat in stat_display_names:
                    lost_stats_message += f"{stat_display_names[stat]}: -{value}\n"

            user_data[chat_id]['equipped_weapon'] = None
            await update_character_stats(chat_id, selected_weapon, is_equipping=False, item_type='AR')
            await update_power_in_subscription_data(chat_id, user_data[chat_id]['hero_stats'])

            await message.answer(
                f"–í—ã —Å–Ω—è–ª–∏ {selected_weapon}.\n\n"
                f"–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —É–º–µ–Ω—å—à–µ–Ω—ãüìâ:\n\n{lost_stats_message}\n"
                f"‚öî –ë–æ–µ–≤–∞—è –º–æ—â—å: {subscription_data['users'][str(chat_id)].get('power', 0)}"
            )
        else:
            await message.answer("–ù–∞ –≤–∞—Å –Ω–µ –Ω–∞–¥–µ—Ç–æ –æ—Ä—É–∂–∏–µ.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ remove_weapon: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ —Å–Ω—è—Ç—å –æ—Ä—É–∂–∏–µ.")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –æ—Ä—É–∂–∏—è —á–µ—Ä–µ–∑ callback
@dp.callback_query(lambda callback_query: callback_query.data.startswith("equip_weapon_"))
async def equip_weapon_callback(callback_query: types.CallbackQuery):
    chat_id = callback_query.message.chat.id
    selected_weapon = callback_query.data[len("equip_weapon_"):]

    try:
        if user_data[chat_id].get('equipped_weapon'):
            await callback_query.answer("–í—ã —É–∂–µ –Ω–∞–¥–µ–ª–∏ –æ—Ä—É–∂–∏–µ. –°–Ω–∞—á–∞–ª–∞ —Å–Ω–∏–º–∏—Ç–µ —Ç–µ–∫—É—â–µ–µ –æ—Ä—É–∂–∏–µ.", show_alert=True)
            return

        if selected_weapon not in user_data[chat_id].get('AR', {}):
            await callback_query.answer("–û—Ä—É–∂–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –≤–∞—à–µ–º –∞—Ä—Å–µ–Ω–∞–ª–µ.", show_alert=True)
            return

        user_data[chat_id]['equipped_weapon'] = selected_weapon
        await update_character_stats(chat_id, selected_weapon, is_equipping=True, item_type='AR')
        await update_power_in_subscription_data(chat_id, user_data[chat_id]['hero_stats'])

        weapon_stats = user_data[chat_id]['AR'][selected_weapon]

        # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–º–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏
        stats_message = ""
        stat_display_names = {
            'hp': '‚ù§Ô∏è–ó–¥–æ—Ä–æ–≤—å–µ',
            'mana': 'üîÆ–ú–∞–Ω–∞',
            'attack': '‚öîÔ∏è–ê—Ç–∞–∫–∞',
            'defense': 'üõ°Ô∏è–ó–∞—â–∏—Ç–∞',
            'strength': 'üí™–°–∏–ª–∞',
            'agility': 'üèπ–õ–æ–≤–∫–æ—Å—Ç—å',
            'intelligence': 'üìö–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç',
            'crit_chance': 'üéØ–®–∞–Ω—Å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ —É–¥–∞—Ä–∞',
            'crit_damage': 'üí•–£—Ä–æ–Ω –æ—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ —É–¥–∞—Ä–∞'
        }

        for stat, value in weapon_stats.items():
            if stat in stat_display_names:
                stats_message += f"{stat_display_names[stat]}: +{value}\n"

        await callback_query.message.edit_text(
            f"–í—ã –Ω–∞–¥–µ–ª–∏ {selected_weapon}.\n\n"
            f"–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —É–ª—É—á—à–µ–Ω—ãüìà:\n{stats_message}\n"
            f"‚öî –ë–æ–µ–≤–∞—è –º–æ—â—å: {subscription_data['users'][str(chat_id)].get('power', 0)}",
            reply_markup=None
        )
        await callback_query.answer()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ equip_weapon_callback: {e}")
        await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–¥–µ–≤–∞–Ω–∏–∏ –æ—Ä—É–∂–∏—è", show_alert=True)


@dp.message(lambda message: message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
async def back_to_main_menu(message: types.Message):
    await dang_menu(message)


# =======================================–ê—Ä—Å–µ–Ω–∞–ª ‚öîÔ∏è=====================================#


# ======================================–õ–∞–±–∏—Ä–∏–Ω—Ç –î–∏—Ä—É–∫–∞ üß©=====================================#
@dp.message(F.text == "–õ–∞–±–∏—Ä–∏–Ω—Ç –î–∏—Ä—É–∫–∞ üß©")
async def enter_labyrinth(message: types.Message):
    user_id = str(message.from_user.id)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —ç—Ç–∞–∂–∞
    current_floor = subscription_data["users"].get(user_id, {}).get("dungeon_floor", 0)
    if abs(current_floor) < 9:
        await message.answer("–¢—ã –Ω–µ –≥–æ—Ç–æ–≤ –∫ –õ–∞–±–∏—Ä–∏–Ω—Ç—É –î–∏—Ä—É–∫–∞ üß© \n"
                             "Ô∏è–î–æ—Å—Ç–∏–≥–Ω–∏ 9-–æ–≥–æ —ç—Ç–∞–∂–∞ –≤ –ë–∞—à–Ω–∏ –ù–µ–≤–µ–¥–æ–º–æ–≥–æüóº!")
        return

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –∏–≥—Ä—ã
    await message.answer("–í—ã –≥–æ—Ç–æ–≤—ã –≤–æ–π—Ç–∏ –≤ –õ–∞–±–∏—Ä–∏–Ω—Ç –î–∏—Ä—É–∫–∞? –ù–∞–∂–º–∏—Ç–µ '–ù–∞—á–∞—Ç—å!', —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É.")

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞—á–∞—Ç—å"
    buttons = [
        [KeyboardButton(text="–ù–∞—á–∞—Ç—å –õ–∞–±–∏—Ä–∏–Ω—Ç –î–∏—Ä—É–∫–∞ üß©")],
        [KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")],
    ]
    markup = ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)
    await message.answer("–õ–∞–±–∏—Ä–∏–Ω—Ç –î–∏—Ä—É–∫–∞:", reply_markup=markup)


@dp.message(F.text == "–ù–∞—á–∞—Ç—å –õ–∞–±–∏—Ä–∏–Ω—Ç –î–∏—Ä—É–∫–∞ üß©")
async def start_labyrinth(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—á–∞–ª–∞ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è –ø–æ –ª–∞–±–∏—Ä–∏–Ω—Ç—É"""
    try:
        chat_id = message.chat.id
        current_floor_diryk[chat_id] = 0  # –°–±—Ä–æ—Å –ø–æ–∑–∏—Ü–∏–∏
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è user_data, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç

        await message.answer("–í—ã –Ω–∞—á–∞–ª–∏ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ –ø–æ –õ–∞–±–∏—Ä–∏–Ω—Ç—É –î–∏—Ä—É–∫–∞!", reply_markup=ReplyKeyboardRemove())
        dice_msg = await message.answer_dice(emoji='üé≤')
        await asyncio.sleep(3)
        await handle_room_transition(message=message, roll_value=dice_msg.dice.value, bot=bot)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ start_labyrinth: {e}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –ª–∞–±–∏—Ä–∏–Ω—Ç–∞")
        # 2. –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∫–æ–º–Ω–∞—Ç—ã


def find_room_handler(room_name: str):
    """–ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –∏–º–µ–Ω–∏ –∫–æ–º–Ω–∞—Ç—ã –∏ –ø–æ–∏—Å–∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞"""
    handlers = {
        "—Å–æ–∫—Ä–æ–≤–∏—â–Ω–∏—Ü–∞": enter_treasure_room,
        "–º–∏–º–∏–∫": enter_mimik_treasure_room,
        "–±–æ—Å—Å": encounter_boss,
        "–ø—Ä–æ—Ç–∏–≤–Ω–∏–∫": encounter_random_enemy,
        "–≥–æ—Ä–Ω–¥—Ä–µ–≤–Ω–∏—Ö": ancient_forge_handler,
        "–∑–∞–ª–∑–µ—Ä–∫–∞–ª": enter_mirror_hall,
        "–¥–≤–µ—Ä–∏": enter_doors_room,
        "–∫–æ–º–Ω–∞—Ç–∞—Ç–æ—Ä–≥–æ–≤—Ü–∞": enter_trader_room,
        "—Ç–∞–π–Ω–∞—è–±–∏–±–ª–∏–æ—Ç–µ–∫–∞": enter_secret_library,
        "—Å—Ç—Ä–∞–∂–∑–Ω–∞–Ω–∏–π": enter_encounter_knowledge_guardian,
        "–∫–æ–º–Ω–∞—Ç–∞–∑–∞–≥–∞–¥–æ–∫": enter_riddle_room,
        "–∑–∞–ª–æ—á–∏—â–µ–Ω–∏—è": enter_purification_hall,
        "–∑–∞–ª—Å–Ω–æ–≤": enter_dream_hall,
        "–∫–æ–º–Ω–∞—Ç–∞—Å—Ç—Ä–∞—Ö–∞": enter_fear_room,
        "—Ä—É–¥–Ω–∏–∫": mine_with_ores,
        "–∫—Ä–∏–ø—Ç–∞—É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏—è": enter_destruction_crypt,
        "–∞–ª—Ç–∞—Ä—å–∂–µ—Ä—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏": altar_of_sacrifice,
        "–∑–∞–±—Ä–æ—à–µ–Ω–Ω–∞—è–∫–∞–∑–∞—Ä–º–∞": enter_abandoned_barracks
    }
    normalized_name = room_name.lower().replace(" ", "")
    return handlers.get(normalized_name)


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
current_floor_diryk = defaultdict(int)
# –≠—Ç–∞–∂–∏
floors_lab_dir = {
    1: ["–ü—Ä–æ—Ç–∏–≤–Ω–∏–∫"],
    2: ["–ó–∞–ª –ó–µ—Ä–∫–∞–ª"],
    3: ["–†—É–¥–Ω–∏–∫"],
    4: ["–¢–∞–π–Ω–∞—è –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞"],
    5: ["–ë–æ—Å—Å"],  # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–æ
    6: ["–ö–æ–º–Ω–∞—Ç–∞ –¢–æ—Ä–≥–æ–≤—Ü–∞"],
    7: ["–ê–ª—Ç–∞—Ä—å –∂–µ—Ä—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏"],
    8: ["–ì–æ—Ä–Ω –î—Ä–µ–≤–Ω–∏—Ö"],
    9: ["–ú–∏–º–∏–∫"],
    10: ["–ó–∞–ª –æ—á–∏—â–µ–Ω–∏—è"],
    11: ["–°–æ–∫—Ä–æ–≤–∏—â–Ω–∏—Ü–∞"],
    12: ["–ü—Ä–æ—Ç–∏–≤–Ω–∏–∫"],
    13: ["–î–≤–µ—Ä–∏"],
    14: ["–°—Ç—Ä–∞–∂ –ó–Ω–∞–Ω–∏–π"],
    15: ["–ë–æ—Å—Å"],  # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–æ
    16: ["–ö–æ–º–Ω–∞—Ç–∞ –ó–∞–≥–∞–¥–æ–∫"],
    17: ["–ó–∞–ª —Å–Ω–æ–≤"],
    18: ["–ó–∞–±—Ä–æ—à–µ–Ω–Ω–∞—è –∫–∞–∑–∞—Ä–º–∞"],
    19: ["–ú–∏–º–∏–∫"],
    20: ["–†—É–¥–Ω–∏–∫"],
    21: ["–ü—Ä–æ—Ç–∏–≤–Ω–∏–∫"],
    22: ["–ì–æ—Ä–Ω –î—Ä–µ–≤–Ω–∏—Ö"],
    23: ["–°–æ–∫—Ä–æ–≤–∏—â–Ω–∏—Ü–∞"],
    24: ["–ü—Ä–æ—Ç–∏–≤–Ω–∏–∫"],
    25: ["–ë–æ—Å—Å"],  # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–æ
    26: ["–¢–∞–π–Ω–∞—è –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞"],
    27: ["–ö–æ–º–Ω–∞—Ç–∞ –°—Ç—Ä–∞—Ö–∞"],
    28: ["–ó–∞–ª —Å–Ω–æ–≤"],
    29: ["–ê–ª—Ç–∞—Ä—å –∂–µ—Ä—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏"],
    30: ["–ü—Ä–æ—Ç–∏–≤–Ω–∏–∫"],
    31: ["–ú–∏–º–∏–∫"],
    32: ["–î–≤–µ—Ä–∏"],
    33: ["–°–æ–∫—Ä–æ–≤–∏—â–Ω–∏—Ü–∞"],
    34: ["–ó–∞–ª –æ—á–∏—â–µ–Ω–∏—è"],
    35: ["–ë–æ—Å—Å"],  # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–æ
    36: ["–ö–æ–º–Ω–∞—Ç–∞ –¢–æ—Ä–≥–æ–≤—Ü–∞"],
    37: ["–°—Ç—Ä–∞–∂ –ó–Ω–∞–Ω–∏–π"],
    38: ["–ó–∞–ª –ó–µ—Ä–∫–∞–ª"],
    39: ["–ö–æ–º–Ω–∞—Ç–∞ –ó–∞–≥–∞–¥–æ–∫"],
    40: ["–ö—Ä–∏–ø—Ç–∞ –£–Ω–∏—á—Ç–æ–∂–µ–Ω–∏—è"],
}
BASE_DIR = os.path.dirname(os.path.abspath(__file__))
Photo_Diryk = {
    "–°–æ–∫—Ä–æ–≤–∏—â–Ω–∏—Ü–∞": {
        "–°–æ–∫—Ä–æ–≤–∏—â–Ω–∏—Ü–∞1": "Photo/KingDang/LabDiryk/Treasury_Diryk/Treasury_Diryk1.jpg",
        "–°–æ–∫—Ä–æ–≤–∏—â–Ω–∏—Ü–∞2": "Photo/KingDang/LabDiryk/Treasury_Diryk/Treasury_Diryk2.jpg",
        "–°–æ–∫—Ä–æ–≤–∏—â–Ω–∏—Ü–∞3": "Photo/KingDang/LabDiryk/Treasury_Diryk/Treasury_Diryk3.jpg",
        "–°–æ–∫—Ä–æ–≤–∏—â–Ω–∏—Ü–∞4": "Photo/KingDang/LabDiryk/Treasury_Diryk/Treasury_Diryk4.jpg"
    },
    "–ú–∏–º–∏–∫": {
        "–ú–∏–º–∏–∫ üì¶": {"–ú–∏–º–∏–∫ –æ–±—ã—á–Ω—ã–π": "Photo/KingDang/LabDiryk/Mimik_Diryk/Mimik_Diryk.jpg"},
        "–£–Ω–∏–∫–∞–ª—å–Ω—ã–π –ú–∏–º–∏–∫ üßø": {"–ú–∏–º–∏–∫ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π": "Photo/KingDang/LabDiryk/Mimik_Diryk/Mimik_Diryk_Rare.jpg"},
        "–≠–ø–∏—á–µ—Å–∫–∏–π –ú–∏–º–∏–∫ üí∞": {"–ú–∏–º–∏–∫ —ç–ø–∏—á–µ—Å–∫–∏–π": "Photo/KingDang/LabDiryk/Mimik_Diryk/Mimik_Diryk_Epic.jpg"},
        "–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π –ú–∏–º–∏–∫ üíé": {"–ú–∏–º–∏–∫ –ª–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π": "Photo/KingDang/LabDiryk/Mimik_Diryk/Mimik_Diryk_Legend.jpg"},
    },
    "–°—Ç—Ä–∞–∂ –ó–Ω–∞–Ω–∏–π": {
        "–°—Ç—Ä–∞–∂ –ó–Ω–∞–Ω–∏–π1": "Photo/KingDang/LabDiryk/EKG_Diryk/EKG1.jpg",

    },
    "–ö–æ–º–Ω–∞—Ç–∞ —Å—Ç—Ä–∞—Ö–∞": {
        "–ö–æ–º–Ω–∞—Ç–∞ —Å—Ç—Ä–∞—Ö–∞1": "Photo/KingDang/LabDiryk/Fear_Room_Diryk/Fear_Room_Diryk1.jpg",
        "–ö–æ–º–Ω–∞—Ç–∞ —Å—Ç—Ä–∞—Ö–∞2": "Photo/KingDang/LabDiryk/Fear_Room_Diryk/Fear_Room_Diryk2.jpg",
        "–ö–æ–º–Ω–∞—Ç–∞ —Å—Ç—Ä–∞—Ö–∞3": "Photo/KingDang/LabDiryk/Fear_Room_Diryk/Fear_Room_Diryk3.jpg",
        "–ö–æ–º–Ω–∞—Ç–∞ —Å—Ç—Ä–∞—Ö–∞4": "Photo/KingDang/LabDiryk/Fear_Room_Diryk/Fear_Room_Diryk4.jpg",
    },
    "–ó–∞–ª –ó–µ—Ä–∫–∞–ª": {
        "–ó–∞–ª –ó–µ—Ä–∫–∞–ª1": "Photo/KingDang/LabDiryk/Mirror_hall_Diryk/Mirror_hall_Diryk1.jpg",
        "–ó–∞–ª –ó–µ—Ä–∫–∞–ª2": "Photo/KingDang/LabDiryk/Mirror_hall_Diryk/Mirror_hall_Diryk2.jpg"
    },
    "–ó–∞–ª –û—á–∏—â–µ–Ω–∏–µ": {
        "–ó–∞–ª –û—á–∏—â–µ–Ω–∏–µ1": "Photo/KingDang/LabDiryk/Enter_Purification_Hall_Diryk/Enter_Purification_Hall_Diryk1.jpg",
        "–ó–∞–ª –û—á–∏—â–µ–Ω–∏–µ2": "Photo/KingDang/LabDiryk/Enter_Purification_Hall_Diryk/Enter_Purification_Hall_Diryk2.jpg",
        "–ó–∞–ª –û—á–∏—â–µ–Ω–∏–µ3": "Photo/KingDang/LabDiryk/Enter_Purification_Hall_Diryk/Enter_Purification_Hall_Diryk3.jpg",

    },
    "–ì–æ—Ä–Ω –î—Ä–µ–≤–Ω–∏—Ö": {
        "–ì–æ—Ä–Ω –î—Ä–µ–≤–Ω–∏—Ö": "Photo/KingDang/LabDiryk/Ancient_Forge_Diryk/Ancient_Forge_Diryk.jpg",
    },
    "–ë–æ—Å—Å": {
        "–°–∫–µ–ª–µ—Ç –õ–µ–π—Ç–µ–Ω–∞–Ω—Ç": "Photo/KingDang/LabDiryk/Boss_Diryk/Boss_Lieutenant_Skeleton_Diryk.jpg",
        "–ê—Ä—Ö–∏–ª–∏—á": "Photo/KingDang/LabDiryk/Boss_Diryk/Boss_Archilich_Diryk.jpg",
        "–í–∞–º–ø–∏—Ä": "Photo/KingDang/LabDiryk/Boss_Diryk/Boss_Vampire_Diryk.jpg",
        "–ú—É—Ä–ª–∞": "Photo/KingDang/LabDiryk/Boss_Diryk/Boss_Myrla_Diryk.jpg",
    },
    "–î–≤–µ—Ä–∏": {
        "–î–≤–µ—Ä–∏1": "Photo/KingDang/LabDiryk/Door_Diryk/Door_Diryk1.jpg"
    },
    "–ö–æ–º–Ω–∞—Ç–∞ –¢–æ—Ä–≥–æ–≤—Ü–∞": {
        "–ö–æ–º–Ω–∞—Ç–∞ –¢–æ—Ä–≥–æ–≤—Ü–∞1": "Photo/KingDang/LabDiryk/Room_Trader_Diryk/Room_Trader_Diryk1.jpg",
        "–ö–æ–º–Ω–∞—Ç–∞ –¢–æ—Ä–≥–æ–≤—Ü–∞2": "Photo/KingDang/LabDiryk/Room_Trader_Diryk/Room_Trader_Diryk2.jpg",
        "–ö–æ–º–Ω–∞—Ç–∞ –¢–æ—Ä–≥–æ–≤—Ü–∞3": "Photo/KingDang/LabDiryk/Room_Trader_Diryk/Room_Trader_Diryk3.jpg",
        "–ö–æ–º–Ω–∞—Ç–∞ –¢–æ—Ä–≥–æ–≤—Ü–∞4": "Photo/KingDang/LabDiryk/Room_Trader_Diryk/Room_Trader_Diryk4.jpg",
    },
    "–¢–∞–π–Ω–∞—è –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞": {
        "–¢–∞–π–Ω–∞—è –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞1": "Photo/KingDang/LabDiryk/Library_Diryk/Library_Diryk1.jpg",
        "–¢–∞–π–Ω–∞—è –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞2": "Photo/KingDang/LabDiryk/Library_Diryk/Library_Diryk2.jpg"
    },
    "–†—É–¥–Ω–∏–∫": {
        "–†—É–¥–Ω–∏–∫1": "Photo/KingDang/LabDiryk/Mine_With_Ores_Diryk/Mine_With_Ores_Diryk1.jpg",
        "–†—É–¥–Ω–∏–∫2": "Photo/KingDang/LabDiryk/Mine_With_Ores_Diryk/Mine_With_Ores_Diryk2.jpg",
        "–†—É–¥–Ω–∏–∫3": "Photo/KingDang/LabDiryk/Mine_With_Ores_Diryk/Mine_With_Ores_Diryk3.jpg",
    },
    "–ê–ª—Ç–∞—Ä—å –ñ–µ—Ä—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏": {
        "–ê–ª—Ç–∞—Ä—å –ñ–µ—Ä—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏1": "Photo/KingDang/LabDiryk/Altar_of_Sacrifice_Diryk/Altar_of_Sacrifice_Diryk1.jpg",
        "–ê–ª—Ç–∞—Ä—å –ñ–µ—Ä—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏2": "Photo/KingDang/LabDiryk/Altar_of_Sacrifice_Diryk/Altar_of_Sacrifice_Diryk2.jpg",
        "–ê–ª—Ç–∞—Ä—å –ñ–µ—Ä—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏3": "Photo/KingDang/LabDiryk/Altar_of_Sacrifice_Diryk/Altar_of_Sacrifice_Diryk3.jpg",
        "–ê–ª—Ç–∞—Ä—å –ñ–µ—Ä—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏4": "Photo/KingDang/LabDiryk/Altar_of_Sacrifice_Diryk/Altar_of_Sacrifice_Diryk4.jpg",
    },
    "–ó–∞–ª –°–Ω–æ–≤": {
        "–°–æ–Ω1": "Photo/KingDang/LabDiryk/Enter_Dream_Hall_Diryk/Enter_Dream_Hall_Diryk1.jpg",
        "–°–æ–Ω2": "Photo/KingDang/LabDiryk/Enter_Dream_Hall_Diryk/Enter_Dream_Hall_Diryk1.jpg",
        "–°–æ–Ω3": "Photo/KingDang/LabDiryk/Enter_Dream_Hall_Diryk/Enter_Dream_Hall_Diryk1.jpg",
    },
    "–ö–æ–º–Ω–∞—Ç–∞ –∑–∞–≥–∞–¥–æ–∫": {
        "–ö–æ–º–Ω–∞—Ç–∞ –∑–∞–≥–∞–¥–æ–∫1": "Photo/KingDang/LabDiryk/Riddle_Room_Diryk/Riddle_Room_Diryk1.jpg",

    },
    "–†–∞–Ω–¥–æ–º–Ω—ã–π –≤—Ä–∞–≥": {
        "–°–∫–µ–ª–µ—Ç ": {
            "–°–∫–µ–ª–µ—Ç –†—è–¥–æ–≤–æ–π –í–æ–∏–Ω": "Photo/KingDang/LabDiryk/Random_Enemy_Diryk/Random_Skeleton_Diryk/Skeleton_Warrior_1.jpg",
            "–°–∫–µ–ª–µ—Ç –í–æ–∏–Ω": "Photo/KingDang/LabDiryk/Random_Enemy_Diryk/Random_Skeleton_Diryk/Skeleton_Warrior_2.jpg",
            "–°–∫–µ–ª–µ—Ç –õ—É—á–Ω–∏–∫": "Photo/KingDang/LabDiryk/Random_Enemy_Diryk/Random_Skeleton_Diryk/Skeleton_Archer_1.jpg",
            "–°–∫–µ–ª–µ—Ç –ú–∞–≥ –û–≥–Ω—è": "Photo/KingDang/LabDiryk/Random_Enemy_Diryk/Random_Skeleton_Diryk/Skeleton_Mage_1.jpg",
            "–°–∫–µ–ª–µ—Ç –ú–∞–≥": "Photo/KingDang/LabDiryk/Random_Enemy_Diryk/Random_Skeleton_Diryk/Skeleton_Mage_2.jpg",
        },
        "–ì–æ–±–ª–∏–Ω": {
            "–ì–æ–±–ª–∏–Ω –í–æ–∏–Ω": "Photo/KingDang/LabDiryk/Random_Enemy_Diryk/Random_Goblin_Diryk/Goblin_Warrior_1.jpg",
            "–ì–æ–±–ª–∏–Ω –õ—É—á–Ω–∏–∫": "Photo/KingDang/LabDiryk/Random_Enemy_Diryk/Random_Goblin_Diryk/Goblin_Archer_1.jpg",
        },
        "–ì–∏–≥–∞–Ω—Ç—Å–∫–∏–π –ø–∞—É–∫": {
            "–ì–∏–≥–∞–Ω—Ç—Å–∫–∏–π –ß–µ—Ä–Ω—ã–π –ü–∞—É–∫": "Photo/KingDang/LabDiryk/Random_Enemy_Diryk/Random_Spider_Diryk/Spider_1.jpg",
            "–ì–∏–≥–∞–Ω—Ç—Å–∫–∏–π –Ø–¥–æ–≤–∏—Ç–æ –ß–µ—Ä–Ω—ã–π –ü–∞—É–∫": "Photo/KingDang/LabDiryk/Random_Enemy_Diryk/Random_Spider_Diryk/Spider_2.jpg",
            "–ì–∏–≥–∞–Ω—Ç—Å–∫–∏–π –†—ã–∂–∏–π –ü–∞—É–∫": "Photo/KingDang/LabDiryk/Random_Enemy_Diryk/Random_Spider_Diryk/Spider_3.jpg",
            "–ì–∏–≥–∞–Ω—Ç—Å–∫–∏–π –Ø–¥–æ–≤–∏—Ç—ã–π –ü–∞—É–∫": "Photo/KingDang/LabDiryk/Random_Enemy_Diryk/Random_Spider_Diryk/Spider_4.jpg",
            "–ì–∏–≥–∞–Ω—Ç—Å–∫–∏–π –ü–∞—É–∫": "Photo/KingDang/LabDiryk/Random_Enemy_Diryk/Random_Spider_Diryk/Spider_5.jpg",

        },
        "–¢—Ä–µ–Ω—Ç": {
            "–¢—Ä–µ–Ω—Ç –í–æ–∏–Ω": "Photo/KingDang/LabDiryk/Random_Enemy_Diryk/Random_Trent_Diryk/Trent_Warrior_1.jpg",
            "–¢—Ä–µ–Ω—Ç –¢–∞–Ω–∫": "Photo/KingDang/LabDiryk/Random_Enemy_Diryk/Random_Trent_Diryk/Trent_Warrior_2.jpg",

        },
        "–ö–æ–±–æ–ª—å–¥": {
            "–ö–æ–±–∞–ª—å–¥ –í–æ–∏–Ω": "Photo/KingDang/LabDiryk/Random_Enemy_Diryk/Random_Kobalt_Diryk/Kobalt_Warrior_1.jpg",
            "–ö–æ–±–∞–ª—å–¥ –õ—É—á–Ω–∏–∫": "Photo/KingDang/LabDiryk/Random_Enemy_Diryk/Random_Kobalt_Diryk/Kobalt_Archer_1.jpg",
        },
        "–î—Ä–∞—É–≥—Ä": {
            "–î—Ä–∞—É–≥—Ä –†—è–¥–æ–≤–æ–π –í–æ–∏–Ω": "Photo/KingDang/LabDiryk/Random_Enemy_Diryk/Random_Draygr_Diryk/Draygr_Warrior_1.jpg",
            "–î—Ä–∞—É–≥—Ä –°–∫—Ä—ã—Ç–Ω–∏–∫": "Photo/KingDang/LabDiryk/Random_Enemy_Diryk/Random_Draygr_Diryk/Draygr_Warrior_2.jpg",
            "–î—Ä–∞—É–≥—Ä –¢–∞–Ω–∫": "Photo/KingDang/LabDiryk/Random_Enemy_Diryk/Random_Draygr_Diryk/Draygr_Warrior_3.jpg",

        },
    },
    "–ó–∞–±—Ä–æ—à–µ–Ω–Ω–∞—è –ö–∞–∑–∞—Ä–º–∞": {
        "–ó–∞–±—Ä–æ—à–µ–Ω–Ω–∞—è –ö–∞–∑–∞—Ä–º–∞1": "Photo/KingDang/LabDiryk/Abandoned_Barracks_Diryk/Abandoned_Barracks1.jpg",
        "–ó–∞–±—Ä–æ—à–µ–Ω–Ω–∞—è –ö–∞–∑–∞—Ä–º–∞2": "Photo/KingDang/LabDiryk/Abandoned_Barracks_Diryk/Abandoned_Barracks2.jpg",

    },
    "–ö—Ä–∏–ø—Ç–∞ –£–Ω–∏—á—Ç–æ–∂–µ–Ω–∏—è": {
        "–ö—Ä–∏–ø—Ç–∞ –£–Ω–∏—á—Ç–æ–∂–µ–Ω–∏—è1": "Photo/KingDang/LabDiryk/Enter_Destruction_Crypt_Diryk/Enter_Destruction_Crypt_Diryk1.jpg",
        "–ö—Ä–∏–ø—Ç–∞ –£–Ω–∏—á—Ç–æ–∂–µ–Ω–∏—è2": "Photo/KingDang/LabDiryk/Enter_Destruction_Crypt_Diryk/Enter_Destruction_Crypt_Diryk2.jpg",
        "–ö—Ä–∏–ø—Ç–∞ –£–Ω–∏—á—Ç–æ–∂–µ–Ω–∏—è3": "Photo/KingDang/LabDiryk/Enter_Destruction_Crypt_Diryk/Enter_Destruction_Crypt_Diryk3.jpg",

    },

}


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∞ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø—É—Ç—å
@dp.callback_query(lambda c: c.data == "continue_path")
async def continue_path(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –ø—É—Ç–∏"""
    try:
        user_id = callback.from_user.id
        chat_id = callback.message.chat.id

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–∞
        if user_id not in user_data:
            await callback.answer("–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!", show_alert=True)
            return

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞
        hero_stats = user_data[user_id]['hero_stats']
        max_hp = hero_stats['hp_max']
        current_hp = hero_stats['hp']

        # –£–¥–∞–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        try:
            await callback.message.edit_reply_markup(reply_markup=None)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã: {e}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ–∫–ª—è—Ç–∏—è
        curse_info = user_data[user_id].get('curse_info', {})
        if curse_info and curse_info.get('active', False):
            hp_loss = curse_info.get('hp_loss_per_floor', 0)
            hero_stats['hp'] = max(0, current_hp - hp_loss)

            await callback.message.answer(
                f"üåÄ –ü—Ä–æ–∫–ª—è—Ç–∏–µ –æ—Ç–Ω–∏–º–∞–µ—Ç {hp_loss} HP!\n"
                f"‚ù§Ô∏è –û—Å—Ç–∞–ª–æ—Å—å HP: {hero_stats['hp']}/{max_hp}"
            )

            if hero_stats['hp'] <= 0:
                await callback.message.answer(
                    "‚ò†Ô∏è –í—ã –ø–æ—Ç–µ—Ä—è–ª–∏ —Å–æ–∑–Ω–∞–Ω–∏–µ –æ—Ç –ø—Ä–æ–∫–ª—è—Ç–∏—è!",
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text="üö™ –í—ã–π—Ç–∏ –≤ –ª–∞–≥–µ—Ä—å", callback_data="exit_to_camp")]
                    ])
                )
                return

        # –ë—Ä–æ—Å–æ–∫ –∫—É–±–∏–∫–∞
        roll_msg = await callback.message.answer("üé≤ –ë—Ä–æ—Å–∞–µ–º –∫—É–±–∏–∫...")
        dice_msg = await callback.message.answer_dice(emoji='üé≤')
        await asyncio.sleep(3)

        try:
            await bot.delete_message(chat_id, roll_msg.message_id)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–µ—Ä–µ—Ö–æ–¥ (—É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ç–∞–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã)
        await handle_room_transition(
            message=callback.message,
            roll_value=dice_msg.dice.value,
            bot=bot
        )

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ continue_path: {e}", exc_info=True)
        await callback.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–∏", show_alert=True)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∞ —Ö–ø<0

@dp.callback_query(lambda c: c.data == "exit_maze")
async def exit_maze_handler(callback: types.CallbackQuery):
    user_id = callback.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–∞
    if user_id not in user_data or 'hero_stats' not in user_data[user_id]:
        await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!", show_alert=True)
        return

    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≥–µ—Ä–æ—è
    hero_stats = user_data[user_id]['hero_stats']

    # –ü–æ–ª–Ω–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ HP –∏ –º–∞–Ω—ã
    hero_stats['hp'] = hero_stats['hp_max']
    hero_stats['mana'] = hero_stats['mana_max']

    try:
        # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
        await callback.message.edit_text(
            "üö™ –í—ã –≤—ã—à–ª–∏ –∏–∑ –ª–∞–±–∏—Ä–∏–Ω—Ç–∞ –∏ –ø–æ–ª–Ω–æ—Å—Ç—å—é –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ —Å–∏–ª—ã!\n\n"
            f"‚ù§Ô∏è HP: {hero_stats['hp']}/{hero_stats['hp_max']}\n"
            f"üîµ Mana: {hero_stats['mana']}/{hero_stats['mana_max']}"
        )
    except Exception as e:
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await callback.message.answer(
            "üö™ –í—ã –≤—ã—à–ª–∏ –∏–∑ –ª–∞–±–∏—Ä–∏–Ω—Ç–∞ –∏ –ø–æ–ª–Ω–æ—Å—Ç—å—é –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ —Å–∏–ª—ã!\n\n"
            f"‚ù§Ô∏è HP: {hero_stats['hp']}/{hero_stats['hp_max']}\n"
            f"üîµ Mana: {hero_stats['mana']}/{hero_stats['mana_max']}"
        )
        # –£–¥–∞–ª—è–µ–º callback-—Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
        try:
            await callback.message.delete()
        except:
            pass

    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∞
    await asyncio.sleep(1)
    save_data()

    # –ü–µ—Ä–µ—Ö–æ–¥ –≤ –º–µ–Ω—é –ª–∞–±–∏—Ä–∏–Ω—Ç–∞
    await dang_menu(callback.message)


# ==================== –û–ë–†–ê–ë–û–¢–ö–ê –ü–ï–†–ï–•–û–î–û–í ====================


async def handle_room_transition(message: types.Message, roll_value: int, bot: Bot, roll_msg_id=None):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ –º–µ–∂–¥—É –∫–æ–º–Ω–∞—Ç–∞–º–∏ —Å —É—á–µ—Ç–æ–º –ø—Ä–æ–∫–ª—è—Ç–∏–π –∏ –≥—Ä–∞–Ω–∏—Ü –ª–∞–±–∏—Ä–∏–Ω—Ç–∞"""
    chat_id = message.chat.id
    user_id = message.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - –∏—Å–ø–æ–ª—å–∑—É–µ–º user_id
    user_stats = user_data[user_id]['hero_stats']

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —ç—Ç–∞–∂–µ–π –∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –≥—Ä–∞–Ω–∏—Ü—ã
    all_floors = sorted(floors_lab_dir.keys())
    if not all_floors:
        await message.answer("‚ö†Ô∏è –õ–∞–±–∏—Ä–∏–Ω—Ç –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!")
        return

    min_floor = all_floors[0]
    max_floor = all_floors[-1]

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –ø–æ–∑–∏—Ü–∏—é (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é - —Å—Ç–∞—Ä—Ç–æ–≤–∞—è –∫–æ–º–Ω–∞—Ç–∞)
    current_floor = current_floor_diryk.get(chat_id, min_floor)
    new_floor = current_floor + roll_value

    # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –≤—ã—Ö–æ–¥–∞ –∑–∞ –≥—Ä–∞–Ω–∏—Ü—ã –ª–∞–±–∏—Ä–∏–Ω—Ç–∞
    if new_floor > max_floor:
        new_floor = max_floor
        boundary_msg = "üèÅ –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –∫–æ–Ω—Ü–∞ –ª–∞–±–∏—Ä–∏–Ω—Ç–∞!"
    elif new_floor < min_floor:
        new_floor = min_floor
        boundary_msg = "üîô –í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –∫ –Ω–∞—á–∞–ª—É –ª–∞–±–∏—Ä–∏–Ω—Ç–∞!"
    else:
        boundary_msg = None

    # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é
    current_floor_diryk[chat_id] = new_floor

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ–º–Ω–∞—Ç—ã
    room_data = floors_lab_dir.get(new_floor, ["–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–Ω–∞—Ç–∞", None])
    room_name = room_data[0]

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–µ—Ä–µ—Ö–æ–¥–µ
    transition_text = (
        f"üé≤ –í—ã–ø–∞–ª–æ: {roll_value}\n"
        f"üö™ –ö–æ–º–Ω–∞—Ç–∞ {new_floor}: {room_name}\n"
        f"{boundary_msg if boundary_msg else ''}"
    ).strip()

    # –û—Ç–ø—Ä–∞–≤–∫–∞/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    try:
        if roll_msg_id:
            await bot.edit_message_text(
                text=transition_text,
                chat_id=chat_id,
                message_id=roll_msg_id
            )
        else:
            await message.answer(transition_text)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await message.answer(transition_text)

    # –ü–æ–∏—Å–∫ –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∫–æ–º–Ω–∞—Ç—ã
    handler = find_room_handler(room_name)
    if handler:
        await handler(message, bot)
    else:
        await message.answer(f"–ö–æ–º–Ω–∞—Ç–∞ '{room_name}' –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")


nagrada_laba = {
    'gold': lambda: random.randint(100, 300),

    'materials': {
        '—Å—Ç–∞–ª—å': lambda: random.randint(1, 10),
        '–∂–µ–ª–µ–∑–æ': lambda: random.randint(1, 10),
        '–∫–æ–∂–∞': lambda: random.randint(1, 10),
        '–∫–æ—Å—Ç—è–Ω–∞—è —Å—Ç–∞–ª—å': lambda: random.randint(1, 10),
        '—Ñ–∞–Ω—Ç–æ–º–Ω—ã–π —à–µ–ª–∫': lambda: random.randint(1, 10),
        '—Ç–µ–Ω–µ–≤–æ–π —Å–∞–≤–∞–Ω': lambda: random.randint(1, 10)
    },

    'weapon': {
        # –î–µ—Ä–µ–≤—è–Ω–Ω–æ–µ –æ—Ä—É–∂–∏–µ
        "–î–µ—Ä–µ–≤—è–Ω–Ω—ã–π –º–µ—á": {
            'hp': 0, 'mana': 0, 'attack': 5, 'defense': 0, 'strength': 0, 'agility': 0, 'intelligence': 0,
            'crit_chance': 0.01, 'crit_damage': 0.05,
        },
        "–î–µ—Ä–µ–≤—è–Ω–Ω–æ–µ –∫–æ–ø—å–µ": {
            'hp': 0, 'mana': 0, 'attack': 0, 'defense': 0, 'strength': 0, 'agility': 1, 'intelligence': 0,
            'crit_chance': 0.01, 'crit_damage': 0.05,
        },
        "–î–µ—Ä–µ–≤—è–Ω–Ω–æ–µ –ø–æ—Å–æ—Ö": {
            'hp': 0, 'mana': 2, 'attack': 5, 'defense': 0, 'strength': 0, 'agility': 0, 'intelligence': 1,
            'crit_chance': 0, 'crit_damage': 0,
        },
        "–î–µ—Ä–µ–≤—è–Ω–Ω—ã–π –¥–≤—É—Ä—É—á–Ω—ã–π –º–µ—á": {
            'hp': 0, 'mana': 0, 'attack': 8, 'defense': 1, 'strength': 2, 'agility': 0, 'intelligence': 0,
            'crit_chance': 0, 'crit_damage': 0,
        },
        "–î–µ—Ä–µ–≤—è–Ω–Ω—ã–π –ª—É–∫": {
            'hp': 0, 'mana': 0, 'attack': 5, 'defense': 0, 'strength': 0, 'agility': 2, 'intelligence': 0,
            'crit_chance': 0.03, 'crit_damage': 0.05,
        },

        # –ñ–µ–ª–µ–∑–Ω–æ–µ –æ—Ä—É–∂–∏–µ
        "–ñ–µ–ª–µ–∑–Ω—ã–π –º–µ—á": {
            'hp': 0, 'mana': 0, 'attack': 15, 'defense': 0, 'strength': 2, 'agility': 1, 'intelligence': 1,
            'crit_chance': 0.04, 'crit_damage': 0.05,
        },
        "–ñ–µ–ª–µ–∑–Ω—ã–π —Ç–æ–ø–æ—Ä": {
            'hp': 10, 'mana': 0, 'attack': 10, 'defense': 0, 'strength': 2, 'agility': 1, 'intelligence': 1,
            'crit_chance': 0.04, 'crit_damage': 0.05,
        },
        "–ñ–µ–ª–µ–∑–Ω—ã–π –∫–æ–ø—å–µ": {
            'hp': 0, 'mana': 0, 'attack': 15, 'defense': 0, 'strength': 1, 'agility': 2, 'intelligence': 0,
            'crit_chance': 0.03, 'crit_damage': 0.01,
        },

    },

    'armor': {
        "–ü–ª–∞—â –ª–µ–≥–∫–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞": {
            'hp': 0, 'mana': 10, 'attack': -2, 'defense': 5, 'strength': 0, 'agility': 3, 'intelligence': 1,
            'crit_chance': 0.00, 'crit_damage': 0.00,
        },
        "–û–¥–µ—è–Ω–∏–µ —É—á–µ–Ω–∏–∫–∞ –º–∞–≥–∞": {
            'hp': 5, 'mana': 25, 'attack': -5, 'defense': 8, 'strength': 0, 'agility': -1, 'intelligence': 3,
            'crit_chance': 0.00, 'crit_damage': 0.00,
        },
        "–ü–ª–∞—â –ª—É–Ω–Ω–æ–π –ø—ã–ª–∏": {
            'hp': 0, 'mana': 15, 'attack': -5, 'defense': 6, 'strength': 0, 'agility': 2, 'intelligence': 2,
            'crit_chance': 0.00, 'crit_damage': 0.00,
        },
        "–ü–ª–∞—â –ª—É–Ω–Ω–æ–≥–æ —Å–≤–µ—Ç–∞": {
            'hp': 0, 'mana': 20, 'attack': -5, 'defense': 4, 'strength': 0, 'agility': 1, 'intelligence': 4,
            'crit_chance': 0.00, 'crit_damage': 0.00,
        },
        "–ö–æ–∂–∞–Ω–∞—è –±—Ä–æ–Ω—è": {
            'hp': 10, 'mana': 5, 'attack': 0, 'defense': 5, 'strength': 1, 'agility': 1, 'intelligence': 1,
            'crit_chance': 0.00, 'crit_damage': 0.00,

        }}
}


# ====================–õ–ê–ë–ê –ù–ê–ì–†–ê–î–ê  ====================# ====================–õ–ê–ë–ê –ù–ê–ì–†–ê–î–ê  ====================
@dp.message(Command("debug_congratulate"))
async def debug_congratulate_user(message: Message):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ congratulate_user"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º chat_id (user_id) –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
        chat_id = message.chat.id
        user_id = message.from_user.id
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ user_data
        if user_id not in user_data:
            await message.answer("‚ùå –û—à–∏–±–∫–∞: –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–∞—á–Ω–∏—Ç–µ –∏–≥—Ä—É —Å–Ω–∞—á–∞–ª–∞.")
            return

        # –í—ã–∑—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é —Å –Ω–∞–≥—Ä–∞–¥–∞–º–∏
        await congratulate_user(chat_id)

        await message.answer("‚úÖ –§—É–Ω–∫—Ü–∏—è congratulate_user —É—Å–ø–µ—à–Ω–æ –≤—ã–∑–≤–∞–Ω–∞! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–≤–æ–∏ –Ω–∞–≥—Ä–∞–¥—ã.")

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ debug_congratulate: {e}")
        await message.answer(f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")


async def congratulate_user(chat_id):
    """–ü–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∫–æ–º–Ω–∞—Ç—ã —Å —Ä–∞–Ω–¥–æ–º–Ω—ã–º–∏ –Ω–∞–≥—Ä–∞–¥–∞–º–∏"""
    import random

    user_id = str(chat_id)  # –ü—Ä–∏–≤–æ–¥–∏–º –∫ —Å—Ç—Ä–æ–∫–µ, —Ç–∞–∫ –∫–∞–∫ –≤ JSON –∫–ª—é—á–∏ —Å—Ç—Ä–æ–∫–æ–≤—ã–µ

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–∞–≥—Ä–∞–¥
    gold = random.randint(100, 400)
    materials = random.sample(list(nagrada_laba['materials'].keys()), 3)
    material_amounts = {mat: random.randint(1, 10) for mat in materials}

    # –í—ã–±–æ—Ä —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞
    item_type = random.choice(['weapon', 'armor'])
    item_name = random.choice(list(nagrada_laba[item_type].keys()))
    item_stats = nagrada_laba[item_type][item_name]

    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–≥—Ä–∞–¥—ã –≤ user_data
    user_data[user_id]['gold'] += gold
    for mat, amount in material_amounts.items():
        user_data[user_id]['material_user'][mat] = user_data[user_id]['material_user'].get(mat, 0) + amount

    if item_type == 'weapon':
        user_data[user_id]['AR'][item_name] = item_stats
    else:
        user_data[user_id]['BR'][item_name] = item_stats

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –≤ subscription_data.json (–∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ –≤–∞—à–µ–º—É –ø—Ä–∏–º–µ—Ä—É —Å dungeon_floor)
    try:
        with open(SUBSCRIPTION_DATA_FILE, "r", encoding='utf-8') as f:
            subscription_data = json.load(f)
    except (FileNotFoundError, json.JSONDecodeError):
        subscription_data = {"users": {}, "authorized_users": []}

    # –î–æ–±–∞–≤–ª—è–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ —Ç–æ—á–Ω–æ —Ç–∞–∫ –∂–µ, –∫–∞–∫ dungeon_floor –≤ –≤–∞—à–µ–º –ø—Ä–∏–º–µ—Ä–µ
    if user_id not in subscription_data["users"]:
        subscription_data["users"][user_id] = {}
    subscription_data["users"][user_id]["Labirint_diryka"] = subscription_data["users"][user_id].get("Labirint_diryka",
                                                                                                     0) + 1

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
    with open(SUBSCRIPTION_DATA_FILE, "w", encoding='utf-8') as f:
        json.dump(subscription_data, f, indent=4, ensure_ascii=False)

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    materials_text = "\n".join([f"‚Ä¢ {amount} {mat}" for mat, amount in material_amounts.items()])
    completions = subscription_data["users"][user_id].get("Labirint_diryka", 0)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
    save_data()

    await bot.send_message(
        chat_id,
        f"üéâ –ü–û–ë–ï–î–ê! –í—ã –ø—Ä–æ—à–ª–∏ –≤–µ—Å—å –õ–∞–±–∏—Ä–∏–Ω—Ç –î–∏—Ä—É–∫–∞! üéä\n"

        f"üèÜ –í–∞—à–∏ –Ω–∞–≥—Ä–∞–¥—ã:\n"
        f"‚Ä¢ {gold} –∑–æ–ª–æ—Ç–∞ üí∞\n"
        f"–ú–∞—Ç–µ—Ä–∏–∞–ª—ã:\n{materials_text}\n"
        f"‚Ä¢ {item_name} ({'–æ—Ä—É–∂–∏–µ' if item_type == 'weapon' else '–±—Ä–æ–Ω—è'})",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üö™ –í—ã–π—Ç–∏ –∏–∑ –ª–∞–±–∏—Ä–∏–Ω—Ç–∞", callback_data="exit_maze")]
        ]))


# ====================–õ–ê–ë–ê –ù–ê–ì–†–ê–î–ê  ====================# ====================–õ–ê–ë–ê –ù–ê–ì–†–ê–î–ê  ====================
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–í–µ—Ä–Ω—É—Ç—å—Å—è"
@dp.message(F.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è")
async def go_back_to_dang_menu_options(message: types.Message):
    chat_id = message.chat.id

    # –£–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –º–µ–Ω—é", reply_markup=ReplyKeyboardRemove())

    # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é
    await dang_menu(callback.message)


# ======================================–õ–∞–±–∏—Ä–∏–Ω—Ç –î–∏—Ä—É–∫–∞ üß©=====================================#


# =======================—Å–æ–∫—Ä–æ–≤–∏—â–Ω–∏—Ü–∞===============–°–æ–∫—Ä–æ–≤–∏—â–Ω–∏—Ü–∞=====================================#
available_recipes = {

}
Treasury_Diryk = {
    "recipet_treasure": {
        "recipet_weapon_treasuer": {
            "–†–µ—Ü–µ–ø—Ç-–î–µ—Ä–µ–≤—è–Ω–Ω–æ–µ –∫–æ–ø—å–µ": 1,
            "–†–µ—Ü–µ–ø—Ç-–î–µ—Ä–µ–≤—è–Ω–Ω—ã–π –º–µ—á": 1,
            "–†–µ—Ü–µ–ø—Ç-–î–µ—Ä–µ–≤—è–Ω–Ω—ã–π –ø–æ—Å–æ—Ö": 1,
            "–†–µ—Ü–µ–ø—Ç-–î–µ—Ä–µ–≤—è–Ω–Ω—ã–π –¥–≤—É—Ä—É—á–Ω—ã–π –º–µ—á": 1,
            "–†–µ—Ü–µ–ø—Ç-–î–µ—Ä–µ–≤—è–Ω–Ω—ã–π –ª—É–∫": 1,
            "–†–µ—Ü–µ–ø—Ç-–ñ–µ–ª–µ–∑–Ω–æ–µ –∫–æ–ø—å–µ": 1,
            "–†–µ—Ü–µ–ø—Ç-–ñ–µ–ª–µ–∑–Ω—ã–π –º–µ—á": 1,
            "–†–µ—Ü–µ–ø—Ç-–ñ–µ–ª–µ–∑–Ω—ã–π —Ç–æ–ø–æ—Ä": 1,
            "–†–µ—Ü–µ–ø—Ç-–ñ–µ–ª–µ–∑–Ω—ã–π –¥–≤—É—Ä—É—á–Ω—ã–π –º–µ—á": 1,
            "–†–µ—Ü–µ–ø—Ç-–ñ–µ–ª–µ–∑–Ω—ã–π –ª—É–∫": 1,
            "–†–µ—Ü–µ–ø—Ç-–ñ–µ–ª–µ–∑–Ω—ã–π –∫–∏–Ω–∂–∞–ª": 1,
            "–†–µ—Ü–µ–ø—Ç-–ñ–µ–ª–µ–∑–Ω—ã–π –∞—Ä–±–∞–ª–µ—Ç": 1,
            "–†–µ—Ü–µ–ø—Ç-–ñ–µ–ª–µ–∑–Ω–∞—è –ø–∞–ª–∏—Ü–∞": 1,
            "–†–µ—Ü–µ–ø—Ç-–ñ–µ–ª–µ–∑–Ω–∞—è –ø–∞–ª–∞—à": 1,
            "–†–µ—Ü–µ–ø—Ç-–ñ–µ–ª–µ–∑–Ω–∞—è –±—É–ª–∞–≤–∞": 1,
            "–†–µ—Ü–µ–ø—Ç-–ñ–µ–ª–µ–∑–Ω–∞—è —Å–∞–±–ª—è": 1,
            "–†–µ—Ü–µ–ø—Ç-–ñ–µ–ª–µ–∑–Ω—ã–π –±–æ–µ–≤–æ–π –º–æ–ª–æ—Ç": 1,
            "–†–µ—Ü–µ–ø—Ç-–°—Ç–∞–ª—å–Ω–æ–π –º–µ—á": 1,
            "–†–µ—Ü–µ–ø—Ç-–°—Ç–∞–ª—å–Ω–æ–µ –∫–æ–ø—å–µ": 1,
            "–†–µ—Ü–µ–ø—Ç-–°—Ç–∞–ª—å–Ω–æ–π –¥–≤—É—Ä—É—á–Ω—ã–π –º–µ—á": 1,
            "–†–µ—Ü–µ–ø—Ç-–°—Ç–∞–ª—å–Ω–æ–π –∫–∏–Ω–∂–∞–ª": 1,
            "–†–µ—Ü–µ–ø—Ç-–°—Ç–∞–ª—å–Ω–æ–π –∞—Ä–±–∞–ª–µ—Ç": 1,
            "–†–µ—Ü–µ–ø—Ç-–°—Ç–∞–ª—å–Ω–æ–π –±–æ–µ–≤–æ–π –º–æ–ª–æ—Ç": 1,
            "–†–µ—Ü–µ–ø—Ç-–°—Ç–∞–ª—å–Ω–∞—è –∫–∞—Ç–∞–Ω–∞": 1,
            "–†–µ—Ü–µ–ø—Ç-–ú–∏—Ñ—Ä–∏–ª–æ–≤—ã–π –ø–æ—Å–æ—Ö": 1,
            "–†–µ—Ü–µ–ø—Ç-–ú–∏—Ñ—Ä–∏–ª–æ–≤—ã–π –º–µ—á": 1,
            "–†–µ—Ü–µ–ø—Ç-–ú–∏—Ñ—Ä–∏–ª–æ–≤—ã–π –ª—É–∫": 1,
            "–†–µ—Ü–µ–ø—Ç-–ú–∏—Ñ—Ä–∏–ª–æ–≤—ã–π –∫–∏–Ω–∂–∞–ª": 1,
            "–†–µ—Ü–µ–ø—Ç-–ú–∏—Ñ—Ä–∏–ª–æ–≤–∞—è –Ω–∞–≥–∏–Ω–∞—Ç–∞": 1

        },
        "recipet_armor_treasuer": {
            "–†–µ—Ü–µ–ø—Ç-–ö–æ–∂–∞–Ω–∞—è –±—Ä–æ–Ω—è": 1,
            "–†–µ—Ü–µ–ø—Ç-–ñ–µ–ª–µ–∑–Ω–∞—è –∫–∏—Ä–∞—Å–∞": 1,
            "–†–µ—Ü–µ–ø—Ç-–ñ–µ–ª–µ–∑–Ω—ã–µ –ª–∞—Ç—ã": 1,
            "–†–µ—Ü–µ–ø—Ç-–ñ–µ–ª–µ–∑–Ω–∞—è –∫–æ–ª—å—á—É–≥–∞": 1,

            "–†–µ—Ü–µ–ø—Ç-–ú–∏—Ñ—Ä–∏–ª–æ–≤—ã–π –¥–æ—Å–ø–µ—Ö": 1,

            "–†–µ—Ü–µ–ø—Ç-–ü–ª–∞—â –ª–µ–≥–∫–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞": 1,
            "–†–µ—Ü–µ–ø—Ç-–û–¥–µ—è–Ω–∏–µ —É—á–µ–Ω–∏–∫–∞ –º–∞–≥–∞": 1,
            "–†–µ—Ü–µ–ø—Ç-–û–¥–µ—è–Ω–∏–µ —Å—Ç–∞—Ä–æ–≥–æ –º–∞–≥–∞": 1,
            "–†–µ—Ü–µ–ø—Ç-–ë–ª–∞—Ö–∞–Ω —Ü–∏–Ω—Ç–∞": 1,
            "–†–µ—Ü–µ–ø—Ç-–ü–ª–∞—â –ª—É–Ω–Ω–æ–π –ø—ã–ª–∏": 1,
            "–†–µ—Ü–µ–ø—Ç-–ü–ª–∞—â –ª—É–Ω–Ω–æ–≥–æ —Å–≤–µ—Ç–∞": 1,
            "–†–µ—Ü–µ–ø—Ç-–ú–∞–Ω—Ç–∏—è –ø—ã–ª–∞—é—â–µ–π –º–∞–≥–º—ã": 1,
            "–†–µ—Ü–µ–ø—Ç-–ú–∞–Ω—Ç–∏—è –≥—Ä–æ–∑–æ–≤–æ–≥–æ —à—ë–ø–æ—Ç–∞": 1,
            "–†–µ—Ü–µ–ø—Ç-–û–¥–µ—è–Ω–∏–µ –≤–µ—Ç—Ä–∞": 1,
            "–†–µ—Ü–µ–ø—Ç-–û–¥–µ—è–Ω–∏–µ –ª–µ–¥—è–Ω–æ–≥–æ –≤–∑–¥–æ—Ö–∞": 1,

        },
    },

    "materials": {
        "—Å—Ç–∞–ª—å": {"count": 5, "chance": 0.05},
        "–∂–µ–ª–µ–∑–æ": {"count": 3, "chance": 0.05},
        "–¥–µ—Ä–µ–≤–æ": {"count": 20, "chance": 0.2},
        "–∫–æ–∂–∞": {"count": 10, "chance": 0.2},
        "–∞–ª–º–∞–∑": {"count": 5, "chance": 0.01},
        "–∫–∞–º–µ–Ω—å": {"count": 4, "chance": 0.2},
    }
}


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è /treasure_room1
@dp.message(Command("treasure_room1"))
async def enter_treasure_room(message: types.Message, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ö–æ–¥–∞ –≤ —Å–æ–∫—Ä–æ–≤–∏—â–Ω–∏—Ü—É"""
    user_id = message.from_user.id

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–æ–≤—ã–π
    if user_id not in user_data:
        user_data[user_id] = {
            'material_user': defaultdict(int),
            'recipes': {
                'recipes_weapon': {},
                'recipes_armor': {}
            },
            'AR': {},
            'BR': {},
            'hero_stats': {},
            'gold': 0
        }

    await bot.send_message(message.chat.id, "üîç –í—ã –≤–æ—à–ª–∏ –≤ —Ç–∞–∏–Ω—Å—Ç–≤–µ–Ω–Ω—É—é —Å–æ–∫—Ä–æ–≤–∏—â–Ω–∏—Ü—É!")
    # 1. –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ–∫—Ä–æ–≤–∏—â–Ω–∏—Ü—ã
    try:
        treasure_photos = Photo_Diryk.get("–°–æ–∫—Ä–æ–≤–∏—â–Ω–∏—Ü–∞", {})
        if not treasure_photos:
            await message.answer("‚ö†Ô∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ–∫—Ä–æ–≤–∏—â–Ω–∏—Ü—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
        else:
            random_photo_key = random.choice(list(treasure_photos.keys()))
            photo_path = treasure_photos[random_photo_key]
            await message.answer_photo(FSInputFile(photo_path))
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ —Å–æ–∫—Ä–æ–≤–∏—â–Ω–∏—Ü—ã: {e}")
    rewards = []

    # 1. –ü–æ–ª—É—á–µ–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
    materials = Treasury_Diryk.get("materials", {})
    if materials:
        material = random.choices(
            list(materials.keys()),
            weights=[m["chance"] for m in materials.values()],
            k=1
        )[0]
        quantity = random.randint(1, materials[material]["count"])
        user_data[user_id]["material_user"][material] += quantity
        rewards.append(f"üì¶ –ú–∞—Ç–µ—Ä–∏–∞–ª—ã: {material} x{quantity}")

    # 2. –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ—Ü–µ–ø—Ç–∞ (90% —à–∞–Ω—Å)
    if random.random() < 0.9:
        recipe_type = random.choice(list(Treasury_Diryk["recipet_treasure"].keys()))
        possible_recipes = Treasury_Diryk["recipet_treasure"][recipe_type]

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ä–µ—Ü–µ–ø—Ç–∞
        category = "weapon" if "weapon" in recipe_type else "armor"
        known_recipes = user_data[user_id]["recipes"][f"recipes_{category}"]

        # –ò—â–µ–º –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã
        available_recipes = [r for r in possible_recipes if r not in known_recipes]

        if available_recipes:
            new_recipe = random.choice(available_recipes)
            user_data[user_id]["recipes"][f"recipes_{category}"][new_recipe] = 1
            rewards.append(f"üìú –ù–æ–≤—ã–π —Ä–µ—Ü–µ–ø—Ç: {new_recipe}")

            # –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è —Ä–µ—Ü–µ–ø—Ç–∞ (–∏–∑ all_recipes_mater)
            if new_recipe in all_recipes_mater[f"recipes_{category}"]:
                user_data[user_id]["recipes"][f"recipes_{category}"][new_recipe] = \
                    all_recipes_mater[f"recipes_{category}"][new_recipe]
        else:
            rewards.append("‚ÑπÔ∏è –í—ã —É–∂–µ –∑–Ω–∞–µ—Ç–µ –≤—Å–µ —Ä–µ—Ü–µ–ø—Ç—ã –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")

    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
    response = "üéâ –í—ã –Ω–∞—à–ª–∏:\n" + "\n".join(rewards) if rewards else "–°–æ–∫—Ä–æ–≤–∏—â–Ω–∏—Ü–∞ –ø—É—Å—Ç–∞..."
    await message.answer(response)
    save_data()
    # –ö–Ω–æ–ø–∫–∞ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è
    await message.answer(
        "–ß—Ç–æ –¥–∞–ª—å—à–µ?",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
            InlineKeyboardButton(text="‚û°Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø—É—Ç—å", callback_data="continue_path")
        ]])
    )


# ======================================–°–æ–∫—Ä–æ–≤–∏—â–Ω–∏—Ü–∞=====================================#

# ======================================–ú–ò–ú–ò–ö====================================#
# –ó–¥–æ—Ä–æ–≤—å–µ –º–∏–º–∏–∫–æ–≤
mimik_hp = {
    "–ú–∏–º–∏–∫ üì¶": 5,
    "–£–Ω–∏–∫–∞–ª—å–Ω—ã–π –ú–∏–º–∏–∫ üßø": 7,
    "–≠–ø–∏—á–µ—Å–∫–∏–π –ú–∏–º–∏–∫ üí∞": 13,
    "–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π –ú–∏–º–∏–∫ üíé": 16,
}


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /mimik_treasure_room1
@dp.message(Command("mimik_treasure_room1"))
async def enter_mimik_treasure_room(message: types.Message, bot: Bot):
    try:
        # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–≥–æ –º–∏–º–∏–∫–∞
        mimik_photos = Photo_Diryk.get("–ú–∏–º–∏–∫", {})

        if not mimik_photos:
            await message.answer("üëπ –ú–∏–º–∏–∫–∏ —Å–µ–≥–æ–¥–Ω—è –æ—Ç–¥—ã—Ö–∞—é—Ç...")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤
        valid_mimiks = {}
        for mimik_type, mimik_data in mimik_photos.items():
            for name, path in mimik_data.items():
                if os.path.exists(path):
                    valid_mimiks[mimik_type] = path
                    break

        if not valid_mimiks:
            await message.answer("üëπ –í—Å–µ –º–∏–º–∏–∫–∏ —Å–ø—Ä—è—Ç–∞–ª–∏—Å—å... (—Ñ–æ—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã)")
            return

        chosen_mimik = random.choice(list(valid_mimiks.keys()))
        mimik_photo_path = valid_mimiks[chosen_mimik]

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –º–∏–º–∏–∫–∞
        try:
            photo = FSInputFile(mimik_photo_path)
            markup = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚öîÔ∏è –ê—Ç–∞–∫–æ–≤–∞—Ç—å", callback_data=f"attack_mimik_{chosen_mimik}")]
            ])
            await message.answer_photo(
                photo,
                caption=f"üèÜ –í—ã –Ω–∞—à–ª–∏ {chosen_mimik}! (HP: {mimik_hp[chosen_mimik]})",
                reply_markup=markup
            )
        except Exception as e:
            await message.answer(f"üëπ –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ: {str(e)}")

    except Exception as e:
        await message.answer(f"‚ö° –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")


@dp.callback_query(lambda c: c.data.startswith('attack_mimik_'))
async def process_attack(callback_query: types.CallbackQuery):
    try:
        user_id = callback_query.from_user.id
        mimik_name = callback_query.data.split('_')[-1]  # "–ú–∏–º–∏–∫ –æ–±—ã—á–Ω—ã–π", "–ú–∏–º–∏–∫ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π" –∏ —Ç.–¥.

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è HP –º–∏–º–∏–∫–∞, –µ—Å–ª–∏ –æ–Ω —Ç–æ–ª—å–∫–æ –ø–æ—è–≤–∏–ª—Å—è
        if "current_hp_mimik" not in user_data[user_id]:
            user_data[user_id]["current_hp_mimik"] = mimik_hp.get(mimik_name, 10)  # 10 ‚Äî –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ

        current_hp = user_data[user_id]["current_hp_mimik"]

        # –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏ –∞—Ç–∞–∫–∏
        await callback_query.answer("‚öîÔ∏è –ê—Ç–∞–∫–∞!")
        await asyncio.sleep(0.7)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–∫–ª–æ–Ω–µ–Ω–∏—è (20% —à–∞–Ω—Å)
        if random.random() < 0.2:
            await callback_query.message.edit_caption(
                caption=f"üëπ {mimik_name} –ª–æ–≤–∫–æ —É–∫–ª–æ–Ω–∏–ª—Å—è –æ—Ç –≤–∞—à–µ–π –∞—Ç–∞–∫–∏!",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚öîÔ∏è –ê—Ç–∞–∫–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data=f"attack_mimik_{mimik_name}")]
                ])
            )
            return

        # –ù–∞–Ω–æ—Å–∏–º —É—Ä–æ–Ω
        new_hp = max(0, current_hp - 1)
        user_data[user_id]["current_hp_mimik"] = new_hp

        # –ï—Å–ª–∏ –º–∏–º–∏–∫ –ø–æ–±–µ–∂–¥—ë–Ω (HP <= 0)
        if new_hp <= 0:
            del user_data[user_id]["current_hp_mimik"]  # –°–±—Ä–æ—Å HP –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–æ—è–≤–ª–µ–Ω–∏—è
            rewards = []

            # –í—ã–¥–∞—á–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ (–∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª–µ)
            materials_gained = {}
            for material, data in Treasury_Diryk["materials"].items():
                if random.random() < data["chance"]:
                    count = random.randint(1, data["count"])
                    materials_gained[material] = count
                    user_data[user_id]["material_user"][material] += count

            if materials_gained:
                rewards.append(
                    "‚õèÔ∏è –ú–∞—Ç–µ—Ä–∏–∞–ª—ã:\n" + "\n".join([f"{mat} x{count}" for mat, count in materials_gained.items()]))

            # –í—ã–¥–∞—á–∞ —Ä–µ—Ü–µ–ø—Ç–∞ (35% —à–∞–Ω—Å, –∫–∞–∫ –≤ —Å–æ–∫—Ä–æ–≤–∏—â–Ω–∏—Ü–µ)
            if random.random() < 0.35:
                recipe_type = random.choice(["recipet_weapon_treasuer", "recipet_armor_treasuer"])
                category = "weapon" if "weapon" in recipe_type else "armor"
                possible_recipes = Treasury_Diryk["recipet_treasure"][recipe_type]
                known_recipes = user_data[user_id]["recipes"][f"recipes_{category}"]

                # –ò—â–µ–º –Ω–µ–∏–∑—É—á–µ–Ω–Ω—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã
                available_recipes = [r for r in possible_recipes if r not in known_recipes]

                if available_recipes:
                    new_recipe = random.choice(available_recipes)
                    # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ—Ü–µ–ø—Ç + –º–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è –∫—Ä–∞—Ñ—Ç–∞ –∏–∑ all_recipes_mater
                    user_data[user_id]["recipes"][f"recipes_{category}"][new_recipe] = \
                        all_recipes_mater[f"recipes_{category}"].get(new_recipe, 1)
                    rewards.append(f"üìú –ù–æ–≤—ã–π —Ä–µ—Ü–µ–ø—Ç {category}: {new_recipe}")
                else:
                    rewards.append("‚ÑπÔ∏è –í—ã —É–∂–µ –∑–Ω–∞–µ—Ç–µ –≤—Å–µ —Ä–µ—Ü–µ–ø—Ç—ã —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")

            # –°–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–±–µ–¥–µ
            victory_message = (
                    f"üéâ –í—ã –ø–æ–±–µ–¥–∏–ª–∏ {mimik_name}!\n\n" +
                    ("üèÜ –ù–∞–≥—Ä–∞–¥—ã:\n" + "\n".join(rewards) if rewards else "üí® –ú–∏–º–∏–∫ –Ω–µ –æ—Å—Ç–∞–≤–∏–ª –Ω–∞–≥—Ä–∞–¥...")
            )

            await callback_query.message.edit_caption(
                caption=victory_message,
                reply_markup=None
            )

            # –ö–Ω–æ–ø–∫–∞ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è
            continue_btn = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚û°Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø—É—Ç—å", callback_data="continue_path")]
            ])
            await callback_query.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=continue_btn)

        else:
            # –ï—Å–ª–∏ –º–∏–º–∏–∫ –µ—â—ë –∂–∏–≤
            markup = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(
                    text=f"‚öîÔ∏è –ê—Ç–∞–∫–æ–≤–∞—Ç—å (HP: {new_hp}/{mimik_hp[mimik_name]})",
                    callback_data=f"attack_mimik_{mimik_name}"
                )]
            ])
            await callback_query.message.edit_caption(
                caption=f"‚öîÔ∏è –í—ã –Ω–∞–Ω–µ—Å–ª–∏ 1 —É—Ä–æ–Ω {mimik_name}! (HP: {new_hp}/{mimik_hp[mimik_name]})",
                reply_markup=markup
            )

        save_data()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ process_attack: {e}")
        await callback_query.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞—Ç–∞–∫–µ")


# ======================================–ú–ò–ú–ò–ö====================================#


# ======================================–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞=====================================#
# –°–ª–æ–≤–∞—Ä—å —Å —Ä–µ—Ü–µ–ø—Ç–∞–º–∏
secret_library_recipes = {
    "base_recipes": {
        "–†–µ—Ü–µ–ø—Ç-–î–µ—Ä–µ–≤—è–Ω–Ω–æ–µ –∫–æ–ø—å–µ": 1,
        "–†–µ—Ü–µ–ø—Ç-–î–µ—Ä–µ–≤—è–Ω–Ω—ã–π –º–µ—á": 1,
        "–†–µ—Ü–µ–ø—Ç-–î–µ—Ä–µ–≤—è–Ω–Ω—ã–π –ø–æ—Å–æ—Ö": 1,
        "–†–µ—Ü–µ–ø—Ç-–î–µ—Ä–µ–≤—è–Ω–Ω—ã–π –¥–≤—É—Ä—É—á–Ω—ã–π –º–µ—á": 1,
        "–†–µ—Ü–µ–ø—Ç-–î–µ—Ä–µ–≤—è–Ω–Ω—ã–π –ª—É–∫": 1,
        "–†–µ—Ü–µ–ø—Ç-–ö–æ–∂–∞–Ω–∞—è –±—Ä–æ–Ω—è": 1
    },
    "rare_recipes": {
        "–†–µ—Ü–µ–ø—Ç-–ñ–µ–ª–µ–∑–Ω–æ–µ –∫–æ–ø—å–µ": 1,
        "–†–µ—Ü–µ–ø—Ç-–ñ–µ–ª–µ–∑–Ω—ã–π –º–µ—á": 1,
        "–†–µ—Ü–µ–ø—Ç-–ñ–µ–ª–µ–∑–Ω—ã–π —Ç–æ–ø–æ—Ä": 1,
        "–†–µ—Ü–µ–ø—Ç-–ñ–µ–ª–µ–∑–Ω—ã–π –¥–≤—É—Ä—É—á–Ω—ã–π –º–µ—á": 1,
        "–†–µ—Ü–µ–ø—Ç-–ñ–µ–ª–µ–∑–Ω—ã–π –ª—É–∫": 1,
        "–†–µ—Ü–µ–ø—Ç-–ñ–µ–ª–µ–∑–Ω—ã–π –∫–∏–Ω–∂–∞–ª": 1,
        "–†–µ—Ü–µ–ø—Ç-–ñ–µ–ª–µ–∑–Ω—ã–π –∞—Ä–±–∞–ª–µ—Ç": 1,
        "–†–µ—Ü–µ–ø—Ç-–ñ–µ–ª–µ–∑–Ω–∞—è –ø–∞–ª–∏—Ü–∞": 1,
        "–†–µ—Ü–µ–ø—Ç-–ñ–µ–ª–µ–∑–Ω–∞—è –ø–∞–ª–∞—à": 1,
        "–†–µ—Ü–µ–ø—Ç-–ñ–µ–ª–µ–∑–Ω–∞—è –±—É–ª–∞–≤–∞": 1,
        "–†–µ—Ü–µ–ø—Ç-–ñ–µ–ª–µ–∑–Ω–∞—è —Å–∞–±–ª—è": 1,
        "–†–µ—Ü–µ–ø—Ç-–ñ–µ–ª–µ–∑–Ω—ã–π –±–æ–µ–≤–æ–π –º–æ–ª–æ—Ç": 1,
        "–†–µ—Ü–µ–ø—Ç-–ñ–µ–ª–µ–∑–Ω–∞—è –∫–∏—Ä–∞—Å–∞": 1,
        "–†–µ—Ü–µ–ø—Ç-–ñ–µ–ª–µ–∑–Ω—ã–µ –ª–∞—Ç—ã": 1,
        "–†–µ—Ü–µ–ø—Ç-–ñ–µ–ª–µ–∑–Ω–∞—è –∫–æ–ª—å—á—É–≥–∞": 1,
        "–†–µ—Ü–µ–ø—Ç-–ü–ª–∞—â –ª–µ–≥–∫–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞": 1,
        "–†–µ—Ü–µ–ø—Ç-–û–¥–µ—è–Ω–∏–µ —É—á–µ–Ω–∏–∫–∞ –º–∞–≥–∞": 1,
    },
    "epic_recipes": {
        "–†–µ—Ü–µ–ø—Ç-–°—Ç–∞–ª—å–Ω–æ–π –º–µ—á": 1,
        "–†–µ—Ü–µ–ø—Ç-–°—Ç–∞–ª—å–Ω–æ–µ –∫–æ–ø—å–µ": 1,
        "–†–µ—Ü–µ–ø—Ç-–°—Ç–∞–ª—å–Ω–æ–π –¥–≤—É—Ä—É—á–Ω—ã–π –º–µ—á": 1,
        "–†–µ—Ü–µ–ø—Ç-–°—Ç–∞–ª—å–Ω–æ–π –∫–∏–Ω–∂–∞–ª": 1,
        "–†–µ—Ü–µ–ø—Ç-–°—Ç–∞–ª—å–Ω–æ–π –∞—Ä–±–∞–ª–µ—Ç": 1,
        "–†–µ—Ü–µ–ø—Ç-–°—Ç–∞–ª—å–Ω–æ–π –±–æ–µ–≤–æ–π –º–æ–ª–æ—Ç": 1,
        "–†–µ—Ü–µ–ø—Ç-–°—Ç–∞–ª—å–Ω–∞—è –∫–∞—Ç–∞–Ω–∞": 1,
        "–†–µ—Ü–µ–ø—Ç-–û–¥–µ—è–Ω–∏–µ —Å—Ç–∞—Ä–æ–≥–æ –º–∞–≥–∞": 1,
        "–†–µ—Ü–µ–ø—Ç-–ë–ª–∞—Ö–∞–Ω —Ü–∏–Ω—Ç–∞": 1,
        "–†–µ—Ü–µ–ø—Ç-–ü–ª–∞—â –ª—É–Ω–Ω–æ–π –ø—ã–ª–∏": 1,
        "–†–µ—Ü–µ–ø—Ç-–ü–ª–∞—â –ª—É–Ω–Ω–æ–≥–æ —Å–≤–µ—Ç–∞": 1,
    },
    "legendary_recipes": {
        "–†–µ—Ü–µ–ø—Ç-–ú–∏—Ñ—Ä–∏–ª–æ–≤—ã–π –ø–æ—Å–æ—Ö": 1,
        "–†–µ—Ü–µ–ø—Ç-–ú–∏—Ñ—Ä–∏–ª–æ–≤—ã–π –º–µ—á": 1,
        "–†–µ—Ü–µ–ø—Ç-–ú–∏—Ñ—Ä–∏–ª–æ–≤—ã–π –ª—É–∫": 1,
        "–†–µ—Ü–µ–ø—Ç-–ú–∏—Ñ—Ä–∏–ª–æ–≤—ã–π –∫–∏–Ω–∂–∞–ª": 1,
        "–†–µ—Ü–µ–ø—Ç-–ú–∏—Ñ—Ä–∏–ª–æ–≤–∞—è –Ω–∞–≥–∏–Ω–∞—Ç–∞": 1,
        "–†–µ—Ü–µ–ø—Ç-–ú–∏—Ñ—Ä–∏–ª–æ–≤—ã–π –¥–æ—Å–ø–µ—Ö": 1,
        "–†–µ—Ü–µ–ø—Ç-–ú–∞–Ω—Ç–∏—è –ø—ã–ª–∞—é—â–µ–π –º–∞–≥–º—ã": 1,
        "–†–µ—Ü–µ–ø—Ç-–ú–∞–Ω—Ç–∏—è –≥—Ä–æ–∑–æ–≤–æ–≥–æ —à—ë–ø–æ—Ç–∞": 1,
        "–†–µ—Ü–µ–ø—Ç-–û–¥–µ—è–Ω–∏–µ –≤–µ—Ç—Ä–∞": 1,
        "–†–µ—Ü–µ–ø—Ç-–û–¥–µ—è–Ω–∏–µ –ª–µ–¥—è–Ω–æ–≥–æ –≤–∑–¥–æ—Ö–∞": 1
    },
}


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /secret_library1
@dp.message(Command("secret_library1"))
# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –¢–∞–π–Ω—É—é –ë–∏–±–ª–∏–æ—Ç–µ–∫—É
async def enter_secret_library(message: types.Message, bot: Bot):
    chat_id = message.chat.id

    # –ü–æ–ª—É—á–∞–µ–º —Å–ª–æ–≤–∞—Ä—å —Å —Ñ–æ—Ç–æ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
    library_photos = Photo_Diryk.get("–¢–∞–π–Ω–∞—è –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞", {})

    if not library_photos:
        await message.answer("–§–æ—Ç–æ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.")
        return

    # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ —Ñ–æ—Ç–æ
    random_photo_key = random.choice(list(library_photos.keys()))
    photo_path = library_photos[random_photo_key]

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
    try:
        photo = FSInputFile(photo_path)
        await message.answer_photo(photo)
    except FileNotFoundError:
        await message.answer("–§–æ—Ç–æ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

    # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
    markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–®–∞–Ω—Å—ã", callback_data="secret_library_chances"),
         InlineKeyboardButton(text="üé≤ –ü–æ—à–∞—Ä–∏—Ç—Å—è –ø–æ –ø–æ–ª–∫–∞–º", callback_data="secret_library_roll")]
    ])

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
    await message.answer("–í—ã –≤ –¢–∞–π–Ω–æ–π –ë–∏–±–ª–∏–æ—Ç–µ–∫–µ. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "üé≤ –ë—Ä–æ—Å–∏—Ç—å –∫—É–±–∏–∫"
@dp.callback_query(lambda callback_query: callback_query.data == "secret_library_roll")
async def handle_secret_library_roll(call: types.CallbackQuery):
    user_id = call.from_user.id
    chat_id = call.message.chat.id

    # –£–¥–∞–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω—É—é –∫–Ω–æ–ø–∫—É
    await call.message.edit_reply_markup(reply_markup=None)

    # –ë—Ä–æ—Å–∞–µ–º –∫—É–±–∏–∫
    await call.message.answer("–ë—Ä–æ—Å–∞–µ–º –∫—É–±–∏–∫...")
    dice_message = await bot.send_dice(chat_id, emoji='üé≤')
    dice_value = dice_message.dice.value
    await asyncio.sleep(4)  # –ñ–¥–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –±—Ä–æ—Å–∫–∞

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —à–∞–Ω—Å—ã
    chances = {
        4: {"–ù–∏—á–µ–≥–æ": 10, "base_recipes": 75, "rare_recipes": 10, "epic_recipes": 5, "legendary_recipes": 0.01},
        5: {"–ù–∏—á–µ–≥–æ": 5, "base_recipes": 45, "rare_recipes": 35, "epic_recipes": 15, "legendary_recipes": 1},
        6: {"–ù–∏—á–µ–≥–æ": 1, "base_recipes": 15, "rare_recipes": 55, "epic_recipes": 25, "legendary_recipes": 5},
    }.get(dice_value, {"–ù–∏—á–µ–≥–æ": 100})

    # –í—ã–±–∏—Ä–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    result_category = random.choices(list(chances.keys()), weights=list(chances.values()), k=1)[0]

    result_message = "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–ª—É—á–∏–ª–∏."
    if result_category != "–ù–∏—á–µ–≥–æ":
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ä–µ—Ü–µ–ø—Ç–æ–≤ –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        available_recipes = list(secret_library_recipes[result_category].keys())
        recipe = random.choice(available_recipes)
        result_message = f"–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –ø–æ–ª—É—á–∏–ª–∏ —Ä–µ—Ü–µ–ø—Ç: {recipe}!"

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        if user_id not in user_data:
            user_data[user_id] = {
                'material_user': defaultdict(int),
                'recipes': {
                    'recipes_weapon': {},
                    'recipes_armor': {}
                },
                'AR': {},
                'BR': {},
                'hero_stats': {},
                'gold': 0
            }

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ä–µ—Ü–µ–ø—Ç–∞ (–æ—Ä—É–∂–∏–µ –∏–ª–∏ –±—Ä–æ–Ω—è)
        armor_recipes = [
            "–†–µ—Ü–µ–ø—Ç-–ö–æ–∂–∞–Ω–∞—è –±—Ä–æ–Ω—è", "–†–µ—Ü–µ–ø—Ç-–ñ–µ–ª–µ–∑–Ω–∞—è –∫–∏—Ä–∞—Å–∞", "–†–µ—Ü–µ–ø—Ç-–ñ–µ–ª–µ–∑–Ω—ã–µ –ª–∞—Ç—ã",
            "–†–µ—Ü–µ–ø—Ç-–ñ–µ–ª–µ–∑–Ω–∞—è –∫–æ–ª—å—á—É–≥–∞", "–†–µ—Ü–µ–ø—Ç-–ü–ª–∞—â –ª–µ–≥–∫–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞",
            "–†–µ—Ü–µ–ø—Ç-–û–¥–µ—è–Ω–∏–µ —É—á–µ–Ω–∏–∫–∞ –º–∞–≥–∞", "–†–µ—Ü–µ–ø—Ç-–û–¥–µ—è–Ω–∏–µ —Å—Ç–∞—Ä–æ–≥–æ –º–∞–≥–∞",
            "–†–µ—Ü–µ–ø—Ç-–ë–ª–∞—Ö–∞–Ω —Ü–∏–Ω—Ç–∞", "–†–µ—Ü–µ–ø—Ç-–ü–ª–∞—â –ª—É–Ω–Ω–æ–π –ø—ã–ª–∏",
            "–†–µ—Ü–µ–ø—Ç-–ü–ª–∞—â –ª—É–Ω–Ω–æ–≥–æ —Å–≤–µ—Ç–∞", "–†–µ—Ü–µ–ø—Ç-–ú–∏—Ñ—Ä–∏–ª–æ–≤—ã–π –¥–æ—Å–ø–µ—Ö",
            "–†–µ—Ü–µ–ø—Ç-–ú–∞–Ω—Ç–∏—è –ø—ã–ª–∞—é—â–µ–π –º–∞–≥–º—ã", "–†–µ—Ü–µ–ø—Ç-–ú–∞–Ω—Ç–∏—è –≥—Ä–æ–∑–æ–≤–æ–≥–æ —à—ë–ø–æ—Ç–∞",
            "–†–µ—Ü–µ–ø—Ç-–û–¥–µ—è–Ω–∏–µ –≤–µ—Ç—Ä–∞", "–†–µ—Ü–µ–ø—Ç-–û–¥–µ—è–Ω–∏–µ –ª–µ–¥—è–Ω–æ–≥–æ –≤–∑–¥–æ—Ö–∞"
        ]

        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ—Ü–µ–ø—Ç –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º–∏
        if recipe in armor_recipes:
            if recipe not in user_data[user_id]['recipes']['recipes_armor']:
                materials = all_recipes_mater['recipes_armor'].get(recipe, {})
                user_data[user_id]['recipes']['recipes_armor'][recipe] = materials
        else:
            if recipe not in user_data[user_id]['recipes']['recipes_weapon']:
                materials = all_recipes_mater['recipes_weapon'].get(recipe, {})
                user_data[user_id]['recipes']['recipes_weapon'][recipe] = materials

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
        save_data()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    await call.message.answer(result_message)

    # –ö–Ω–æ–ø–∫–∞ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è
    markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø—É—Ç—å", callback_data="continue_path")]
    ])
    await call.message.answer("–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å:", reply_markup=markup)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
@dp.callback_query(lambda callback_query: callback_query.data == "secret_library_back")
async def handle_secret_library_back(call: types.CallbackQuery):
    chat_id = call.message.chat.id

    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –≤–æ–∑–≤—Ä–∞—â–∞—è –µ–≥–æ –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É –º–µ–Ω—é –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
    await call.message.edit_text(
        "–í—ã –≤ –¢–∞–π–Ω–æ–π –ë–∏–±–ª–∏–æ—Ç–µ–∫–µ. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–®–∞–Ω—Å—ã", callback_data="secret_library_chances")],
            [InlineKeyboardButton(text="üé≤ –ë—Ä–æ—Å–∏—Ç—å –∫—É–±–∏–∫", callback_data="secret_library_roll")]
        ])
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–®–∞–Ω—Å—ã"
@dp.callback_query(lambda callback_query: callback_query.data == "secret_library_chances")
async def show_secret_library_chances(call: types.CallbackQuery):
    chat_id = call.message.chat.id

    chances_message = (
        "–®–∞–Ω—Å—ã –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ—Ü–µ–ø—Ç–æ–≤ –≤ –¢–∞–π–Ω–æ–π –ë–∏–±–ª–∏–æ—Ç–µ–∫–µ:\n\n"
        "–ï—Å–ª–∏ –≤—ã–ø–∞–¥–µ—Ç —á–∏—Å–ª–æ 4:\n"
        "- –ù–∏—á–µ–≥–æ: 10%\n"
        "- –û–±—ã—á–Ω—ã–π —Ä–µ—Ü–µ–ø—Ç: 75%\n"
        "- –†–µ–¥–∫–∏–π —Ä–µ—Ü–µ–ø—Ç: 10%\n"
        "- –≠–ø–∏—á–µ—Å–∫–∏–π —Ä–µ—Ü–µ–ø—Ç: 5%\n"
        "- –õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π —Ä–µ—Ü–µ–ø—Ç: 0.01%\n\n"
        "–ï—Å–ª–∏ –≤—ã–ø–∞–¥–µ—Ç —á–∏—Å–ª–æ 5:\n"
        "- –ù–∏—á–µ–≥–æ: 5%\n"
        "- –û–±—ã—á–Ω—ã–π —Ä–µ—Ü–µ–ø—Ç: 45%\n"
        "- –†–µ–¥–∫–∏–π —Ä–µ—Ü–µ–ø—Ç: 35%\n"
        "- –≠–ø–∏—á–µ—Å–∫–∏–π —Ä–µ—Ü–µ–ø—Ç: 15%\n"
        "- –õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π —Ä–µ—Ü–µ–ø—Ç: 1%\n\n"
        "–ï—Å–ª–∏ –≤—ã–ø–∞–¥–µ—Ç —á–∏—Å–ª–æ 6:\n"
        "- –ù–∏—á–µ–≥–æ: 1%\n"
        "- –û–±—ã—á–Ω—ã–π —Ä–µ—Ü–µ–ø—Ç: 15%\n"
        "- –†–µ–¥–∫–∏–π —Ä–µ—Ü–µ–ø—Ç: 55%\n"
        "- –≠–ø–∏—á–µ—Å–∫–∏–π —Ä–µ—Ü–µ–ø—Ç:25%\n"
        "- –õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π —Ä–µ—Ü–µ–ø—Ç: 5%\n"
    )

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
    markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="secret_library_back")]
    ])

    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —à–∞–Ω—Å–∞–º–∏
    await call.message.edit_text(chances_message, reply_markup=markup)


# ======================================–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞=====================================#


# ======================================–¢–æ—Ä–≥–æ–≤–µ—Ü====================================#
# –°–ª–æ–≤–∞—Ä—å —Å —Ç–æ–≤–∞—Ä–∞–º–∏ —Ç–æ—Ä–≥–æ–≤—Ü–∞
Pool_item_Diryk = {
    "trader_items": {
        "–ú–∞—Ç–µ—Ä–∏–∞–ª—ã": {
            "—Å—Ç–∞–ª—å": {"—Ü–µ–Ω–∞": 90, "–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ": 10},
            "–∂–µ–ª–µ–∑–æ": {"—Ü–µ–Ω–∞": 45, "–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ": 35},
            "–¥–µ—Ä–µ–≤–æ": {"—Ü–µ–Ω–∞": 10, "–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ": 75},
            "–∫–æ–∂–∞": {"—Ü–µ–Ω–∞": 20, "–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ": 55},
            "–∞–ª–º–∞–∑": {"—Ü–µ–Ω–∞": 350, "–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ": 5},
            "–∫–∞–º–µ–Ω—å": {"—Ü–µ–Ω–∞": 5, "–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ": 50},
            "–º–∏—Ñ—Ä–∏–ª": {"—Ü–µ–Ω–∞": 700, "–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ": 5},
            "—Ç–µ–Ω–µ–≤–æ–π —à–µ–ª–∫": {"—Ü–µ–Ω–∞": 160, "–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ": 5},
            "–∫–æ—Å—Ç—è–Ω–∞—è —Å—Ç–∞–ª—å": {"—Ü–µ–Ω–∞": 110, "–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ": 5},
            "—Ñ–∞–Ω—Ç–æ–º–Ω—ã–π —à–µ–ª–∫": {"—Ü–µ–Ω–∞": 280, "–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ": 5},
            "—Ç–∫–∞–Ω—å –∑–∞–±—ã—Ç—ã—Ö": {"—Ü–µ–Ω–∞": 500, "–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ": 5},
            "–ø–µ–ø–µ–ª —Ñ–µ–Ω–∏–∫—Å–∞": {"—Ü–µ–Ω–∞": 600, "–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ": 5},
            "—Ç–µ–Ω–µ–≤–æ–π —Å–∞–≤–∞–Ω": {"—Ü–µ–Ω–∞": 340, "–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ": 5},
            "–∏—Å–∫—Ä–∞ –¥—É—à–∏": {"—Ü–µ–Ω–∞": 450, "–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ": 5}},
        "–†–µ—Ü–µ–ø—Ç—ã": {
            "recipes_weapon": {
                "–†–µ—Ü–µ–ø—Ç-–î–µ—Ä–µ–≤—è–Ω–Ω—ã–π –º–µ—á": {"—Ü–µ–Ω–∞": 55, "–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ": 1},
                "–†–µ—Ü–µ–ø—Ç-–î–µ—Ä–µ–≤—è–Ω–Ω—ã–π –ª—É–∫": {"—Ü–µ–Ω–∞": 61, "–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ": 1},
                "–†–µ—Ü–µ–ø—Ç-–î–µ—Ä–µ–≤—è–Ω–Ω–æ–µ –∫–æ–ø—å–µ": {"—Ü–µ–Ω–∞": 67, "–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ": 1},
                "–†–µ—Ü–µ–ø—Ç-–î–µ—Ä–µ–≤—è–Ω–Ω—ã–π –ø–æ—Å–æ—Ö": {"—Ü–µ–Ω–∞": 73, "–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ": 1},
                "–†–µ—Ü–µ–ø—Ç-–î–µ—Ä–µ–≤—è–Ω–Ω—ã–π –¥–≤—É—Ä—É—á–Ω—ã–π –º–µ—á": {"—Ü–µ–Ω–∞": 101, "–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ": 1},
                "–†–µ—Ü–µ–ø—Ç-–ñ–µ–ª–µ–∑–Ω–∞—è –ø–∞–ª–∏—Ü–∞": {"—Ü–µ–Ω–∞": 186, "–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ": 1},
                "–†–µ—Ü–µ–ø—Ç-–ñ–µ–ª–µ–∑–Ω—ã–π –∫–∏–Ω–∂–∞–ª": {"—Ü–µ–Ω–∞": 189, "–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ": 1},
                "–†–µ—Ü–µ–ø—Ç-–ñ–µ–ª–µ–∑–Ω—ã–π –∞—Ä–±–∞–ª–µ—Ç": {"—Ü–µ–Ω–∞": 193, "–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ": 1},
                "–†–µ—Ü–µ–ø—Ç-–ñ–µ–ª–µ–∑–Ω—ã–π –ª—É–∫": {"—Ü–µ–Ω–∞": 193, "–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ": 1},
                "–†–µ—Ü–µ–ø—Ç-–ñ–µ–ª–µ–∑–Ω–∞—è –ø–∞–ª–∞—à": {"—Ü–µ–Ω–∞": 194, "–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ": 1},
                "–†–µ—Ü–µ–ø—Ç-–ñ–µ–ª–µ–∑–Ω—ã–π –ø–æ—Å–æ—Ö": {"—Ü–µ–Ω–∞": 210, "–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ": 1},
                "–†–µ—Ü–µ–ø—Ç-–ñ–µ–ª–µ–∑–Ω–∞—è –±—É–ª–∞–≤–∞": {"—Ü–µ–Ω–∞": 456, "–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ": 1},
                "–†–µ—Ü–µ–ø—Ç-–ñ–µ–ª–µ–∑–Ω—ã–π –±–æ–µ–≤–æ–π –º–æ–ª–æ—Ç": {"—Ü–µ–Ω–∞": 404, "–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ": 1},
                "–†–µ—Ü–µ–ø—Ç-–ñ–µ–ª–µ–∑–Ω—ã–π –¥–≤—É—Ä—É—á–Ω—ã–π –º–µ—á": {"—Ü–µ–Ω–∞": 344, "–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ": 1},
                "–†–µ—Ü–µ–ø—Ç-–ñ–µ–ª–µ–∑–Ω—ã–π —Ç–æ–ø–æ—Ä": {"—Ü–µ–Ω–∞": 389, "–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ": 1},
                "–†–µ—Ü–µ–ø—Ç-–ñ–µ–ª–µ–∑–Ω–æ–µ –∫–æ–ø—å–µ": {"—Ü–µ–Ω–∞": 531, "–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ": 1},
                "–†–µ—Ü–µ–ø—Ç-–ñ–µ–ª–µ–∑–Ω—ã–π –º–µ—á": {"—Ü–µ–Ω–∞": 572, "–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ": 1},
                "–†–µ—Ü–µ–ø—Ç-–ñ–µ–ª–µ–∑–Ω–∞—è —Å–∞–±–ª—è": {"—Ü–µ–Ω–∞": 625, "–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ": 1},
                "–†–µ—Ü–µ–ø—Ç-–°—Ç–∞–ª—å–Ω–∞—è –∫–∞—Ç–∞–Ω–∞": {"—Ü–µ–Ω–∞": 1811, "–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ": 1},
                "–†–µ—Ü–µ–ø—Ç-–°—Ç–∞–ª—å–Ω–æ–µ –∫–æ–ø—å–µ": {"—Ü–µ–Ω–∞": 1624, "–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ": 1},
                "–†–µ—Ü–µ–ø—Ç-–°—Ç–∞–ª—å–Ω–æ–π –∞—Ä–±–∞–ª–µ—Ç": {"—Ü–µ–Ω–∞": 1466, "–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ": 1},
                "–†–µ—Ü–µ–ø—Ç-–°—Ç–∞–ª—å–Ω–æ–π –±–æ–µ–≤–æ–π –º–æ–ª–æ—Ç": {"—Ü–µ–Ω–∞": 2016, "–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ": 1},
                "–†–µ—Ü–µ–ø—Ç-–°—Ç–∞–ª—å–Ω–æ–π –¥–≤—É—Ä—É—á–Ω—ã–π –º–µ—á": {"—Ü–µ–Ω–∞": 2380, "–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ": 1},
                "–†–µ—Ü–µ–ø—Ç-–°—Ç–∞–ª—å–Ω–æ–π –∫–∏–Ω–∂–∞–ª": {"—Ü–µ–Ω–∞": 1613, "–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ": 1},
                "–†–µ—Ü–µ–ø—Ç-–°—Ç–∞–ª—å–Ω–æ–π –º–µ—á": {"—Ü–µ–Ω–∞": 1645, "–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ": 1},
                "–†–µ—Ü–µ–ø—Ç-–ú–∏—Ñ—Ä–∏–ª–æ–≤—ã–π –ø–æ—Å–æ—Ö": {"—Ü–µ–Ω–∞": 9385, "–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ": 1},
                "–†–µ—Ü–µ–ø—Ç-–ú–∏—Ñ—Ä–∏–ª–æ–≤—ã–π –º–µ—á": {"—Ü–µ–Ω–∞": 9283, "–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ": 1},
                "–†–µ—Ü–µ–ø—Ç-–ú–∏—Ñ—Ä–∏–ª–æ–≤—ã–π –ª—É–∫": {"—Ü–µ–Ω–∞": 8467, "–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ": 1},
                "–†–µ—Ü–µ–ø—Ç-–ú–∏—Ñ—Ä–∏–ª–æ–≤—ã–π –∫–∏–Ω–∂–∞–ª": {"—Ü–µ–Ω–∞": 10574, "–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ": 1},
                "–†–µ—Ü–µ–ø—Ç-–ú–∏—Ñ—Ä–∏–ª–æ–≤–∞—è –Ω–∞–≥–∏–Ω–∞—Ç–∞": {"—Ü–µ–Ω–∞": 13235, "–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ": 1}
            },
            "recipes_armor": {
                "–†–µ—Ü–µ–ø—Ç-–ñ–µ–ª–µ–∑–Ω–∞—è –∫–∏—Ä–∞—Å–∞": {"—Ü–µ–Ω–∞": 936, "–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ": 1},
                "–†–µ—Ü–µ–ø—Ç-–ñ–µ–ª–µ–∑–Ω–∞—è –∫–æ–ª—å—á—É–≥–∞": {"—Ü–µ–Ω–∞": 804, "–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ": 1},
                "–†–µ—Ü–µ–ø—Ç-–ñ–µ–ª–µ–∑–Ω—ã–µ –ª–∞—Ç—ã": {"—Ü–µ–Ω–∞": 1297, "–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ": 1},
                "–†–µ—Ü–µ–ø—Ç-–ö–æ–∂–∞–Ω–∞—è –±—Ä–æ–Ω—è": {"—Ü–µ–Ω–∞": 297, "–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ": 1},
                "–†–µ—Ü–µ–ø—Ç-–ú–∏—Ñ—Ä–∏–ª–æ–≤—ã–π –¥–æ—Å–ø–µ—Ö": {"—Ü–µ–Ω–∞": 17117, "–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ": 1},
                "–†–µ—Ü–µ–ø—Ç-–ü–ª–∞—â –ª–µ–≥–∫–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞": {"—Ü–µ–Ω–∞": 1021, "–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ": 1},
                "–†–µ—Ü–µ–ø—Ç-–û–¥–µ—è–Ω–∏–µ —É—á–µ–Ω–∏–∫–∞ –º–∞–≥–∞": {"—Ü–µ–Ω–∞": 1483, "–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ": 1},
                "–†–µ—Ü–µ–ø—Ç-–û–¥–µ—è–Ω–∏–µ —Å—Ç–∞—Ä–æ–≥–æ –º–∞–≥–∞": {"—Ü–µ–Ω–∞": 2758, "–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ": 1},
                "–†–µ—Ü–µ–ø—Ç-–ë–ª–∞—Ö–∞–Ω —Ü–∏–Ω—Ç–∞": {"—Ü–µ–Ω–∞": 4646, "–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ": 1},
                "–†–µ—Ü–µ–ø—Ç-–ü–ª–∞—â –ª—É–Ω–Ω–æ–π –ø—ã–ª–∏": {"—Ü–µ–Ω–∞": 1067, "–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ": 1},
                "–†–µ—Ü–µ–ø—Ç-–ü–ª–∞—â –ª—É–Ω–Ω–æ–≥–æ —Å–≤–µ—Ç–∞": {"—Ü–µ–Ω–∞": 510, "–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ": 1},
                "–†–µ—Ü–µ–ø—Ç-–ú–∞–Ω—Ç–∏—è –ø—ã–ª–∞—é—â–µ–π –º–∞–≥–º—ã": {"—Ü–µ–Ω–∞": 2059, "–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ": 1},
                "–†–µ—Ü–µ–ø—Ç-–ú–∞–Ω—Ç–∏—è –≥—Ä–æ–∑–æ–≤–æ–≥–æ —à—ë–ø–æ—Ç–∞": {"—Ü–µ–Ω–∞": 2662, "–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ": 1},
                "–†–µ—Ü–µ–ø—Ç-–û–¥–µ—è–Ω–∏–µ –≤–µ—Ç—Ä–∞": {"—Ü–µ–Ω–∞": 1540, "–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ": 1},
                "–†–µ—Ü–µ–ø—Ç-–û–¥–µ—è–Ω–∏–µ –ª–µ–¥—è–Ω–æ–≥–æ –≤–∑–¥–æ—Ö–∞": {"—Ü–µ–Ω–∞": 1787, "–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ": 1}
            }
        },
        "–û—Ä—É–∂–∏–µ": {
            # –î–µ—Ä–µ–≤—è–Ω–Ω–æ–µ –æ—Ä—É–∂–∏–µ
            "–î–µ—Ä–µ–≤—è–Ω–Ω—ã–π –º–µ—á": {"—Ü–µ–Ω–∞": 149, "–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ": 1},
            "–î–µ—Ä–µ–≤—è–Ω–Ω—ã–π –ª—É–∫": {"—Ü–µ–Ω–∞": 166, "–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ": 1},
            "–î–µ—Ä–µ–≤—è–Ω–Ω–æ–µ –∫–æ–ø—å–µ": {"—Ü–µ–Ω–∞": 181, "–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ": 1},
            "–î–µ—Ä–µ–≤—è–Ω–Ω—ã–π –ø–æ—Å–æ—Ö": {"—Ü–µ–Ω–∞": 198, "–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ": 1},
            "–î–µ—Ä–µ–≤—è–Ω–Ω—ã–π –¥–≤—É—Ä—É—á–Ω—ã–π –º–µ—á": {"—Ü–µ–Ω–∞": 274, "–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ": 1},

            # –ñ–µ–ª–µ–∑–Ω–æ–µ –æ—Ä—É–∂–∏–µ
            "–ñ–µ–ª–µ–∑–Ω–∞—è –ø–∞–ª–∏—Ü–∞": {"—Ü–µ–Ω–∞": 502, "–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ": 1},
            "–ñ–µ–ª–µ–∑–Ω—ã–π –∫–∏–Ω–∂–∞–ª": {"—Ü–µ–Ω–∞": 509, "–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ": 1},
            "–ñ–µ–ª–µ–∑–Ω—ã–π –∞—Ä–±–∞–ª–µ—Ç": {"—Ü–µ–Ω–∞": 520, "–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ": 1},
            "–ñ–µ–ª–µ–∑–Ω—ã–π –ª—É–∫": {"—Ü–µ–Ω–∞": 521, "–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ": 1},
            "–ñ–µ–ª–µ–∑–Ω—ã–π –ø–∞–ª–∞—à": {"—Ü–µ–Ω–∞": 523, "–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ": 1},
            "–ñ–µ–ª–µ–∑–Ω—ã–π –ø–æ—Å–æ—Ö": {"—Ü–µ–Ω–∞": 567, "–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ": 1},
            "–ñ–µ–ª–µ–∑–Ω–∞—è –±—É–ª–∞–≤–∞": {"—Ü–µ–Ω–∞": 1231, "–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ": 1},
            "–ñ–µ–ª–µ–∑–Ω—ã–π –±–æ–µ–≤–æ–π –º–æ–ª–æ—Ç": {"—Ü–µ–Ω–∞": 1090, "–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ": 1},
            "–ñ–µ–ª–µ–∑–Ω—ã–π –¥–≤—É—Ä—É—á–Ω—ã–π –º–µ—á": {"—Ü–µ–Ω–∞": 928, "–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ": 1},
            "–ñ–µ–ª–µ–∑–Ω—ã–π —Ç–æ–ø–æ—Ä": {"—Ü–µ–Ω–∞": 1050, "–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ": 1},
            "–ñ–µ–ª–µ–∑–Ω–æ–µ –∫–æ–ø—å–µ": {"—Ü–µ–Ω–∞": 1434, "–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ": 1},
            "–ñ–µ–ª–µ–∑–Ω—ã–π –º–µ—á": {"—Ü–µ–Ω–∞": 1544, "–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ": 1},
            "–ñ–µ–ª–µ–∑–Ω–∞—è —Å–∞–±–ª—è": {"—Ü–µ–Ω–∞": 1688, "–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ": 1},

            # –°—Ç–∞–ª—å–Ω–æ–µ –æ—Ä—É–∂–∏–µ
            "–°—Ç–∞–ª—å–Ω–∞—è –∫–∞—Ç–∞–Ω–∞": {"—Ü–µ–Ω–∞": 4891, "–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ": 1},
            "–°—Ç–∞–ª—å–Ω–æ–µ –∫–æ–ø—å–µ": {"—Ü–µ–Ω–∞": 4385, "–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ": 1},
            "–°—Ç–∞–ª—å–Ω–æ–π –∞—Ä–±–∞–ª–µ—Ç": {"—Ü–µ–Ω–∞": 3958, "–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ": 1},
            "–°—Ç–∞–ª—å–Ω–æ–π –±–æ–µ–≤–æ–π –º–æ–ª–æ—Ç": {"—Ü–µ–Ω–∞": 5443, "–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ": 1},
            "–°—Ç–∞–ª—å–Ω–æ–π –¥–≤—É—Ä—É—á–Ω—ã–π –º–µ—á": {"—Ü–µ–Ω–∞": 6425, "–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ": 1},
            "–°—Ç–∞–ª—å–Ω–æ–π –∫–∏–Ω–∂–∞–ª": {"—Ü–µ–Ω–∞": 4356, "–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ": 1},
            "–°—Ç–∞–ª—å–Ω–æ–π –º–µ—á": {"—Ü–µ–Ω–∞": 4440, "–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ": 1}
        },
        "–ë—Ä–æ–Ω—è": {
            # –ñ–µ–ª–µ–∑–Ω–∞—è –±—Ä–æ–Ω—è
            "–ñ–µ–ª–µ–∑–Ω–∞—è –∫–∏—Ä–∞—Å–∞": {"—Ü–µ–Ω–∞": 2526, "–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ": 1},
            "–ñ–µ–ª–µ–∑–Ω–∞—è –∫–æ–ª—å—á—É–≥–∞": {"—Ü–µ–Ω–∞": 2171, "–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ": 1},
            "–ñ–µ–ª–µ–∑–Ω—ã–µ –ª–∞—Ç—ã": {"—Ü–µ–Ω–∞": 3503, "–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ": 1},
            "–ö–æ–∂–∞–Ω–∞—è –±—Ä–æ–Ω—è": {"—Ü–µ–Ω–∞": 802, "–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ": 1},
            "–ú–∏—Ñ—Ä–∏–ª–æ–≤—ã–π –¥–æ—Å–ø–µ—Ö": {"—Ü–µ–Ω–∞": 46217, "–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ": 1},

            # –ú–∞–≥–∏—á–µ—Å–∫–∏–µ –æ–¥–µ–∂–¥—ã
            "–ü–ª–∞—â –ª–µ–≥–∫–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞": {"—Ü–µ–Ω–∞": 2756, "–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ": 1},
            "–û–¥–µ—è–Ω–∏–µ —É—á–µ–Ω–∏–∫–∞ –º–∞–≥–∞": {"—Ü–µ–Ω–∞": 4003, "–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ": 1},
            "–û–¥–µ—è–Ω–∏–µ —Å—Ç–∞—Ä–æ–≥–æ –º–∞–≥–∞": {"—Ü–µ–Ω–∞": 7445, "–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ": 1},
            "–ë–ª–∞—Ö–∞–Ω —Ü–∏–Ω—Ç–∞": {"—Ü–µ–Ω–∞": 12546, "–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ": 1},
            "–ü–ª–∞—â –ª—É–Ω–Ω–æ–π –ø—ã–ª–∏": {"—Ü–µ–Ω–∞": 2882, "–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ": 1},
            "–ü–ª–∞—â –ª—É–Ω–Ω–æ–≥–æ —Å–≤–µ—Ç–∞": {"—Ü–µ–Ω–∞": 1376, "–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ": 1},
            "–ú–∞–Ω—Ç–∏—è –ø—ã–ª–∞—é—â–µ–π –º–∞–≥–º—ã": {"—Ü–µ–Ω–∞": 5560, "–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ": 1},
            "–ú–∞–Ω—Ç–∏—è –≥—Ä–æ–∑–æ–≤–æ–≥–æ —à—ë–ø–æ—Ç–∞": {"—Ü–µ–Ω–∞": 7187, "–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ": 1},
            "–û–¥–µ—è–Ω–∏–µ –≤–µ—Ç—Ä–∞": {"—Ü–µ–Ω–∞": 4157, "–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ": 1},
            "–û–¥–µ—è–Ω–∏–µ –ª–µ–¥—è–Ω–æ–≥–æ –≤–∑–¥–æ—Ö–∞": {"—Ü–µ–Ω–∞": 4825, "–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ": 1}
        }
    }
}


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /trader_room1
@dp.message(Command("trader_room1"))
async def enter_trader_room(message: types.Message, bot: Bot):
    chat_id = message.chat.id

    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—É–ª–∞ —Ç–æ–≤–∞—Ä–æ–≤
        if 'trader_items_pool' not in user_data[chat_id]:
            user_data[chat_id]['trader_items_pool'] = fill_trader_items_pool()
        else:
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø—É–ª —Ç–æ–≤–∞—Ä–æ–≤
            user_data[chat_id]['trader_items_pool'] = fill_trader_items_pool()

        # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        welcome_msg = await message.answer("–í—ã –≤–æ—à–ª–∏ –≤ –∫–æ–º–Ω–∞—Ç—É –¢–æ—Ä–≥–æ–≤—Ü–∞, –≥–¥–µ –º–æ–∂–Ω–æ –æ–±–º–µ–Ω—è—Ç—å —Å–≤–æ–∏ –Ω–∞—Ö–æ–¥–∫–∏! üí∞")
        await asyncio.sleep(1)

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ –∫–æ–º–Ω–∞—Ç—ã
        trader_room_photos = Photo_Diryk.get("–ö–æ–º–Ω–∞—Ç–∞ –¢–æ—Ä–≥–æ–≤—Ü–∞", {})
        if trader_room_photos:
            try:
                random_photo = random.choice(list(trader_room_photos.values()))
                photo = FSInputFile(random_photo)
                await message.answer_photo(photo)
            except (FileNotFoundError, KeyError, IndexError) as e:
                logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ –∫–æ–º–Ω–∞—Ç—ã: {e}")
        else:
            await message.answer("–§–æ—Ç–æ –∫–æ–º–Ω–∞—Ç—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.")

        await asyncio.sleep(1)

        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤
        trader_items = user_data[chat_id].get('trader_items_pool', {})
        items_message = "üõí –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏:\n\n"
        has_items = False

        for category, items in trader_items.items():
            if not items:
                continue

            has_items = True
            items_message += f"<b>{category}:</b>\n"

            if category == "–†–µ—Ü–µ–ø—Ç—ã":
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ä–µ—Ü–µ–ø—Ç–æ–≤
                for subcat, subitems in items.items():
                    if not subitems:
                        continue
                    items_message += f"  <i>{subcat.replace('_', ' ').title()}:</i>\n"
                    for item, details in subitems.items():
                        price = details.get('—Ü–µ–Ω–∞', '?')
                        quantity = details.get('–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ', '?')
                        items_message += f"  - {item}: {price} –∑–æ–ª–æ—Ç–∞ (–æ—Å—Ç–∞–ª–æ—Å—å: {quantity})\n"
            else:
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
                for item, details in items.items():
                    price = details.get('—Ü–µ–Ω–∞', '?')
                    quantity = details.get('–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ', '?')
                    items_message += f"- {item}: {price} –∑–æ–ª–æ—Ç–∞ (–æ—Å—Ç–∞–ª–æ—Å—å: {quantity})\n"
            items_message += "\n"

        if has_items:
            markup = InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(text="üõçÔ∏è –ö—É–ø–∏—Ç—å", callback_data="trader_buy"),
                    InlineKeyboardButton(text="üí∞ –ü—Ä–æ–¥–∞—Ç—å", callback_data="trader_sell")
                ],
                [
                    InlineKeyboardButton(text="üö™ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø—É—Ç—å", callback_data="continue_path")
                ]
            ])

            # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–æ–≤–∞—Ä–∞–º–∏, –µ—Å–ª–∏ –µ—Å—Ç—å
            if 'last_trader_msg' in user_data[chat_id]:
                try:
                    await bot.delete_message(chat_id, user_data[chat_id]['last_trader_msg'])
                except:
                    pass

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            sent_msg = await message.answer(
                items_message,
                reply_markup=markup,
                parse_mode="HTML"
            )
            user_data[chat_id]['last_trader_msg'] = sent_msg.message_id
        else:
            await message.answer("üòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–µ–π—á–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏.")

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ enter_trader_room: {e}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ–º–Ω–∞—Ç—ã —Ç–æ—Ä–≥–æ–≤—Ü–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –ø—É–ª–∞ —Å–ª—É—á–∞–π–Ω—ã–º–∏ —Ç–æ–≤–∞—Ä–∞–º–∏
def fill_trader_items_pool():
    trader_items_pool = {
        "–ú–∞—Ç–µ—Ä–∏–∞–ª—ã": {},
        "–†–µ—Ü–µ–ø—Ç—ã": {
            "recipes_weapon": {},
            "recipes_armor": {},
        },
        "–ë—Ä–æ–Ω—è": {},
        "–û—Ä—É–∂–∏–µ": {},
        "–ê—Ä—Ç–µ—Ñ–∞–∫—Ç—ã": {}
    }

    for category in trader_items_pool.keys():
        if category == "–†–µ—Ü–µ–ø—Ç—ã":
            for subcategory in trader_items_pool["–†–µ—Ü–µ–ø—Ç—ã"].keys():
                items = Pool_item_Diryk.get("trader_items", {}).get("–†–µ—Ü–µ–ø—Ç—ã", {}).get(subcategory, {})
                count = 1
                available_items = list(items.keys())
                selected_items = random.sample(available_items,
                                               min(count, len(available_items))) if available_items else []

                for item in selected_items:
                    trader_items_pool["–†–µ—Ü–µ–ø—Ç—ã"][subcategory][item] = {
                        "—Ü–µ–Ω–∞": items[item].get("—Ü–µ–Ω–∞", 100),  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                        "–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ": items[item].get("–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ", 1),
                        "–º–∞—Ç–µ—Ä–∏–∞–ª—ã": items[item].get("–º–∞—Ç–µ—Ä–∏–∞–ª—ã", {})
                    }
        else:
            items = Pool_item_Diryk.get("trader_items", {}).get(category, {})
            count = 3 if category == "–ú–∞—Ç–µ—Ä–∏–∞–ª—ã" else 2
            available_items = list(items.keys())
            selected_items = random.sample(available_items, min(count, len(available_items))) if available_items else []

            for item in selected_items:
                trader_items_pool[category][item] = {
                    "—Ü–µ–Ω–∞": items[item].get("—Ü–µ–Ω–∞", 50),  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                    "–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ": items[item].get("–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ", 1)
                }

    return (trader_items_pool)


@dp.callback_query(lambda call: call.data == "trader_buy")
async def buy_items(call: types.CallbackQuery):
    chat_id = call.message.chat.id

    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        gold = user_data.get(chat_id, {}).get('gold', 0)
        trader_items_pool = user_data.get(chat_id, {}).get('trader_items_pool', {})

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        items_list = f"üí∞ –í–∞—à–µ –∑–æ–ª–æ—Ç–æ: {gold}\n\n–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã:\n"
        has_items = False

        for category, items in trader_items_pool.items():
            if not items:
                continue

            has_items = True
            items_list += f"\n<b>{category}:</b>\n"

            if category == "–†–µ—Ü–µ–ø—Ç—ã":
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ä–µ—Ü–µ–ø—Ç–æ–≤
                for subcat, subitems in items.items():
                    if not subitems:
                        continue
                    items_list += f"  <i>{subcat.replace('_', ' ').title()}:</i>\n"
                    for item, details in subitems.items():
                        price = details.get('—Ü–µ–Ω–∞', 'N/A')
                        quantity = details.get('–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ', 'N/A')
                        items_list += f"  - {item}: {price} –∑–æ–ª–æ—Ç–∞ (–æ—Å—Ç–∞–ª–æ—Å—å: {quantity})\n"
            else:
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
                for item, details in items.items():
                    price = details.get('—Ü–µ–Ω–∞', 'N/A')
                    quantity = details.get('–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ', 'N/A')
                    items_list += f"- {item}: {price} –∑–æ–ª–æ—Ç–∞ (–æ—Å—Ç–∞–ª–æ—Å—å: {quantity})\n"

        if not has_items:
            await call.answer("üòî –¢–æ–≤–∞—Ä—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")
            return

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        markup = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="üì¶ –ú–∞—Ç–µ—Ä–∏–∞–ª—ã", callback_data="buy_category_–ú–∞—Ç–µ—Ä–∏–∞–ª—ã"),
                InlineKeyboardButton(text="üìú –†–µ—Ü–µ–ø—Ç—ã", callback_data="buy_category_–†–µ—Ü–µ–ø—Ç—ã")
            ],
            [
                #  InlineKeyboardButton(text="üíé –ê—Ä—Ç–µ—Ñ–∞–∫—Ç—ã", callback_data="buy_category_–ê—Ä—Ç–µ—Ñ–∞–∫—Ç—ã"),
                InlineKeyboardButton(text="‚öîÔ∏è –û—Ä—É–∂–∏–µ", callback_data="buy_category_–û—Ä—É–∂–∏–µ"),
                InlineKeyboardButton(text="üõ°Ô∏è –ë—Ä–æ–Ω—è", callback_data="buy_category_–ë—Ä–æ–Ω—è")
            ],
            [
                InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="trader_room_back")
            ]
        ])

        await call.message.edit_text(
            text=items_list + "\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
            reply_markup=markup,
            parse_mode="HTML"
        )

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ buy_items: {e}")
        await call.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


async def buy_materials(call: types.CallbackQuery):
    chat_id = call.message.chat.id

    try:
        trader_items = user_data[chat_id].get('trader_items_pool', {}).get('–ú–∞—Ç–µ—Ä–∏–∞–ª—ã', {})
        gold = user_data[chat_id].get('gold', 0)

        if not trader_items:
            await call.answer("–ú–∞—Ç–µ—Ä–∏–∞–ª—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç", show_alert=True)
            return

        markup = InlineKeyboardMarkup(inline_keyboard=[])
        buttons = []

        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞
        for item, details in trader_items.items():
            price = details['—Ü–µ–Ω–∞']
            quantity = details['–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ']
            disabled = gold < price or quantity <= 0

            buttons.append([
                InlineKeyboardButton(
                    text=f"{item} ({price} –∑–æ–ª–æ—Ç–∞) {'‚ùå' if disabled else '‚úÖ'}",
                    callback_data=f"buy_mat_{item}" if not disabled else "cant_buy"
                )
            ])

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –Ω–∞–∑–∞–¥
        buttons.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="trader_buy")])
        markup.inline_keyboard = buttons

        await call.message.edit_text(
            text=f"üí∞ –í–∞—à–µ –∑–æ–ª–æ—Ç–æ: {gold}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª –¥–ª—è –ø–æ–∫—É–ø–∫–∏:",
            reply_markup=markup
        )

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ buy_materials: {e}")
        await call.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


async def buy_armor(call: types.CallbackQuery):
    chat_id = call.message.chat.id

    try:
        trader_items = user_data[chat_id].get('trader_items_pool', {}).get('–ë—Ä–æ–Ω—è', {})
        gold = user_data[chat_id].get('gold', 0)

        if not trader_items:
            await call.answer("–ë—Ä–æ–Ω—è –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç", show_alert=True)
            return

        markup = InlineKeyboardMarkup(inline_keyboard=[])
        buttons = []

        for item, details in trader_items.items():
            price = details['—Ü–µ–Ω–∞']
            quantity = details['–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ']
            disabled = gold < price or quantity <= 0

            buttons.append([
                InlineKeyboardButton(
                    text=f"{item} ({price} –∑–æ–ª–æ—Ç–∞) {'‚ùå' if disabled else 'üõ°Ô∏è'}",
                    callback_data=f"buy_armor_{item}" if not disabled else "cant_buy"
                )
            ])

        buttons.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="trader_buy")])
        markup.inline_keyboard = buttons

        await call.message.edit_text(
            text=f"üí∞ –í–∞—à–µ –∑–æ–ª–æ—Ç–æ: {gold}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –±—Ä–æ–Ω—é –¥–ª—è –ø–æ–∫—É–ø–∫–∏:",
            reply_markup=markup
        )

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ buy_armor: {e}")
        await call.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


async def buy_weapons(call: types.CallbackQuery):
    chat_id = call.message.chat.id

    try:
        trader_items = user_data[chat_id].get('trader_items_pool', {}).get('–û—Ä—É–∂–∏–µ', {})
        gold = user_data[chat_id].get('gold', 0)

        if not trader_items:
            await call.answer("–û—Ä—É–∂–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç", show_alert=True)
            return

        markup = InlineKeyboardMarkup(inline_keyboard=[])
        buttons = []

        for item, details in trader_items.items():
            price = details['—Ü–µ–Ω–∞']
            quantity = details['–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ']
            disabled = gold < price or quantity <= 0

            buttons.append([
                InlineKeyboardButton(
                    text=f"{item} ({price} –∑–æ–ª–æ—Ç–∞) {'‚ùå' if disabled else '‚öîÔ∏è'}",
                    callback_data=f"buy_weapon_{item}" if not disabled else "cant_buy"
                )
            ])

        buttons.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="trader_buy")])
        markup.inline_keyboard = buttons

        await call.message.edit_text(
            text=f"üí∞ –í–∞—à–µ –∑–æ–ª–æ—Ç–æ: {gold}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ä—É–∂–∏–µ –¥–ª—è –ø–æ–∫—É–ø–∫–∏:",
            reply_markup=markup
        )

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ buy_weapons: {e}")
        await call.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


async def buy_artifacts(call: types.CallbackQuery):
    chat_id = call.message.chat.id

    try:
        trader_items = user_data[chat_id].get('trader_items_pool', {}).get('–ê—Ä—Ç–µ—Ñ–∞–∫—Ç—ã', {})
        gold = user_data[chat_id].get('gold', 0)

        if not trader_items:
            await call.answer("–ê—Ä—Ç–µ—Ñ–∞–∫—Ç—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç", show_alert=True)
            return

        markup = InlineKeyboardMarkup(inline_keyboard=[])
        buttons = []

        for item, details in trader_items.items():
            price = details['—Ü–µ–Ω–∞']
            quantity = details['–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ']
            disabled = gold < price or quantity <= 0

            buttons.append([
                InlineKeyboardButton(
                    text=f"{item} ({price} –∑–æ–ª–æ—Ç–∞) {'‚ùå' if disabled else '‚ú®'}",
                    callback_data=f"buy_artifact_{item}" if not disabled else "cant_buy"
                )
            ])

        buttons.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="trader_buy")])
        markup.inline_keyboard = buttons

        await call.message.edit_text(
            text=f"üí∞ –í–∞—à–µ –∑–æ–ª–æ—Ç–æ: {gold}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç –¥–ª—è –ø–æ–∫—É–ø–∫–∏:",
            reply_markup=markup
        )

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ buy_artifacts: {e}")
        await call.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


# –û–±–Ω–æ–≤–ª—ë–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è process_purchase
async def process_purchase(call: types.CallbackQuery, item_type: str, item_name: str):
    chat_id = call.message.chat.id
    user_id = call.from_user.id

    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ç–æ–≤–∞—Ä–µ
        if item_type.startswith("recipe_"):
            subcat = "recipes_armor" if item_type == "recipe_armor" else "recipes_weapon"
            category = "–†–µ—Ü–µ–ø—Ç—ã"
            item_data = user_data[chat_id]['trader_items_pool'][category][subcat][item_name]
        else:
            category_map = {
                "mat": "–ú–∞—Ç–µ—Ä–∏–∞–ª—ã",
                "armor": "–ë—Ä–æ–Ω—è",
                "weapon": "–û—Ä—É–∂–∏–µ",
                "artifact": "–ê—Ä—Ç–µ—Ñ–∞–∫—Ç—ã"
            }
            category = category_map[item_type]
            item_data = user_data[chat_id]['trader_items_pool'][category][item_name]

        price = item_data['—Ü–µ–Ω–∞']
        gold = user_data[user_id].get('gold', 0)

        # –ü—Ä–æ–≤–µ—Ä–∫–∏ –ø–µ—Ä–µ–¥ –ø–æ–∫—É–ø–∫–æ–π
        if gold < price:
            await call.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–æ–ª–æ—Ç–∞", show_alert=True)
            return

        if item_data['–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ'] <= 0:
            await call.answer("–¢–æ–≤–∞—Ä –∑–∞–∫–æ–Ω—á–∏–ª—Å—è", show_alert=True)
            return

        # –°–æ–≤–µ—Ä—à–∞–µ–º –ø–æ–∫—É–ø–∫—É
        user_data[user_id]['gold'] -= price
        item_data['–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ'] -= 1

        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥–º–µ—Ç –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å
        if item_type == "mat":
            user_data[user_id]["material_user"][item_name] = user_data[user_id]["material_user"].get(item_name, 0) + 1

        elif item_type == "armor":
            if item_name not in user_data[user_id]["BR"]:
                # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—ã –±—Ä–æ–Ω–∏ –∏–∑ char_recipes
                armor_stats = char_recipes["armor_diryk"].get(item_name, {
                    'hp': 0,
                    'mana': 0,
                    'attack': 0,
                    'defense': 0,
                    'strength': 0,
                    'agility': 0,
                    'intelligence': 0,
                    'crit_chance': 0.0,
                    'crit_damage': 0.0
                })
                user_data[user_id]["BR"][item_name] = armor_stats

        elif item_type == "weapon":
            if item_name not in user_data[user_id]["AR"]:
                # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—ã –æ—Ä—É–∂–∏—è –∏–∑ char_recipes
                weapon_stats = char_recipes["weapon_diryk"].get(item_name, {
                    'hp': 0,
                    'mana': 0,
                    'attack': 0,
                    'defense': 0,
                    'strength': 0,
                    'agility': 0,
                    'intelligence': 0,
                    'crit_chance': 0.0,
                    'crit_damage': 0.0
                })
                user_data[user_id]["AR"][item_name] = weapon_stats

        elif item_type == "artifact":
            user_data[user_id]["–ê—Ä—Ç–µ—Ñ–∞–∫—Ç—ã"][item_name] = user_data[user_id]["–ê—Ä—Ç–µ—Ñ–∞–∫—Ç—ã"].get(item_name, 0) + 1
            if item_name in SPECIAL_SKILLS:
                user_data[user_id]["special_skills"][item_name] = SPECIAL_SKILLS[item_name]

        elif item_type.startswith("recipe_"):
            subcat = "recipes_armor" if item_type == "recipe_armor" else "recipes_weapon"
            if item_name not in user_data[user_id]["recipes"][subcat]:
                # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ—Ü–µ–ø—Ç —Å –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º–∏ –∏–∑ all_recipes_mater
                materials = all_recipes_mater[subcat].get(item_name, {})
                user_data[user_id]["recipes"][subcat][item_name] = materials

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
        save_data()

        await call.answer(f"–í—ã —É—Å–ø–µ—à–Ω–æ –∫—É–ø–∏–ª–∏ {item_name} –∑–∞ {price} –∑–æ–ª–æ—Ç–∞!", show_alert=True)

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ –º–µ–Ω—é
        handler_map = {
            "mat": buy_materials,
            "armor": buy_armor,
            "weapon": buy_weapons,
            "recipe_armor": buy_recipes,
            "recipe_weapon": buy_recipes,
            "artifact": buy_artifacts
        }
        await handler_map[item_type](call)

    except KeyError as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∫–ª—é—á–∞ –≤ process_purchase: {e}", exc_info=True)
        await call.answer("–ü—Ä–µ–¥–º–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –º–∞–≥–∞–∑–∏–Ω–µ", show_alert=True)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ process_purchase: {e}", exc_info=True)
        await call.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ", show_alert=True)


# –ú–∞–ø–ø–∏–Ω–≥ —Ç–∏–ø–æ–≤ –ø—Ä–µ–¥–º–µ—Ç–æ–≤
ITEM_TYPE_MAPPING = {
    "material": "–ú–∞—Ç–µ—Ä–∏–∞–ª—ã",
    "armor": "–ë—Ä–æ–Ω—è",
    "weapon": "–û—Ä—É–∂–∏–µ",
    "artifact": "–ê—Ä—Ç–µ—Ñ–∞–∫—Ç—ã"
}


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
# ======================================–ø–æ–∫—É–ø–∫–∞====================================#
@dp.callback_query(lambda call: call.data.startswith("buy_category_"))
async def handle_buy_category(call: types.CallbackQuery):
    category = call.data.split("_")[-1]

    if category == "–ú–∞—Ç–µ—Ä–∏–∞–ª—ã":
        await buy_materials(call)
    elif category == "–ë—Ä–æ–Ω—è":
        await buy_armor(call)
    elif category == "–û—Ä—É–∂–∏–µ":
        await buy_weapons(call)
    elif category == "–†–µ—Ü–µ–ø—Ç—ã":
        await buy_recipes(call)  # –ò–∑–º–µ–Ω–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
    elif category == "–ê—Ä—Ç–µ—Ñ–∞–∫—Ç—ã":
        await buy_artifacts(call)


async def buy_recipes(call: types.CallbackQuery):
    chat_id = call.message.chat.id

    try:
        trader_items = user_data[chat_id].get('trader_items_pool', {}).get('–†–µ—Ü–µ–ø—Ç—ã', {})
        gold = user_data[chat_id].get('gold', 0)

        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Ä–µ—Ü–µ–ø—Ç—ã –≤–º–µ—Å—Ç–µ
        all_recipes = {}
        for subcat in trader_items.values():
            if isinstance(subcat, dict):
                all_recipes.update(subcat)

        if not all_recipes:
            await call.answer("–†–µ—Ü–µ–ø—Ç—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç", show_alert=True)
            return

        markup = InlineKeyboardMarkup(inline_keyboard=[])
        buttons = []

        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–µ—Ü–µ–ø—Ç–æ–≤
        for item_name, details in all_recipes.items():
            price = details.get('—Ü–µ–Ω–∞', 0)
            quantity = details.get('–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ', 0)
            disabled = gold < price or quantity <= 0

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç–º–æ–¥–∑–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ä–µ—Ü–µ–ø—Ç–∞
            emoji = "üìú"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
            if item_name in trader_items.get('recipes_weapon', {}):
                emoji = "‚öîÔ∏è"
            elif item_name in trader_items.get('recipes_armor', {}):
                emoji = "üõ°Ô∏è"

            buttons.append([
                InlineKeyboardButton(
                    text=f"{emoji} {item_name} ({price} –∑–æ–ª–æ—Ç–∞) {'‚ùå' if disabled else '‚úÖ'}",
                    callback_data=f"buy_recipe_{item_name}" if not disabled else "cant_buy"
                )
            ])

        buttons.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="trader_buy")])
        markup.inline_keyboard = buttons

        await call.message.edit_text(
            text=f"üí∞ –í–∞—à–µ –∑–æ–ª–æ—Ç–æ: {gold}\n\n–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã:",
            reply_markup=markup
        )

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ buy_recipes: {e}")
        await call.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


@dp.callback_query(lambda call: call.data.startswith("buy_recipe_"))
async def handle_buy_recipe(call: types.CallbackQuery):
    chat_id = call.message.chat.id
    user_id = call.from_user.id
    item_name = call.data.split("_", 2)[-1]

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
    if user_id not in user_data:
        user_data[user_id] = {
            'material_user': defaultdict(int),
            'recipes': {
                'recipes_weapon': {},
                'recipes_armor': {}
            },
            'AR': {},
            'BR': {},
            'hero_stats': {},
            'gold': 0
        }

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ä–µ—Ü–µ–ø—Ç–∞
    trader_items = user_data[chat_id].get('trader_items_pool', {}).get('–†–µ—Ü–µ–ø—Ç—ã', {})

    if item_name in trader_items.get('recipes_weapon', {}):
        recipe_type = "recipe_weapon"
    elif item_name in trader_items.get('recipes_armor', {}):
        recipe_type = "recipe_armor"
    else:
        recipe_type = "recipe_other"

    await process_purchase(call, recipe_type, item_name)


@dp.callback_query(lambda call: call.data.startswith("buy_mat_"))
async def handle_buy_material(call: types.CallbackQuery):
    user_id = call.from_user.id
    item_name = call.data.split("_")[-1]

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id not in user_data:
        user_data[user_id] = {
            'material_user': defaultdict(int),
            'recipes': {
                'recipes_weapon': {},
                'recipes_armor': {}
            },
            'AR': {},
            'BR': {},
            'hero_stats': {},
            'gold': 0
        }

    await process_purchase(call, "mat", item_name)


@dp.callback_query(lambda call: call.data.startswith("buy_armor_"))
async def handle_buy_armor(call: types.CallbackQuery):
    user_id = call.from_user.id
    item_name = call.data.split("_")[-1]

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id not in user_data:
        user_data[user_id] = {
            'material_user': defaultdict(int),
            'recipes': {
                'recipes_weapon': {},
                'recipes_armor': {}
            },
            'AR': {},
            'BR': {},
            'hero_stats': {},
            'gold': 0
        }

    await process_purchase(call, "armor", item_name)


@dp.callback_query(lambda call: call.data.startswith("buy_weapon_"))
async def handle_buy_weapon(call: types.CallbackQuery):
    user_id = call.from_user.id
    item_name = call.data.split("_")[-1]

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id not in user_data:
        user_data[user_id] = {
            'material_user': defaultdict(int),
            'recipes': {
                'recipes_weapon': {},
                'recipes_armor': {}
            },
            'AR': {},
            'BR': {},
            'hero_stats': {},
            'gold': 0
        }

    await process_purchase(call, "weapon", item_name)


@dp.callback_query(lambda call: call.data.startswith("buy_artifact_"))
async def handle_buy_artifact(call: types.CallbackQuery):
    user_id = call.from_user.id
    item_name = call.data.split("_")[-1]

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id not in user_data:
        user_data[user_id] = {
            'material_user': defaultdict(int),
            'recipes': {
                'recipes_weapon': {},
                'recipes_armor': {}
            },
            'AR': {},
            'BR': {},
            'hero_stats': {},
            'gold': 0,
            '–ê—Ä—Ç–µ—Ñ–∞–∫—Ç—ã': {},
            'special_skills': {}
        }

    await process_purchase(call, "artifact", item_name)


@dp.callback_query(lambda call: call.data in ["buy_back_to_trader", "buy_back_to_categories"])
async def handle_buy_back(call: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é —Ç–æ—Ä–≥–æ–≤—Ü–∞"""
    chat_id = call.message.chat.id

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é —Ç–æ—Ä–≥–æ–≤—Ü–∞
    markup = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üõçÔ∏è –ö—É–ø–∏—Ç—å", callback_data="trader_buy"),
            InlineKeyboardButton(text="üí∞ –ü—Ä–æ–¥–∞—Ç—å", callback_data="trader_sell")
        ],
        [
            InlineKeyboardButton(text="üö™ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø—É—Ç—å", callback_data="continue_path")
        ]
    ])

    await call.message.edit_text(
        "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Ç–æ—Ä–≥–æ–≤—Ü–∞:",
        reply_markup=markup
    )


# ======================================–ø–æ–∫—É–ø–∫–∞====================================#


# ======================================–ø—Ä–æ–¥–∞–∂–∞====================================#

@dp.callback_query(lambda call: call.data == "trader_sell")
async def sell_items_menu(call: types.CallbackQuery):
    chat_id = call.message.chat.id
    gold = user_data[chat_id].get('gold', 0)

    markup = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üì¶ –ú–∞—Ç–µ—Ä–∏–∞–ª—ã", callback_data="sell_category_mat"),
            # InlineKeyboardButton(text="üíé –ê—Ä—Ç–µ—Ñ–∞–∫—Ç—ã", callback_data="sell_category_artifact"),
        ],
        [
            InlineKeyboardButton(text="‚öîÔ∏è –û—Ä—É–∂–∏–µ", callback_data="sell_category_weapon"),
            InlineKeyboardButton(text="üõ°Ô∏è –ë—Ä–æ–Ω—è", callback_data="sell_category_armor"),

        ],
        [
            InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="trader_room_back")
        ]
    ])

    await call.message.edit_text(
        f"üí∞ –í–∞—à–µ –∑–æ–ª–æ—Ç–æ: {gold}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏:",
        reply_markup=markup
    )


def get_sell_price(item_name: str) -> int:
    """–ü–æ–ª—É—á–∞–µ—Ç —Ü–µ–Ω—É –ø—Ä–æ–¥–∞–∂–∏ (30% –æ—Ç —Ü–µ–Ω—ã –ø–æ–∫—É–ø–∫–∏)"""
    # –ò—â–µ–º –ø—Ä–µ–¥–º–µ—Ç –≤–æ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö
    for category in Pool_item_Diryk["trader_items"].values():
        if isinstance(category, dict) and item_name in category:
            buy_price = category[item_name].get("—Ü–µ–Ω–∞", 0)
            return max(1, int(buy_price * 0.15))  # –ú–∏–Ω–∏–º—É–º 1 –∑–æ–ª–æ—Ç–æ

    # –î–ª—è —Ä–µ—Ü–µ–ø—Ç–æ–≤ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    recipes = Pool_item_Diryk["trader_items"].get("–†–µ—Ü–µ–ø—Ç—ã", {})
    for subcat in recipes.values():
        if isinstance(subcat, dict) and item_name in subcat:
            buy_price = subcat[item_name].get("—Ü–µ–Ω–∞", 0)
            return max(1, int(buy_price * 0.3))

    return 1  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é


@dp.callback_query(lambda call: call.data.startswith("sell_category_"))
async def handle_sell_category(call: types.CallbackQuery):
    category = call.data.split("_")[-1]
    await sell_category_items(call, category)


async def sell_category_items(call: types.CallbackQuery, category: str, force_update: bool = False):
    chat_id = call.message.chat.id

    try:
        items = {}
        category_name = ""
        emoji = ""

        if category == "mat":
            items = user_data[chat_id].get("material_user", {})
            category_name = "üì¶ –ú–∞—Ç–µ—Ä–∏–∞–ª—ã"
            emoji = "üì¶"
        elif category == "armor":
            armor_items = user_data[chat_id].get("BR", {})
            items = {name: 1 for name in armor_items.keys()}
            category_name = "üõ°Ô∏è –ë—Ä–æ–Ω—è"
            emoji = "üõ°Ô∏è"
        elif category == "weapon":
            weapon_items = user_data[chat_id].get("AR", {})
            items = {name: 1 for name in weapon_items.keys()}
            category_name = "‚öîÔ∏è –û—Ä—É–∂–∏–µ"
            emoji = "‚öîÔ∏è"
        elif category == "artifact":
            items = user_data[chat_id].get("–ê—Ä—Ç–µ—Ñ–∞–∫—Ç—ã", {})
            category_name = "üíé –ê—Ä—Ç–µ—Ñ–∞–∫—Ç—ã"
            emoji = "üíé"

        if not items:
            await call.answer(f"–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category_name}!", show_alert=True)
            await sell_items_menu(call)  # –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            return

        buttons = []
        for item_name, amount in items.items():
            if (isinstance(amount, int) and amount > 0) or (not isinstance(amount, int)):
                sell_price = get_sell_price(item_name)
                display_text = f"{emoji} {item_name}"

                if isinstance(amount, int):
                    display_text += f" ({amount} —à—Ç.)"

                display_text += f" - {sell_price} –∑–æ–ª–æ—Ç–∞"

                buttons.append([
                    InlineKeyboardButton(
                        text=display_text,
                        callback_data=f"sell_{category}_{item_name}"
                    )
                ])

        if not buttons:
            await call.answer(f"–ù–µ—Ç –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏ –≤ {category_name}!", show_alert=True)
            await sell_items_menu(call)  # –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            return

        buttons.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="trader_sell")])
        markup = InlineKeyboardMarkup(inline_keyboard=buttons)

        # –î–æ–±–∞–≤–ª—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –æ—à–∏–±–∫–∏ "message not modified"
        timestamp = int(time.time())
        message_text = f"{category_name} –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏:\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç:\n(–æ–±–Ω–æ–≤–ª–µ–Ω–æ: {timestamp})" if force_update else f"{category_name} –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏:\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç:"

        try:
            await call.message.edit_text(
                text=message_text,
                reply_markup=markup
            )
        except TelegramBadRequest as e:
            if "message is not modified" in str(e):
                # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, –ø—Ä–æ—Å—Ç–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
                pass
            else:
                raise
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
        save_data()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ sell_category_items: {e}", exc_info=True)
        await call.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)


@dp.callback_query(lambda call: call.data.startswith("sell_"))
async def process_sale(call: types.CallbackQuery):
    chat_id = call.message.chat.id
    data = call.data.split("_")

    try:
        if len(data) < 3:
            raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback_data")

        category = data[1]
        item_name = "_".join(data[2:])
        items_left = True  # –§–ª–∞–≥, –æ—Å—Ç–∞–ª–∏—Å—å –ª–∏ –µ—â–µ –ø—Ä–µ–¥–º–µ—Ç—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏

        # –ü–æ–ª—É—á–∞–µ–º –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
        if category == "mat":
            inventory = user_data[chat_id].get("material_user", {})
            if item_name in inventory and inventory[item_name] > 0:
                inventory[item_name] -= 1
                if inventory[item_name] <= 0:
                    del inventory[item_name]
                items_left = len(inventory) > 0
        elif category == "armor":
            inventory = user_data[chat_id].get("BR", {})
            if item_name in inventory:
                del inventory[item_name]
            items_left = len(inventory) > 0
        elif category == "weapon":
            inventory = user_data[chat_id].get("AR", {})
            if item_name in inventory:
                del inventory[item_name]
            items_left = len(inventory) > 0
        elif category == "artifact":
            inventory = user_data[chat_id].get("–ê—Ä—Ç–µ—Ñ–∞–∫—Ç—ã", {})
            special_skills = user_data[chat_id].get("special_skills", {})

            if item_name in inventory and inventory[item_name] > 0:
                # –£–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–ª–∏ —É–¥–∞–ª—è–µ–º –∞—Ä—Ç–µ—Ñ–∞–∫—Ç
                inventory[item_name] -= 1
                if inventory[item_name] <= 0:
                    del inventory[item_name]

                # –£–¥–∞–ª—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π special_skill, –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                if item_name in special_skills:
                    del special_skills[item_name]

                items_left = len(inventory) > 0
        elif category == "recipe":
            recipes = user_data[chat_id].get("recipes", {})
            for subcat in ["recipes_armor", "recipes_weapon"]:
                if subcat in recipes and item_name in recipes[subcat]:
                    if isinstance(recipes[subcat][item_name], dict):
                        if recipes[subcat][item_name].get("–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ", 0) > 0:
                            recipes[subcat][item_name]["–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ"] -= 1
                            if recipes[subcat][item_name]["–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ"] <= 0:
                                del recipes[subcat][item_name]
                    else:
                        if recipes[subcat][item_name] > 0:
                            recipes[subcat][item_name] -= 1
                            if recipes[subcat][item_name] <= 0:
                                del recipes[subcat][item_name]
                    break
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Å—Ç–∞–ª–∏—Å—å –ª–∏ —Ä–µ—Ü–µ–ø—Ç—ã
            items_left = any(
                len(recipes.get(subcat, {})) > 0
                for subcat in ["recipes_armor", "recipes_weapon"]
            )

        # –ù–∞—á–∏—Å–ª—è–µ–º –∑–æ–ª–æ—Ç–æ
        sell_price = get_sell_price(item_name)
        user_data[chat_id]['gold'] = user_data[chat_id].get('gold', 0) + sell_price

        await call.answer(f"‚úÖ –í—ã –ø—Ä–æ–¥–∞–ª–∏ {item_name} –∑–∞ {sell_price} –∑–æ–ª–æ—Ç–∞!", show_alert=True)

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –ª–∏–±–æ –≤ –º–µ–Ω—é –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –ª–∏–±–æ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø—Ä–æ–¥–∞–∂
        if items_left:
            await sell_category_items(call, category)
        else:
            await sell_items_menu(call)  # –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø—Ä–æ–¥–∞–∂

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ process_sale: {e}", exc_info=True)
        await call.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–¥–∞–∂–µ", show_alert=True)


@dp.callback_query(lambda call: call.data == "trader_room_back")
async def back_to_trader_menu(call: types.CallbackQuery):
    await handle_buy_back(call)  # –ü—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ–¥–∞–µ–º call, —Ç–∞–∫ –∫–∞–∫ –æ–Ω —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è CallbackQuery


@dp.callback_query(lambda call: call.data in ["sell_back", "sell_back_to_menu"])
async def sell_back_handler(call: types.CallbackQuery, bot: Bot):
    if call.data == "sell_back":
        await enter_trader_room(call.message, bot)
    elif call.data == "sell_back_to_menu":
        await sell_items_menu(call)


# ======================================–ø—Ä–æ–¥–∞–∂–∞====================================#
# ======================================–¢–æ—Ä–≥–æ–≤–µ—Ü====================================#


# ======================================–î–≤–µ—Ä–∏====================================#
# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–≥—Ä—ã (–≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ)
ORIGINAL_DOORS_COUNT = 7
ORIGINAL_ATTEMPTS = 2
DOORS_COUNT = ORIGINAL_DOORS_COUNT
ATTEMPTS = ORIGINAL_ATTEMPTS
correct_door = 1


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /doors_room1
@dp.message(Command("doors_room1"))
async def enter_doors_room(message: types.Message, bot: Bot):
    global DOORS_COUNT, ATTEMPTS, correct_door
    DOORS_COUNT = 8  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–≤–µ—Ä–µ–π –¥–ª—è —ç—Ç–æ–π –∫–æ–º–Ω–∞—Ç—ã
    ATTEMPTS = 3  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
    correct_door = random.randint(1, DOORS_COUNT)
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∫–æ–º–Ω–∞—Ç–µ —Å –¥–≤–µ—Ä—å–º–∏
    await message.answer(f"–í—ã –≤–æ—à–ª–∏ –≤ –∫–æ–º–Ω–∞—Ç—É —Å –¥–≤–µ—Ä—å–º–∏! ")
    await asyncio.sleep(1)

    # –ü–æ–ª—É—á–∞–µ–º —Å–ª–æ–≤–∞—Ä—å —Å —Ñ–æ—Ç–æ –¥–≤–µ—Ä–µ–π
    door_photos = Photo_Diryk.get("–î–≤–µ—Ä–∏", {})

    if not door_photos:
        await message.answer("–§–æ—Ç–æ –¥–≤–µ—Ä–µ–π –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.")
        return

    # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ —Ñ–æ—Ç–æ
    random_photo_key = random.choice(list(door_photos.keys()))
    photo_path = door_photos[random_photo_key]

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
    try:
        photo = FSInputFile(photo_path)
        await message.answer_photo(photo)
    except FileNotFoundError:
        await message.answer("–§–æ—Ç–æ –¥–≤–µ—Ä–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–Ω–∞—Ç—ã

    await message.answer(f"–í—ã –≤ –∫–æ–º–Ω–∞—Ç–µ —Å {DOORS_COUNT} –¥–≤–µ—Ä—å–º–∏."
                         f"\n –£ –≤–∞—Å {ATTEMPTS} –ø–æ–ø—ã—Ç–∫–∏ –Ω–∞–π—Ç–∏ –≤—ã—Ö–æ–¥!")
    await asyncio.sleep(1)

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –¥–≤–µ—Ä–µ–π
    door_buttons = []
    for i in range(1, DOORS_COUNT + 1):
        door_buttons.append(InlineKeyboardButton(text=f"üö™", callback_data=f"door_{i}"))

    # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —Ä—è–¥—ã –ø–æ 3 –∫–Ω–æ–ø–∫–∏
    keyboard = [door_buttons[i:i + 8] for i in range(0, len(door_buttons), 8)]
    markup = InlineKeyboardMarkup(inline_keyboard=keyboard)

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–≤–µ—Ä—å:", reply_markup=markup)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –¥–≤–µ—Ä–∏
@dp.callback_query(lambda c: c.data.startswith('door_'))
async def process_door(callback: types.CallbackQuery):
    global ATTEMPTS, correct_door, DOORS_COUNT
    user_id = callback.from_user.id

    selected_door = int(callback.data.split('_')[1])
    direction = "–ø—Ä–∞–≤–µ–µ" if selected_door < correct_door else "–ª–µ–≤–µ–µ"

    # –ü–æ–ª—É—á–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ HP
    max_hp = user_data[user_id]['hero_stats']['hp_max']
    current_hp = user_data[user_id]['hero_stats']['hp']

    if selected_door == correct_door:
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–µ—Ä–µ–¥ –≤—ã—Ö–æ–¥–æ–º
        DOORS_COUNT = ORIGINAL_DOORS_COUNT
        ATTEMPTS = ORIGINAL_ATTEMPTS

        markup = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø—É—Ç—å", callback_data="continue_path")]
        ])
        await callback.message.edit_text(
            "üéä –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –Ω–∞—à–ª–∏ –≤—ã—Ö–æ–¥ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç–µ—Å—å –≤ –æ–±—ã—á–Ω—ã–π –ª–∞–±–∏—Ä–∏–Ω—Ç.",
            reply_markup=markup
        )
    else:
        ATTEMPTS -= 1

        if ATTEMPTS > 0:
            await callback.answer(f"–ù–µ–≤–µ—Ä–Ω–æ! –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –¥–≤–µ—Ä—å {direction}. –û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫: {ATTEMPTS}")
        else:
            # –û—Ç–Ω–∏–º–∞–µ–º 10% HP
            hp_loss = int(max_hp * 0.1)  # –£–º–µ–Ω—å—à–∞–µ–º –∑–¥–æ—Ä–æ–≤—å–µ –Ω–∞ 10% –æ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ
            user_data[user_id]['hero_stats']['hp'] = max(0, current_hp - hp_loss)  # –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç —É–ø–∞—Å—Ç—å –¥–æ 0

            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            DOORS_COUNT = ORIGINAL_DOORS_COUNT
            ATTEMPTS = ORIGINAL_ATTEMPTS

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ—Ç–µ—Ä–µ HP
            hp_message = (
                f"üí¢ –ü–æ–ø—ã—Ç–∫–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å! –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –¥–≤–µ—Ä—å –±—ã–ª–∞ {direction}.\n"
                f"‚ùå –í—ã –ø–æ—Ç–µ—Ä—è–ª–∏ {hp_loss} HP (10% –æ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ).\n"
                f"‚ù§Ô∏è –û—Å—Ç–∞–ª–æ—Å—å HP: {user_data[user_id]['hero_stats']['hp']}/{max_hp}"  # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º max_hp
            )

            if user_data[user_id]['hero_stats']['hp'] <= 0:
                # –ï—Å–ª–∏ HP –º–µ–Ω—å—à–µ –∏–ª–∏ —Ä–∞–≤–Ω–æ 0 - –≤—ã—Ö–æ–¥ –∏–∑ –ª–∞–±–∏—Ä–∏–Ω—Ç–∞
                exit_markup = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üö™ –í—ã–π—Ç–∏ –∏–∑ –ª–∞–±–∏—Ä–∏–Ω—Ç–∞", callback_data="exit_maze")]
                ])
                await callback.message.edit_text(
                    f"{hp_message}\n\n"
                    "‚ò†Ô∏è –í—ã –ø–æ—Ç–µ—Ä—è–ª–∏ —Å–æ–∑–Ω–∞–Ω–∏–µ –æ—Ç –ø–æ—Ç–µ—Ä–∏ –∑–¥–æ—Ä–æ–≤—å—è!",
                    reply_markup=exit_markup
                )
            else:
                # –ï—Å–ª–∏ HP > 0 - –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
                continue_btn = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚û°Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø—É—Ç—å", callback_data="continue_path")]
                ])
                save_data()
                await callback.message.edit_text(hp_message)
                await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞–ª—å–Ω–µ–π—à–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=continue_btn)

    await callback.answer()


# ======================================–î–≤–µ—Ä–∏====================================#


# ======================================–ó–µ—Ä–∫–∞–ª–∞====================================#
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /mirror_hall1
@dp.message(Command("mirror_hall1"))
async def enter_mirror_hall(message: types.Message, bot: Bot):
    chat_id = message.chat.id
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_stats = user_data[chat_id]['hero_stats']
    await message.answer("–í—ã –≤–æ—à–ª–∏ –≤ –ó–∞–ª –ó–µ—Ä–∫–∞–ª... –≤–∞—à–µ –æ—Ç—Ä–∞–∂–µ–Ω–∏–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ–ø–∞—Å–Ω—ã–º! ü™û")

    await asyncio.sleep(1)

    # –ü–æ–ª—É—á–∞–µ–º —Å–ª–æ–≤–∞—Ä—å —Å —Ñ–æ—Ç–æ –∑–∞–ª–∞ –∑–µ—Ä–∫–∞–ª
    mirror_photos = Photo_Diryk.get("–ó–∞–ª –ó–µ—Ä–∫–∞–ª", {})

    if not mirror_photos:
        await message.answer("ü™û –ó–µ—Ä–∫–∞–ª–∞ —Å–µ–≥–æ–¥–Ω—è –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç...")
        return

    # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ —Ñ–æ—Ç–æ
    random_photo_key = random.choice(list(mirror_photos.keys()))
    photo_path = mirror_photos[random_photo_key]

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
    try:
        photo = FSInputFile(photo_path)
        await message.answer_photo(photo, caption=f"ü™û {random_photo_key}")
    except FileNotFoundError:
        await message.answer("ü™û –ó–µ—Ä–∫–∞–ª–∞ —Ä–∞–∑–±–∏–ª–∏—Å—å... (—Ñ–æ—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ)")

    # –í—Ä–∞–≥ –±—Ä–æ—Å–∞–µ—Ç –∫—É–±–∏–∫
    enemy_msg = await message.answer("–í–∞—à–µ –æ—Ç—Ä–∞–∂–µ–Ω–∏–µ –±—Ä–æ—Å–∞–µ—Ç –∫—É–±–∏–∫...")
    enemy_dice = await message.answer_dice(emoji='üé≤')
    enemy_roll = enemy_dice.dice.value

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –±—Ä–æ—Å–∫–∞ –≤—Ä–∞–≥–∞
    if chat_id not in user_data:
        user_data[chat_id] = {}
    user_data[chat_id]['mirror_hall_enemy_roll'] = enemy_roll

    await asyncio.sleep(5)  # –ñ–¥–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –±—Ä–æ—Å–∫–∞

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –±—Ä–æ—Å–∫–∞ –∏–≥—Ä–æ–∫–∞
    markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ë—Ä–æ—Å–∏—Ç—å –∫—É–±–∏–∫ üé≤", callback_data='mirror_hall_roll')]
    ])
    await message.answer("–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –±—Ä–æ—Å–∏—Ç—å –∫—É–±–∏–∫ –∏ —Å—Ä–∞–∑–∏—Ç—å—Å—è —Å –æ—Ç—Ä–∞–∂–µ–Ω–∏–µ–º:", reply_markup=markup)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –±—Ä–æ—Å–∫–∞ –∫—É–±–∏–∫–∞ –∏–≥—Ä–æ–∫–æ–º
@dp.callback_query(lambda call: call.data == 'mirror_hall_roll')
async def handle_mirror_roll(callback: types.CallbackQuery):
    chat_id = callback.message.chat.id
    user_id = callback.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –æ –≥–µ—Ä–æ–µ
    if user_id not in user_data or 'hero_stats' not in user_data[user_id]:
        await callback.answer("–î–∞–Ω–Ω—ã–µ –æ –≥–µ—Ä–æ–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç...")
        return

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –≥–µ—Ä–æ–µ
    hero_stats = user_data[user_id]['hero_stats']
    max_hp = hero_stats['hp_max']  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ HP

    # –ò–≥—Ä–æ–∫ –±—Ä–æ—Å–∞–µ—Ç –∫—É–±–∏–∫
    await callback.message.edit_reply_markup()  # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫—É
    roll_msg = await callback.message.answer(f"{callback.from_user.first_name} –±—Ä–æ—Å–∞–µ—Ç –∫—É–±–∏–∫...")
    player_dice = await callback.message.answer_dice(emoji='üé≤')
    player_roll = player_dice.dice.value

    await asyncio.sleep(4.5)  # –ñ–¥–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –±—Ä–æ—Å–∫–∞

    # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—Ä–∞–≥–∞
    enemy_roll = user_data.get(chat_id, {}).get('mirror_hall_enemy_roll', 1)

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –±–∏—Ç–≤—ã
    if player_roll > enemy_roll:
        result = "üéâ –í—ã –ø–æ–±–µ–¥–∏–ª–∏ —Å–≤–æ—ë –æ—Ç—Ä–∞–∂–µ–Ω–∏–µ!"
        result_message = (
            f"–†–µ–∑—É–ª—å—Ç–∞—Ç –±–∏—Ç–≤—ã:\n"
            f"–í–∞—à –±—Ä–æ—Å–æ–∫: {player_roll}\n"
            f"–ë—Ä–æ—Å–æ–∫ –æ—Ç—Ä–∞–∂–µ–Ω–∏—è: {enemy_roll}\n\n"
            f"{result}"
        )
        await callback.message.answer(result_message)
        continue_btn = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚û°Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø—É—Ç—å", callback_data="continue_path")]
        ])
        await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞–ª—å–Ω–µ–π—à–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=continue_btn)

    elif player_roll < enemy_roll:
        # –£–º–µ–Ω—å—à–∞–µ–º –∑–¥–æ—Ä–æ–≤—å–µ –Ω–∞ 10% –æ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ
        difficulty = "easy"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
        hp_loss = int(max_hp * {"easy": 0.1, "medium": 0.15, "hard": 0.2}[difficulty])

        # –£–º–µ–Ω—å—à–∞–µ–º –∑–¥–æ—Ä–æ–≤—å–µ –Ω–∞ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        hero_stats['hp'] -= hp_loss
        hero_stats['hp'] = max(hero_stats['hp'], 0)  # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –∑–¥–æ—Ä–æ–≤—å–µ –Ω–µ –º–µ–Ω—å—à–µ 0

        result = "‚ò†Ô∏è –í–∞—à–µ –æ—Ç—Ä–∞–∂–µ–Ω–∏–µ –æ–∫–∞–∑–∞–ª–æ—Å—å —Å–∏–ª—å–Ω–µ–µ..."
        hp_message = (
            f"–†–µ–∑—É–ª—å—Ç–∞—Ç –±–∏—Ç–≤—ã:\n"
            f"–í–∞—à –±—Ä–æ—Å–æ–∫: {player_roll}\n"
            f"–ë—Ä–æ—Å–æ–∫ –æ—Ç—Ä–∞–∂–µ–Ω–∏—è: {enemy_roll}\n\n"
            f"{result}\n"
            f"‚ùå –í—ã –ø–æ—Ç–µ—Ä—è–ª–∏ {hp_loss} HP (10% –æ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ).\n"
            f"‚ù§Ô∏è –û—Å—Ç–∞–ª–æ—Å—å HP: {hero_stats['hp']}/{max_hp}"
        )

        if hero_stats['hp'] <= 0:
            # –ï—Å–ª–∏ HP –º–µ–Ω—å—à–µ –∏–ª–∏ —Ä–∞–≤–Ω–æ 0 - –≤—ã—Ö–æ–¥ –∏–∑ –ª–∞–±–∏—Ä–∏–Ω—Ç–∞
            exit_markup = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üö™ –í—ã–π—Ç–∏ –∏–∑ –ª–∞–±–∏—Ä–∏–Ω—Ç–∞", callback_data="exit_maze")]
            ])
            await callback.message.answer(
                f"{hp_message}\n\n"
                "‚ò†Ô∏è –í—ã –ø–æ—Ç–µ—Ä—è–ª–∏ —Å–æ–∑–Ω–∞–Ω–∏–µ –æ—Ç –ø–æ—Ç–µ—Ä–∏ –∑–¥–æ—Ä–æ–≤—å—è!",
                reply_markup=exit_markup
            )
        else:
            # –ï—Å–ª–∏ HP > 0 - –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
            await callback.message.answer(hp_message)
            continue_btn = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚û°Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø—É—Ç—å", callback_data="continue_path")]
            ])
            await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞–ª—å–Ω–µ–π—à–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=continue_btn)

    else:
        # –ù–∏—á—å—è
        result = "ü§ù –ù–∏—á—å—è! –í—ã –∏ –≤–∞—à–µ –æ—Ç—Ä–∞–∂–µ–Ω–∏–µ —Ä–∞–≤–Ω—ã –ø–æ —Å–∏–ª–µ."
        result_message = (
            f"–†–µ–∑—É–ª—å—Ç–∞—Ç –±–∏—Ç–≤—ã:\n"
            f"–í–∞—à –±—Ä–æ—Å–æ–∫: {player_roll}\n"
            f"–ë—Ä–æ—Å–æ–∫ –æ—Ç—Ä–∞–∂–µ–Ω–∏—è: {enemy_roll}\n\n"
            f"{result}"
        )
        await callback.message.answer(result_message)
        continue_btn = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚û°Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø—É—Ç—å", callback_data="continue_path")]
        ])
        await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞–ª—å–Ω–µ–π—à–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=continue_btn)

        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –±—Ä–æ—Å–∫–µ –≤—Ä–∞–≥–∞
    if chat_id in user_data and 'mirror_hall_enemy_roll' in user_data[chat_id]:
        del user_data[chat_id]['mirror_hall_enemy_roll']

    await callback.answer()
    save_data()


# ======================================–ó–µ—Ä–∫–∞–ª–∞====================================#


# ======================================–ó–∞–≥–∞–¥–∫–∏====================================#
RIDDLES = [
    {
        "question": "–Ø —Ä–æ–∂–¥–µ–Ω –≤ –æ–≥–Ω–µ, –Ω–æ –Ω–µ —Å–≥–æ—Ä–∞—é.\n–Ø –≥–æ–≤–æ—Ä—é, –Ω–æ –Ω–µ –¥—ã—à—É.\n–Ø –æ–±–µ—â–∞—é —Å–∏–ª—É, –Ω–æ –∑–∞–±–∏—Ä–∞—é –¥—É—à—É.\n–ö—Ç–æ —è?",
        "answer": "üëπ",
        "options": ["üëπ", "üê∫", "üó°Ô∏è", "üåê"]
    },
    {
        "question": "–Ø –Ω–µ –∂–∏–≤–æ–π, –Ω–æ –∏ –Ω–µ –º–µ—Ä—Ç–≤—ã–π.\n–Ø –Ω–µ —Å–ø–ª—é, –Ω–æ –∏ –Ω–µ –±–æ–¥—Ä—Å—Ç–≤—É—é.\n–Ø –∑–æ–≤—É —Ç–µ–±—è –≤ –Ω–æ—á–∏, –Ω–æ —Ç—ã –Ω–µ —É–≤–∏–¥–∏—à—å –º–æ–µ–≥–æ –ª–∏—Ü–∞.\n–ö—Ç–æ —è?",
        "answer": "üëπ",
        "options": ["üëπ", "üê∫", "üó°Ô∏è", "üåê"]
    },
    {
        "question": "–Ø ‚Äî —Ç–µ–Ω—å –∑–∞ —Ç–≤–æ–∏–º –ø–ª–µ—á–æ–º,\n–®–µ–ø—á—É —Ç–µ–±–µ –≤ —É—Ö–æ –æ–±–µ—â–∞–Ω–∏—è –≤–ª–∞—Å—Ç–∏.\n–ù–æ –ø–ª–∞—Ç–∞ –∑–∞ –º–æ—é –ø–æ–º–æ—â—å ‚Äî –≤–µ—á–Ω–æ—Å—Ç—å –≤ –∞–¥—É.\n–ö—Ç–æ —è?",
        "answer": "üëπ",
        "options": ["üëπ", "üê∫", "üó°Ô∏è", "üåê"]
    },
    {
        "question": "–Ø –Ω–µ —á–µ–ª–æ–≤–µ–∫, –Ω–æ —è –≤–æ—é –Ω–∞ –ª—É–Ω—É.\n–Ø –Ω–µ –∑–≤–µ—Ä—å, –Ω–æ —è –æ—Ö–æ—á—É—Å—å –≤ –Ω–æ—á–∏.\n–ú–æ–∏ –≥–ª–∞–∑–∞ –≥–æ—Ä—è—Ç, –∫–∞–∫ —É–≥–ª–∏,\n–ê –∫–ª—ã–∫–∏ –æ—Å—Ç—Ä—ã, –∫–∞–∫ –ª–µ–∑–≤–∏—è.",
        "answer": "üê∫",
        "options": ["üëπ", "üê∫", "üó°Ô∏è", "üåê"]
    },
    {
        "question": "–Ø ‚Äî —Å—Ç—Ä–∞–∂ –ª–µ—Å–∞, –Ω–æ –Ω–µ –¥–µ—Ä–µ–≤—å—è.\n–Ø ‚Äî —Ö–∏—â–Ω–∏–∫, –Ω–æ –Ω–µ –∑–≤–µ—Ä—å.\n–ú–æ—è —Å—Ç–∞—è ‚Äî —ç—Ç–æ —Ç—å–º–∞,\n–ê –º–æ—è –¥–æ–±—ã—á–∞ ‚Äî —Å—Ç—Ä–∞—Ö.\n–ö—Ç–æ —è?",
        "answer": "üê∫",
        "options": ["üëπ", "üê∫", "üó°Ô∏è", "üåê"]
    },
    {
        "question": "–Ø –±–µ–≥—É –ø–æ —Å–ª–µ–¥–∞–º, –Ω–æ –Ω–µ –æ—Å—Ç–∞–≤–ª—è—é —Å–≤–æ–∏—Ö.\n–Ø –≤–æ—é –Ω–∞ –ª—É–Ω—É, –Ω–æ –Ω–µ —Å–ª—ã—à—É —Å–≤–æ–µ–≥–æ –≥–æ–ª–æ—Å–∞.\n–Ø ‚Äî —Å–∏–º–≤–æ–ª —Å–≤–æ–±–æ–¥—ã, –Ω–æ —Å–∞–º –≤ –ø–ª–µ–Ω—É —É –∏–Ω—Å—Ç–∏–Ω–∫—Ç–∞.\n–ö—Ç–æ —è?",
        "answer": "üê∫",
        "options": ["üëπ", "üê∫", "üó°Ô∏è", "üåê"]
    },
    {
        "question": "–Ø ‚Äî –æ—Ä—É–¥–∏–µ —Å–º–µ—Ä—Ç–∏, –Ω–æ –Ω–µ —É–±–∏–π—Ü–∞.\n–Ø ‚Äî —Å–∏–º–≤–æ–ª —á–µ—Å—Ç–∏, –Ω–æ –Ω–µ —Ä—ã—Ü–∞—Ä—å.\n–Ø —Ä–µ–∂—É, –Ω–æ –Ω–µ —á—É–≤—Å—Ç–≤—É—é –±–æ–ª–∏.\n–ö—Ç–æ —è?",
        "answer": "üó°Ô∏è",
        "options": ["üëπ", "üê∫", "üó°Ô∏è", "üåê"]
    },
    {
        "question": "–Ø —Ä–æ–∂–¥–µ–Ω –≤ –æ–≥–Ω–µ, –∑–∞–∫–∞–ª–µ–Ω –≤ –∫—Ä–æ–≤–∏.\n–Ø —Å–ª—É–∂—É –≥–µ—Ä–æ—è–º, –Ω–æ –ø–∏—Ç–∞—é—Å—å –≤–æ–π–Ω–æ–π.\n–Ø ‚Äî —Ç–µ–Ω—å –≤ —Ä—É–∫–∞—Ö –≤–æ–∏–Ω–∞,\n–ù–æ —Å–≤–µ—Ç –≤ –µ–≥–æ —Å–µ—Ä–¥—Ü–µ.\n–ö—Ç–æ —è?",
        "answer": "üó°Ô∏è",
        "options": ["üëπ", "üê∫", "üó°Ô∏è", "üåê"]
    },
    {
        "question": "–Ø ‚Äî –º–æ–ª—á–∞–ª–∏–≤—ã–π —Å–≤–∏–¥–µ—Ç–µ–ª—å –±–∏—Ç–≤,\n–Ø ‚Äî –æ—Ä—É–¥–∏–µ —Å—É–¥—å–±—ã, –Ω–æ –Ω–µ —Å—É–¥—å—è.\n–Ø –º–æ–≥—É —Å–ø–∞—Å—Ç–∏ –∏–ª–∏ –ø–æ–≥—É–±–∏—Ç—å,\n–ù–æ —Å–∞–º –Ω–µ –≤—ã–±–∏—Ä–∞—é, –∫–æ–º—É —Å–ª—É–∂–∏—Ç—å.\n–ö—Ç–æ —è?",
        "answer": "üó°Ô∏è",
        "options": ["üëπ", "üê∫", "üó°Ô∏è", "üåê"]
    },
    {
        "question": "–Ø ‚Äî –¥–æ–º –¥–ª—è –º–Ω–æ–≥–∏—Ö, –Ω–æ —Å–∞–º–∞ –±–µ–∑–∂–∏–∑–Ω–µ–Ω–Ω–∞.\n–Ø –≤—Ä–∞—â–∞—é—Å—å –≤ –≤–µ—á–Ω–æ—Å—Ç–∏, –Ω–æ –Ω–µ —Å—Ç–∞—Ä–µ—é.\n–Ø ‚Äî —Ç–æ—á–∫–∞ –≤ –∫–æ—Å–º–æ—Å–µ, –Ω–æ –≤–º–µ—â–∞—é —Ü–µ–ª—ã–µ –º–∏—Ä—ã.\n–ö—Ç–æ —è?",
        "answer": "üåê",
        "options": ["üëπ", "üê∫", "üó°Ô∏è", "üåê"]
    },
    {
        "question": "–Ø ‚Äî —Ç–µ–Ω—å –≤ –Ω–æ—á–∏, –Ω–æ –Ω–µ –ª—É–Ω–∞.\n–Ø ‚Äî —Å–≤–µ—Ç –≤–¥–∞–ª–∏, –Ω–æ –Ω–µ –∑–≤–µ–∑–¥–∞.\n–Ø ‚Äî –º–∏—Ä, –Ω–æ –Ω–µ –∑–µ–º–ª—è.\n–ö—Ç–æ —è?",
        "answer": "üåê",
        "options": ["üëπ", "üê∫", "üó°Ô∏è", "üåê"]
    },
    {
        "question": "–Ø ‚Äî –≤–µ—á–Ω—ã–π —Å—Ç—Ä–∞–Ω–Ω–∏–∫ –≤ –∫–æ—Å–º–∏—á–µ—Å–∫–æ–π —Ç—å–º–µ,\n–Ø –Ω–µ—Å—É –Ω–∞ —Å–µ–±–µ –∂–∏–∑–Ω—å, –Ω–æ —Å–∞–º–∞ –º–µ—Ä—Ç–≤–∞.\n–Ø ‚Äî –≥—Ä–∞–Ω–∏—Ü–∞ –º–µ–∂–¥—É –º–∏—Ä–∞–º–∏,\n–ù–æ —Å–∞–º–∞ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂—É –Ω–∏ –æ–¥–Ω–æ–º—É.\n–ö—Ç–æ —è?",
        "answer": "üåê",
        "options": ["üëπ", "üê∫", "üó°Ô∏è", "üåê"]
    },
    {
        "question": "–Ø ‚Äî —Å—Ç–∞–ª—å–Ω–æ–π —è–∑—ã–∫, –Ω–æ –Ω–µ –≥–æ–≤–æ—Ä—é,\n–Ø ‚Äî —Å–ø—É—Ç–Ω–∏–∫ –≥–µ—Ä–æ—è, –Ω–æ –Ω–µ –∫–æ–Ω—å.\n–ú–æ—è –æ—Å—Ç—Ä–æ—Ç–∞ ‚Äî –∑–∞–∫–æ–Ω,\n–ê –º–æ–π –±–ª–µ—Å–∫ ‚Äî –ø—Ä–µ–¥–≤–µ—Å—Ç–Ω–∏–∫ –±–µ–¥—ã.\n–ö—Ç–æ —è?",
        "answer": "üó°Ô∏è",
        "options": ["üëπ", "üê∫", "üó°Ô∏è", "üåê"]
    },
    {
        "question": "–Ø —Ä–æ–∂–¥–µ–Ω –≤ –∫—É–∑–Ω–∏—Ü–µ, –∑–∞–∫–∞–ª–µ–Ω –≤ –±–æ—é,\n–Ø ‚Äî —Å–∏–º–≤–æ–ª –æ—Ç–≤–∞–≥–∏, –Ω–æ –Ω–µ —Å–µ—Ä–¥—Ü–µ.\n–Ø –º–æ–≥—É –±—ã—Ç—å –±–ª–∞–≥–æ—Ä–æ–¥–Ω—ã–º –∏–ª–∏ –ø—Ä–æ–∫–ª—è—Ç—ã–º,\n–ù–æ –≤—Å–µ–≥–¥–∞ –æ—Å—Ç–∞—é—Å—å —Ö–æ–ª–æ–¥–Ω—ã–º.\n–ö—Ç–æ —è?",
        "answer": "üó°Ô∏è",
        "options": ["üëπ", "üê∫", "üó°Ô∏è", "üåê"]
    },
    {
        "question": "–Ø ‚Äî –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ —Ä—É–∫–∏ –≤–æ–∏–Ω–∞,\n–ù–æ –Ω–µ —á–∞—Å—Ç—å –µ–≥–æ —Ç–µ–ª–∞.\n–Ø —Ä–µ–∂—É, –∫–æ–ª—é, –Ω–æ –Ω–µ –¥—ã—à—É,\n–Ø ‚Äî –≤–µ—á–Ω—ã–π —Å–ø—É—Ç–Ω–∏–∫ –±–∏—Ç–≤—ã.\n–ö—Ç–æ —è?",
        "answer": "üó°Ô∏è",
        "options": ["üëπ", "üê∫", "üó°Ô∏è", "üåê"]
    },
    {
        "question": "–Ø ‚Äî –º—Ä–∞–º–æ—Ä –≤ –∫–æ—Å–º–∏—á–µ—Å–∫–æ–π –±–µ–∑–¥–Ω–µ,\n–ù–æ –Ω–µ –∫–∞–º–µ–Ω—å –∏ –Ω–µ –º–µ—Ç–∞–ª–ª.\n–Ø –Ω–µ—Å—É –æ–∫–µ–∞–Ω—ã –∏ –≥–æ—Ä—ã,\n–ù–æ —Å–∞–º–∞ ‚Äî –ª–∏—à—å –ø—ã–ª–∏–Ω–∫–∞ –≤–æ —Ç—å–º–µ.\n–ö—Ç–æ —è?",
        "answer": "üåê",
        "options": ["üëπ", "üê∫", "üó°Ô∏è", "üåê"]
    },
    {
        "question": "–Ø ‚Äî –∫–æ–ª—ã–±–µ–ª—å –∂–∏–∑–Ω–∏, –Ω–æ –Ω–µ –º–∞—Ç—å,\n–Ø ‚Äî –∫–æ—Ä–∞–±–ª—å –≤ –æ–∫–µ–∞–Ω–µ –∑–≤—ë–∑–¥,\n–Ø –≤—Ä–∞—â–∞—é—Å—å –≤–æ–∫—Ä—É–≥ –æ–≥–Ω—è,\n–ù–æ —Å–∞–º–∞ –æ—Å—Ç–∞—é—Å—å —Ö–æ–ª–æ–¥–Ω–æ–π.\n–ö—Ç–æ —è?",
        "answer": "üåê",
        "options": ["üëπ", "üê∫", "üó°Ô∏è", "üåê"]
    },
    {
        "question": "–Ø ‚Äî –≥–∏–≥–∞–Ω—Ç—Å–∫–∏–π —à–∞—Ä, –Ω–æ –Ω–µ –º—è—á,\n–Ø ‚Äî –¥–æ–º –¥–ª—è –≤—Å–µ—Ö, –Ω–æ –Ω–µ –∂–∏–ª–∏—â–µ.\n–Ø –ª–µ—á—É —Å–∫–≤–æ–∑—å –≤–µ—á–Ω–æ—Å—Ç—å,\n–ù–æ –Ω–µ –ø—Ç–∏—Ü–∞ –∏ –Ω–µ —Å—Ç—Ä–µ–ª–∞.\n–ö—Ç–æ —è?",
        "answer": "üåê",
        "options": ["üëπ", "üê∫", "üó°Ô∏è", "üåê"]
    },
    {
        "question": "–Ø ‚Äî –∫–ª—é—á –∫ –∂–∏–∑–Ω–∏, –Ω–æ —Å–∞–º –Ω–µ –∂–∏–≤–æ–π.\n–Ø ‚Äî —Å–∏–º–≤–æ–ª –ª—é–±–≤–∏, –Ω–æ –º–æ–≥—É –±—ã—Ç—å —Ö–æ–ª–æ–¥–Ω—ã–º.\n–Ø ‚Äî —Ü–µ–Ω—Ç—Ä –≤—Å–µ–≥–æ, –Ω–æ —Å–∞–º –Ω–µ–≤–∏–¥–∏–º.\n–ö—Ç–æ —è?",
        "answer": "ü´Ä",
        "options": ["ü´Ä", "‚ù§Ô∏è", "‚ò†Ô∏è", "üëª"]
    },
    {
        "question": "–Ø ‚Äî –ø–ª–µ–Ω–Ω–∏–∫ –≤ –∫–ª–µ—Ç–∫–µ –∏–∑ –ø–ª–æ—Ç–∏,\n–Ø —Å—Ç—É—á—É, –Ω–æ –Ω–µ –º–æ–≥—É –≤—ã–π—Ç–∏.\n–Ø ‚Äî –∏—Å—Ç–æ—á–Ω–∏–∫ —Å–∏–ª—ã, –Ω–æ –∏ —Å–ª–∞–±–æ—Å—Ç–∏.\n–ö—Ç–æ —è?",
        "answer": "ü´Ä",
        "options": ["ü´Ä", "‚ù§Ô∏è", "‚ò†Ô∏è", "üëª"]
    },
    {
        "question": "–Ø —Å–∏–ª—å–Ω–µ–µ –º–µ—á–∞, –Ω–æ –Ω–µ–∂–Ω–µ–µ —à–µ–ª–∫–∞.\n–Ø –º–æ–≥—É —Ä–∞–∑—Ä—É—à–∏—Ç—å –º–∏—Ä, –Ω–æ –∏ —Å–æ–∑–¥–∞—Ç—å –µ–≥–æ.\n–Ø ‚Äî –¥–∞—Ä –∏ –ø—Ä–æ–∫–ª—è—Ç–∏–µ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ.\n–ö—Ç–æ —è?",
        "answer": "‚ù§Ô∏è",
        "options": ["ü´Ä", "‚ù§Ô∏è", "‚ò†Ô∏è", "üëª"]
    },
    {
        "question": "–Ø ‚Äî –ø–ª–∞–º—è, –∫–æ—Ç–æ—Ä–æ–µ –Ω–µ –æ–±–∂–∏–≥–∞–µ—Ç,\n–Ø ‚Äî —Ä–∞–Ω–∞, –∫–æ—Ç–æ—Ä–∞—è –Ω–µ –∫—Ä–æ–≤–æ—Ç–æ—á–∏—Ç.\n–Ø ‚Äî –≤–µ—á–Ω–æ—Å—Ç—å –≤ –æ–¥–Ω–æ–º –º–≥–Ω–æ–≤–µ–Ω–∏–∏.\n–ö—Ç–æ —è?",
        "answer": "‚ù§Ô∏è",
        "options": ["ü´Ä", "‚ù§Ô∏è", "‚ò†Ô∏è", "üëª"]
    },
    {
        "question": "–Ø ‚Äî —Ç–µ–Ω—å, –∫–æ—Ç–æ—Ä–∞—è —Å–≤–µ—Ç–∏—Ç,\n–Ø ‚Äî –±–æ–ª—å, –∫–æ—Ç–æ—Ä–∞—è –ª–µ—á–∏—Ç.\n–Ø ‚Äî –±–µ–∑—É–º–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Å–ø–∞—Å–∞–µ—Ç.\n–ö—Ç–æ —è?",
        "answer": "‚ù§Ô∏è",
        "options": ["ü´Ä", "‚ù§Ô∏è", "‚ò†Ô∏è", "üëª"]
    },
    {
        "question": "–Ø ‚Äî –∫–æ–Ω–µ—Ü, –Ω–æ –∏ –Ω–∞—á–∞–ª–æ.\n–Ø ‚Äî —Ç–∏—à–∏–Ω–∞ –ø–æ—Å–ª–µ –±—É—Ä–∏.\n–Ø ‚Äî —Ç–µ–Ω—å, –∫–æ—Ç–æ—Ä–∞—è –∂–¥–µ—Ç –∫–∞–∂–¥–æ–≥–æ.\n–ö—Ç–æ —è?",
        "answer": "‚ò†Ô∏è",
        "options": ["ü´Ä", "‚ù§Ô∏è", "‚ò†Ô∏è", "üëª"]
    },
    {
        "question": "–Ø –Ω–µ —Å–ø–ª—é, –Ω–æ –∏ –Ω–µ –±–æ–¥—Ä—Å—Ç–≤—É—é.\n–Ø –Ω–µ –∂–∏–≤—É, –Ω–æ –∏ –Ω–µ –º–µ—Ä—Ç–≤–∞.\n–Ø ‚Äî –≤–µ—á–Ω—ã–π —Å–ø—É—Ç–Ω–∏–∫ –∂–∏–∑–Ω–∏.\n–ö—Ç–æ —è?",
        "answer": "‚ò†Ô∏è",
        "options": ["ü´Ä", "‚ù§Ô∏è", "‚ò†Ô∏è", "üëª"]
    },
    {
        "question": "–Ø ‚Äî –¥–≤–µ—Ä—å, —á–µ—Ä–µ–∑ –∫–æ—Ç–æ—Ä—É—é –≤—Å–µ –ø—Ä–æ—Ö–æ–¥—è—Ç,\n–ù–æ –Ω–∏–∫—Ç–æ –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è.\n–Ø ‚Äî —Ç–∏—Ö–∏–π –∑–æ–≤ –≤ –∫–æ–Ω—Ü–µ –ø—É—Ç–∏.\n–ö—Ç–æ —è?",
        "answer": "‚ò†Ô∏è",
        "options": ["ü´Ä", "‚ù§Ô∏è", "‚ò†Ô∏è", "üëª"]
    },
    {
        "question": "–Ø ‚Äî —Ç–µ–Ω—å –±–µ–∑ —Ç–µ–ª–∞,\n–ì–æ–ª–æ—Å –±–µ–∑ —è–∑—ã–∫–∞.\n–Ø ‚Äî –ø–∞–º—è—Ç—å, –∫–æ—Ç–æ—Ä–∞—è –Ω–µ —É–º–∏—Ä–∞–µ—Ç.\n–ö—Ç–æ —è?",
        "answer": "üëª",
        "options": ["ü´Ä", "‚ù§Ô∏è", "‚ò†Ô∏è", "üëª"]
    },
    {
        "question": "–Ø ‚Äî –æ—Ç—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–≥–æ, –∫–æ–≥–æ –Ω–µ—Ç.\n–Ø ‚Äî —à–µ–ø–æ—Ç –≤ –ø—É—Å—Ç–æ–π –∫–æ–º–Ω–∞—Ç–µ.\n–Ø ‚Äî –ø—Ä–æ—à–ª–æ–µ, –∫–æ—Ç–æ—Ä–æ–µ –Ω–µ –æ—Ç–ø—É—Å–∫–∞–µ—Ç.\n–ö—Ç–æ —è?",
        "answer": "üëª",
        "options": ["ü´Ä", "‚ù§Ô∏è", "‚ò†Ô∏è", "üëª"]
    },
    {
        "question": "–Ø ‚Äî –≤–µ—á–Ω—ã–π —Å—Ç—Ä–∞–Ω–Ω–∏–∫ –º–µ–∂–¥—É –º–∏—Ä–∞–º–∏,\n–Ø ‚Äî –ø–∞–º—è—Ç—å, –∫–æ—Ç–æ—Ä–∞—è –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç –ø–æ–∫–æ—è.\n–Ø ‚Äî —Ç–µ–Ω—å, –∫–æ—Ç–æ—Ä–∞—è –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —Å–≤–µ—Ç—É.\n–ö—Ç–æ —è?",
        "answer": "üëª",
        "options": ["ü´Ä", "‚ù§Ô∏è", "‚ò†Ô∏è", "üëª"]
    },
    {
        "question": "–Ø ‚Äî —Å—É—â–µ—Å—Ç–≤–æ –∏–∑ –º–∏—Ñ–æ–≤,\n–ù–æ —è —Ä–µ–∞–ª—å–Ω–µ–µ, —á–µ–º –∫–∞–∂–µ—Ç—Å—è.\n–Ø ‚Äî –∑–∞—â–∏—Ç–Ω–∏–∫ –ª–µ—Å–æ–≤,\n–ù–æ –º–æ—è —Å–∏–ª–∞ ‚Äî –≤ –º–æ–µ–º —Ä–æ–≥–µ.\n–ö—Ç–æ —è?",
        "answer": "ü¶Ñ",
        "options": ["ü¶Ñ", "üéñ", "üè†", "üåã"]
    },
    {
        "question": "–Ø ‚Äî —Å–∏–º–≤–æ–ª —á–∏—Å—Ç–æ—Ç—ã, –Ω–æ –∂–∏–≤—É –≤ —Ç–µ–Ω–∏.\n–Ø ‚Äî —Å–≤–µ—Ç, –∫–æ—Ç–æ—Ä—ã–π –±–æ–∏—Ç—Å—è —Ç—å–º—ã.\n–Ø ‚Äî –º–µ—á—Ç–∞, –∫–æ—Ç–æ—Ä–∞—è –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ —É–º—Ä–µ—Ç.\n–ö—Ç–æ —è?",
        "answer": "ü¶Ñ",
        "options": ["ü¶Ñ", "üéñ", "üè†", "üåã"]
    },
    {
        "question": "–Ø ‚Äî —Å–∏–º–≤–æ–ª —Å–ª–∞–≤—ã, –Ω–æ —Å–∞–º –Ω–µ –≥–µ—Ä–æ–π.\n–Ø ‚Äî –ø–∞–º—è—Ç—å –æ –ø–æ–¥–≤–∏–≥–∞—Ö, –Ω–æ —Å–∞–º –Ω–µ —Å—Ä–∞–∂–∞—é—Å—å.\n–Ø ‚Äî –Ω–∞–≥—Ä–∞–¥–∞, –Ω–æ –Ω–µ —Ü–µ–Ω–Ω–æ—Å—Ç—å.\n–ö—Ç–æ —è?",
        "answer": "üéñ",
        "options": ["ü¶Ñ", "üéñ", "üè†", "üåã"]
    },
    {
        "question": "–Ø ‚Äî –º–µ—Ç–∞–ª–ª, –Ω–æ –Ω–µ –æ—Ä—É–∂–∏–µ.\n–Ø ‚Äî –ø–∞–º—è—Ç—å, –Ω–æ –Ω–µ –∫–Ω–∏–≥–∞.\n–Ø ‚Äî –Ω–∞–≥—Ä–∞–¥–∞, –Ω–æ –Ω–µ —Å–æ–∫—Ä–æ–≤–∏—â–µ.\n–ö—Ç–æ —è?",
        "answer": "üéñ",
        "options": ["ü¶Ñ", "üéñ", "üè†", "üåã"]
    },
    {
        "question": "–Ø ‚Äî –∑–Ω–∞–∫ —á–µ—Å—Ç–∏, –Ω–æ —Å–∞–º –Ω–µ —á–µ—Å—Ç–µ–Ω.\n–Ø ‚Äî —Å–∏–º–≤–æ–ª –ø–æ–±–µ–¥—ã, –Ω–æ —Å–∞–º –Ω–µ –≤–æ–∏–Ω.\n–Ø ‚Äî –ø–∞–º—è—Ç—å –æ –±–∏—Ç–≤–∞—Ö, –Ω–æ —Å–∞–º –Ω–µ —Å—Ä–∞–∂–∞—é—Å—å.\n–ö—Ç–æ —è?",
        "answer": "üéñ",
        "options": ["ü¶Ñ", "üéñ", "üè†", "üåã"]
    },
    {
        "question": "–Ø ‚Äî —É–±–µ–∂–∏—â–µ, –Ω–æ –∏ —Ç—é—Ä—å–º–∞.\n–Ø ‚Äî –º–µ—Å—Ç–æ, –≥–¥–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –∏ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –∂–∏–∑–Ω—å.\n–Ø ‚Äî —Å—Ç–µ–Ω—ã, –∫–æ—Ç–æ—Ä—ã–µ –∑–∞—â–∏—â–∞—é—Ç, –Ω–æ –∏ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞—é—Ç.\n–ö—Ç–æ —è?",
        "answer": "üè†",
        "options": ["ü¶Ñ", "üéñ", "üè†", "üåã"]
    },
    {
        "question": "–Ø ‚Äî –Ω–∞—á–∞–ª–æ –∏ –∫–æ–Ω–µ—Ü –ø—É—Ç–∏.\n–Ø ‚Äî –º–µ—Å—Ç–æ, –≥–¥–µ —Ö—Ä–∞–Ω—è—Ç—Å—è —Å–µ–∫—Ä–µ—Ç—ã.\n–Ø ‚Äî —Å—Ç–µ–Ω—ã, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–Ω—è—Ç –≤—Å–µ.\n–ö—Ç–æ —è?",
        "answer": "üè†",
        "options": ["ü¶Ñ", "üéñ", "üè†", "üåã"]
    },
    {
        "question": "–Ø ‚Äî –∫—Ä–µ–ø–æ—Å—Ç—å, –Ω–æ –Ω–µ –¥–ª—è –≤–æ–π–Ω—ã.\n–Ø ‚Äî —É–±–µ–∂–∏—â–µ, –Ω–æ –Ω–µ –¥–ª—è –≤—Å–µ—Ö.\n–Ø ‚Äî –º–µ—Å—Ç–æ, –≥–¥–µ —Ä–æ–∂–¥–∞—é—Ç—Å—è –º–µ—á—Ç—ã.\n–ö—Ç–æ —è?",
        "answer": "üè†",
        "options": ["ü¶Ñ", "üéñ", "üè†", "üåã"]
    },
    {
        "question": "–Ø ‚Äî –≥–æ—Ä–∞, –∫–æ—Ç–æ—Ä–∞—è –¥—ã—à–∏—Ç –æ–≥–Ω–µ–º.\n–Ø ‚Äî —Ç–∏—à–∏–Ω–∞ –ø–µ—Ä–µ–¥ –±—É—Ä–µ–π.\n–Ø ‚Äî —Ä–∞–∑—Ä—É—à–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é –∂–∏–∑–Ω—å.\n–ö—Ç–æ —è?",
        "answer": "üåã",
        "options": ["ü¶Ñ", "üéñ", "üè†", "üåã"]
    },
    {
        "question": "–Ø ‚Äî —Å–ø—è—â–∏–π –≥–∏–≥–∞–Ω—Ç,\n–ù–æ –∫–æ–≥–¥–∞ —è –ø—Ä–æ—Å—ã–ø–∞—é—Å—å, –º–∏—Ä –¥—Ä–æ–∂–∏—Ç.\n–Ø ‚Äî –æ–≥–æ–Ω—å, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ –≥–æ—Ä–∏—Ç.\n–ö—Ç–æ —è?",
        "answer": "üåã",
        "options": ["ü¶Ñ", "üéñ", "üè†", "üåã"]
    },
    {
        "question": "–Ø ‚Äî –≥–æ—Ä–∞, –Ω–æ –Ω–µ –∫–∞–º–µ–Ω–Ω–∞—è.\n–Ø ‚Äî –æ–≥–æ–Ω—å, –Ω–æ –Ω–µ –ø–ª–∞–º—è.\n–Ø ‚Äî —Ç–∏—à–∏–Ω–∞, –Ω–æ –Ω–µ —Å–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ.\n–ö—Ç–æ —è?",
        "answer": "üåã",
        "options": ["ü¶Ñ", "üéñ", "üè†", "üåã"]
    },
]
current_riddles = {}


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /riddle_room1
@dp.message(Command("riddle_room1"))
async def enter_riddle_room(message: types.Message, bot: Bot):
    # –ü–æ–ª—É—á–∞–µ–º —Å–ª–æ–≤–∞—Ä—å —Å —Ñ–æ—Ç–æ –∫–æ–º–Ω–∞—Ç—ã –∑–∞–≥–∞–¥–æ–∫
    riddle_photos = Photo_Diryk.get("–ö–æ–º–Ω–∞—Ç–∞ –∑–∞–≥–∞–¥–æ–∫", {})

    if not riddle_photos:
        await message.answer("–§–æ—Ç–æ –∫–æ–º–Ω–∞—Ç—ã –∑–∞–≥–∞–¥–æ–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.")
        return

    # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ —Ñ–æ—Ç–æ
    random_photo_key = random.choice(list(riddle_photos.keys()))
    photo_path = riddle_photos[random_photo_key]

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –∫–æ–º–Ω–∞—Ç—ã –∑–∞–≥–∞–¥–æ–∫
    try:
        photo = FSInputFile(photo_path)
        await message.answer_photo(photo)
    except FileNotFoundError:
        await message.answer("–§–æ—Ç–æ –∫–æ–º–Ω–∞—Ç—ã –∑–∞–≥–∞–¥–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return

    # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é –∑–∞–≥–∞–¥–∫—É
    if not RIDDLES:
        await message.answer("–ó–∞–≥–∞–¥–∫–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.")
        return

    riddle = random.choice(RIDDLES)

    # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤
    buttons = []
    for option in riddle["options"]:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ callback_data: "riddle_–æ—Ç–≤–µ—Ç_–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π_–æ—Ç–≤–µ—Ç_–≤—ã–±—Ä–∞–Ω–Ω—ã–π_–≤–∞—Ä–∏–∞–Ω—Ç"
        callback_data = f"riddle_{riddle['answer']}_{option}"
        buttons.append(InlineKeyboardButton(text=option, callback_data=callback_data))

    # –†–∞–∑–±–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ 2 –≤ —Ä—è–¥
    keyboard = [buttons[i:i + 2] for i in range(0, len(buttons), 2)]

    markup = InlineKeyboardMarkup(inline_keyboard=keyboard)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–≥–∞–¥–∫—É
    await message.answer(
        text=f"üîÆ *–ó–∞–≥–∞–¥–∫–∞:*\n\n{riddle['question']}",
        reply_markup=markup,
        parse_mode="Markdown"
    )


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –æ—Ç–≤–µ—Ç–∞ (—Ñ–æ—Ä–º–∞—Ç callback_data: "riddle_–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π_–æ—Ç–≤–µ—Ç_–≤—ã–±—Ä–∞–Ω–Ω—ã–π_–≤–∞—Ä–∏–∞–Ω—Ç")
@dp.callback_query(F.data.startswith("riddle_"))
async def handle_riddle_answer(callback: types.CallbackQuery):
    try:
        user_id = callback.from_user.id

        # –†–∞–∑–±–∏—Ä–∞–µ–º callback_data
        _, correct_answer, chosen_option = callback.data.split("_", 2)

        if chosen_option == correct_answer:
            # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç ‚Üí –∫–Ω–æ–ø–∫–∞ "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø—É—Ç—å"
            markup = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø—É—Ç—å", callback_data="continue_path")]
            ])
            await callback.message.edit_text(
                text="‚úÖ *–ü—Ä–∞–≤–∏–ª—å–Ω–æ!* –¢—ã —Ä–∞–∑–≥–∞–¥–∞–ª –∑–∞–≥–∞–¥–∫—É –∏ –º–æ–∂–µ—à—å –∏–¥—Ç–∏ –¥–∞–ª—å—à–µ.",
                reply_markup=markup,
                parse_mode="Markdown"
            )
        else:
            # –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç ‚Üí –æ—Ç–Ω–∏–º–∞–µ–º 10% –æ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ HP
            current_hp = user_data[user_id]['hero_stats']['hp']
            max_hp = user_data[user_id]['hero_stats']['hp_max']
            hp_loss = int(max_hp * 0.1)  # –¢–µ–ø–µ—Ä—å –æ—Ç–Ω–∏–º–∞–µ–º 10% –æ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ HP
            user_data[user_id]['hero_stats']['hp'] = max(0, current_hp - hp_loss)

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ—Ç–µ—Ä–µ HP
            hp_message = (
                f"‚ùå *–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ!*\n"
                f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –±—ã–ª: {correct_answer}\n\n"
                f"üí¢ –í—ã –ø–æ—Ç–µ—Ä—è–ª–∏ {hp_loss} HP (10% –æ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ).\n"
                f"‚ù§Ô∏è –û—Å—Ç–∞–ª–æ—Å—å HP: {user_data[user_id]['hero_stats']['hp']}/{max_hp}"
            )

            if user_data[user_id]['hero_stats']['hp'] <= 0:
                # –ï—Å–ª–∏ HP ‚â§ 0 - –≤—ã—Ö–æ–¥ –∏–∑ –ª–∞–±–∏—Ä–∏–Ω—Ç–∞
                exit_markup = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üö™ –í—ã–π—Ç–∏ –∏–∑ –ª–∞–±–∏—Ä–∏–Ω—Ç–∞", callback_data="exit_maze")]
                ])
                await callback.message.edit_text(
                    f"{hp_message}\n\n"
                    "‚ò†Ô∏è –í—ã –ø–æ—Ç–µ—Ä—è–ª–∏ —Å–æ–∑–Ω–∞–Ω–∏–µ –æ—Ç –ø–æ—Ç–µ—Ä–∏ –∑–¥–æ—Ä–æ–≤—å—è!",
                    reply_markup=exit_markup,
                    parse_mode="Markdown"
                )
            else:
                # –ï—Å–ª–∏ HP > 0 - –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
                continue_btn = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚û°Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø—É—Ç—å", callback_data="continue_path")]
                ])
                await callback.message.edit_text(
                    hp_message,
                    parse_mode="Markdown"
                )
                await callback.message.answer(
                    "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞–ª—å–Ω–µ–π—à–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                    reply_markup=continue_btn
                )

        await callback.answer()
        save_data()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ handle_riddle_answer: {e}")
        await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")
        await callback.answer()


# ======================================–ó–∞–≥–∞–¥–∫–∏====================================#


# ======================================–°–¢–†–ê–ñ====================================#
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /ekg1
@dp.message(Command("ekg1"))
async def enter_encounter_knowledge_guardian(message: types.Message, bot: Bot):
    try:

        await message.answer("–í—ã –≤–æ—à–ª–∏ –≤ –∫–æ–º–Ω–∞—Ç—É –°—Ç—Ä–∞–∂–∞ –ó–Ω–∞–Ω–∏–π! üõ°Ô∏èüìö")

        # –ü–æ–ª—É—á–∞–µ–º —Å–ª–æ–≤–∞—Ä—å —Å —Ñ–æ—Ç–æ –∫–æ–º–Ω–∞—Ç—ã –∑–∞–≥–∞–¥–æ–∫
        ekg_photos = Photo_Diryk.get("–°—Ç—Ä–∞–∂ –ó–Ω–∞–Ω–∏–π", {})

        if not ekg_photos:
            await message.answer("–§–æ—Ç–æ –°—Ç—Ä–∞–∂–∞ –ó–Ω–∞–Ω–∏–π –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.")
            return

        # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ —Ñ–æ—Ç–æ
        random_photo_key = random.choice(list(ekg_photos.keys()))
        photo_path = ekg_photos[random_photo_key]

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –∫–æ–º–Ω–∞—Ç—ã –∑–∞–≥–∞–¥–æ–∫
        try:
            photo = FSInputFile(photo_path)
            await message.answer_photo(photo)
        except FileNotFoundError:
            await message.answer("–§–æ—Ç–æ –°—Ç—Ä–∞–∂–∞ –ó–Ω–∞–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return

        # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
        markup = types.InlineKeyboardMarkup(inline_keyboard=[
            [
                types.InlineKeyboardButton(text="üß† –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç",
                                           callback_data="guard_check_intelligence"),
                types.InlineKeyboardButton(text="üí™ –°–∏–ª–∞",
                                           callback_data="guard_check_strength")
                , types.InlineKeyboardButton(text="üèÉ –õ–æ–≤–∫–æ—Å—Ç—å",
                                             callback_data="guard_check_agility"),
            ],

        ])

        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏:", reply_markup=markup)


    except Exception as e:
        print(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ encounter_random_enemy: {str(e)}")  # –û—Ç–ª–∞–¥–∫–∞
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤—Ä–∞–≥–∞")


@dp.callback_query(F.data.startswith("guard_check_"))
async def handle_guard_check(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    data = user_data[user_id]
    hero_stats = data['hero_stats']
    max_hp = hero_stats['hp_max']  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ HP
    current_hp = hero_stats['hp']  # –¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ HP
    check_type = callback.data.split('_')[-1]  # intelligence/strength/agility
    player_stat = hero_stats.get(check_type, 0)

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏–ª—ã —Å—Ç—Ä–∞–∂–∞
    guard_stat = int(
        player_stat * random.choice([0.1, 1, 2]))
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    result_text = (
        f"–†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ {check_type}:\n"
        f"–í–∞—à —É—Ä–æ–≤–µ–Ω—å: {player_stat}\n"
        f"–°—Ç—Ä–∞–∂–∞: {guard_stat}\n\n"
    )

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    markup = types.InlineKeyboardMarkup(inline_keyboard=[])

    hp_message = ""  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º hp_message, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–∫–∏

    if player_stat >= guard_stat:
        result_text += "üéâ –í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à–ª–∏ –∏—Å–ø—ã—Ç–∞–Ω–∏–µ!"
        markup.inline_keyboard.append(
            [types.InlineKeyboardButton(text="‚û°Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø—É—Ç—å", callback_data="continue_path")]
        )
    else:
        # –û—Ç–Ω–∏–º–∞–µ–º 10% HP –æ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
        hp_loss = int(max_hp * 0.1)
        hero_stats['hp'] = max(0, current_hp - hp_loss)  # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ HP
        user_data[user_id]['hero_stats'] = hero_stats  # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ—Ç–µ—Ä–µ HP
        hp_message = (
            f"‚ùå –í—ã –ø–æ—Ç–µ—Ä—è–ª–∏ {hp_loss} HP (10% –æ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ).\n"
            f"‚ù§Ô∏è –û—Å—Ç–∞–ª–æ—Å—å HP: {hero_stats['hp']}/{max_hp}"
        )

        if hero_stats['hp'] <= 0:
            # –ï—Å–ª–∏ HP –º–µ–Ω—å—à–µ –∏–ª–∏ —Ä–∞–≤–Ω–æ 0 - –≤—ã—Ö–æ–¥ –∏–∑ –ª–∞–±–∏—Ä–∏–Ω—Ç–∞
            exit_markup = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üö™ –í—ã–π—Ç–∏ –∏–∑ –ª–∞–±–∏—Ä–∏–Ω—Ç–∞", callback_data="exit_maze")]
            ])
            await callback.message.edit_reply_markup(reply_markup=None)  # –£–±–∏—Ä–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            await callback.message.edit_text(
                f"{hp_message}\n\n"
                "‚ò†Ô∏è –í—ã –ø–æ—Ç–µ—Ä—è–ª–∏ —Å–æ–∑–Ω–∞–Ω–∏–µ –æ—Ç –ø–æ—Ç–µ—Ä–∏ –∑–¥–æ—Ä–æ–≤—å—è!",
                reply_markup=exit_markup
            )
            return  # –ó–∞–≤–µ—Ä—à–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏

    # –ï—Å–ª–∏ HP > 0 - –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
    continue_btn = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚û°Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø—É—Ç—å", callback_data="continue_path")]
    ])

    if hp_message:  # –ï—Å–ª–∏ hp_message –Ω–µ –ø—É—Å—Ç–æ–µ, –∑–Ω–∞—á–∏—Ç, –∏–≥—Ä–æ–∫ –ø–æ—Ç–µ—Ä—è–ª HP
        await callback.message.edit_reply_markup(reply_markup=None)  # –£–±–∏—Ä–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        await callback.message.edit_text(hp_message)
    else:
        await callback.message.edit_reply_markup(reply_markup=None)  # –£–±–∏—Ä–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        await callback.message.edit_text(result_text)
    save_data()
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞–ª—å–Ω–µ–π—à–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=continue_btn)
    await callback.answer()


# ======================================–°–¢–†–ê–ñ====================================#


# ======================================–†–∞–Ω–¥–æ–º –≤—Ä–∞–≥====================================#
one_photo_random_enemy = {
    "?": {
        "?": "Photo/KingDang/LabDiryk/Random_Enemy_Diryk/one.jpg"
    }
}
# –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç HP –≤—Ä–∞–≥–∞ (1000% –æ—Ç –Ω–∞—à–µ–≥–æ —É—Ä–æ–Ω–∞)
ENEMY_HP_MULTIPLIER = 10.0  # 1000% = 10.0


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /random_enemy1
@dp.message(Command("random_enemy1"))
async def encounter_random_enemy(message: types.Message, bot: Bot):
    """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤–æ–≥–æ –≤—Ä–∞–≥–∞, –∑–∞–º–µ–Ω—è—è –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ (–µ—Å–ª–∏ –±—ã–ª)"""
    try:
        user_id = message.from_user.id

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞
        if user_id not in user_data:
            user_data[user_id] = {
                'hero_stats': {
                    'hp': 1000,
                    'hp_max': 1000,
                    'mana': 1,
                    'attack': 10,
                    'defense': 5,
                    'strength': 5,
                    'agility': 5,
                    'intelligence': 5,
                    'crit_chance': 0.1,
                    'crit_damage': 1.5,
                },
                'gold': 0,
                'current_enemy': None
            }

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤—Ä–∞–≥–∞
        enemy = await generate_random_enemy(user_id)
        if not enemy:
            await message.answer("‚ö†Ô∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≤—Ä–∞–≥–æ–≤ –ø—É—Å—Ç–∞!")
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–∞–≥–∞
        user_data[user_id]['current_enemy'] = enemy
        enemy_name = "?"
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        photo_path = one_photo_random_enemy["?"][enemy_name]  # –ü—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é –≤—Ä–∞–≥–∞
        photo = FSInputFile(photo_path)  # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–æ—Ç–æ

        markup = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚öîÔ∏è –ê—Ç–∞–∫–æ–≤–∞—Ç—å", callback_data="attack_enemy"),
             InlineKeyboardButton(text="üèÉ –°–±–µ–∂–∞—Ç—å", callback_data="flee_enemy")]
        ])
        await message.answer_photo(
            photo=photo,
            reply_markup=markup,
            parse_mode="HTML"
        )


    except Exception as e:
        print(f"CRITICAL ERROR in encounter_random_enemy: {e}")
        await message.answer("‚ö†Ô∏è –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤—Ä–∞–≥–∞")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞—Ç–∞–∫–∏ –≤—Ä–∞–≥–∞
@dp.callback_query(F.data == "attack_enemy")
async def attack_enemy_handler(callback: types.CallbackQuery):
    user_id = callback.from_user.id

    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–∞
        if user_id not in user_data:
            await callback.answer("‚ùå –î–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", show_alert=True)
            return

        hero_stats = user_data[user_id]['hero_stats']

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≥–µ—Ä–æ—è
        if hero_stats['hp'] <= 0:
            await callback.answer("üí§ –í—ã –±–µ–∑ —Å–æ–∑–Ω–∞–Ω–∏—è!", show_alert=True)
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –≤—Ä–∞–≥–∞
        if 'current_enemy' not in user_data[user_id] or not user_data[user_id]['current_enemy']:
            enemy = await generate_random_enemy(user_id)
            if not enemy:
                await callback.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≤—Ä–∞–≥–∞!", show_alert=True)
                return
            user_data[user_id]['current_enemy'] = enemy

        enemy_data = user_data[user_id]['current_enemy']

        # –ê—Ç–∞–∫–∞ –∏–≥—Ä–æ–∫–∞
        damage, is_crit = await calculate_player_damage(hero_stats)
        enemy_data['hp'] = max(0, enemy_data['hp'] - damage)

        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        message_text = [
            f"‚öîÔ∏è –í—ã –∞—Ç–∞–∫–æ–≤–∞–ª–∏ {enemy_data['name']}{' üí•–ö–†–ò–¢!' if is_crit else ''}",
            f"üó°Ô∏è –£—Ä–æ–Ω: {damage} | ‚ù§Ô∏è {enemy_data['hp']}/{enemy_data['max_hp']}"
        ]

        # –ö–æ–Ω—Ç—Ä–∞—Ç–∞–∫–∞ (50% —à–∞–Ω—Å)
        if enemy_data['hp'] > 0 and random.random() < 0.5:
            enemy_damage = max(1, int(hero_stats['hp_max'] * 0.02))
            hero_stats['hp'] = max(0, hero_stats['hp'] - enemy_damage)
            message_text.extend([
                "",
                f"üõ°Ô∏è {enemy_data['name']} –∫–æ–Ω—Ç—Ä–∞—Ç–∞–∫—É–µ—Ç!",
                f"üí¢ –ü–æ–ª—É—á–µ–Ω–æ —É—Ä–æ–Ω–∞: {enemy_damage}",
                f"‚ù§Ô∏è –í–∞—à–µ –∑–¥–æ—Ä–æ–≤—å–µ: {hero_stats['hp']}/{hero_stats['hp_max']}"
            ])

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É–ø–∞–ª–æ –ª–∏ –∑–¥–æ—Ä–æ–≤—å–µ –∏–≥—Ä–æ–∫–∞ –Ω–∏–∂–µ 0
            if hero_stats['hp'] <= 0:
                message_text.extend([
                    "",
                    "üíÄ –í—ã –ø–æ—Ç–µ—Ä—è–ª–∏ —Å–æ–∑–Ω–∞–Ω–∏–µ –æ—Ç –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö —Ä–∞–Ω!",
                    "üöë –í–∞—Å –≤—ã–Ω–µ—Å–ª–∏ —Å –ø–æ–ª—è –±–æ—è..."
                ])

                # –£–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–∞–≥–∞
                user_data[user_id]['current_enemy'] = None

                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                await callback.message.edit_caption(
                    caption="\n".join(message_text),
                    parse_mode="HTML"
                )

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤—ã—Ö–æ–¥–∞
                exit_btn = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üö™ –í—ã–π—Ç–∏ –∏–∑ –ø–æ–¥–∑–µ–º–µ–ª—å—è", callback_data="exit_maze")]
                ])
                await callback.message.answer("–í—ã –ø–æ—Ç–µ—Ä—è–ª–∏ —Å–æ–∑–Ω–∞–Ω–∏–µ...", reply_markup=exit_btn)
                save_data()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
                await callback.answer()
                return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–±–µ–∂–¥–µ–Ω –ª–∏ –≤—Ä–∞–≥
        if enemy_data['hp'] <= 0:
            # –ù–∞–≥—Ä–∞–¥–∞ –∑–∞ –ø–æ–±–µ–¥—É
            reward = random.randint(5, 15)
            user_data[user_id]['gold'] += reward
            message_text.extend([
                "",
                f"üéâ –í—ã –ø–æ–±–µ–¥–∏–ª–∏ {enemy_data['name']}!",
                f"üí∞ –ü–æ–ª—É—á–µ–Ω–æ –∑–æ–ª–æ—Ç–∞: {reward}"
            ])

            # –£–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–∞–≥–∞
            user_data[user_id]['current_enemy'] = None

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –±–æ–µ
            await callback.message.edit_caption(
                caption="\n".join(message_text),
                parse_mode="HTML"
            )
            save_data()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è
            continue_btn = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚û°Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø—É—Ç—å", callback_data="continue_path")]
            ])
            await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞–ª—å–Ω–µ–π—à–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=continue_btn)
            await callback.answer()
            return

        # –ï—Å–ª–∏ –≤—Ä–∞–≥ –µ—â–µ –∂–∏–≤, –ø—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        try:
            photo = FSInputFile(enemy_data['photo_path'])
            await callback.message.edit_media(
                InputMediaPhoto(
                    media=photo,
                    caption="\n".join(message_text),
                    parse_mode="HTML"
                ),
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚öîÔ∏è –ê—Ç–∞–∫–æ–≤–∞—Ç—å", callback_data="attack_enemy")]
                ])
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–æ—Ç–æ: {e}")
            await callback.message.edit_caption(
                caption="\n".join(message_text),
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚öîÔ∏è –ê—Ç–∞–∫–æ–≤–∞—Ç—å", callback_data="attack_enemy")]
                ]),
                parse_mode="HTML"
            )

        save_data()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è
        await callback.answer()

    except Exception as e:
        print(f"Attack error: {e}")
        await callback.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ –±–æ—é", show_alert=True)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–∫–∏ –±–µ–≥—Å—Ç–≤–∞
@dp.callback_query(F.data == "flee_enemy")
async def flee_enemy_handler(callback: types.CallbackQuery):
    user_id = callback.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞
    if user_id not in user_data:
        await callback.answer("‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return

    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º 20% –æ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ HP
    max_hp = user_data[user_id]['hero_stats']['hp_max']
    lost_hp = int(max_hp * 0.2)
    user_data[user_id]['hero_stats']['hp'] -= lost_hp

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —É–ø–∞–ª–æ –ª–∏ HP –Ω–∏–∂–µ 0
    if user_data[user_id]['hero_stats']['hp'] <= 0:
        user_data[user_id]['hero_stats']['hp'] = 0
        await callback.answer("üò± –í—ã –ø–æ—Ç–µ—Ä—è–ª–∏ —Å–æ–∑–Ω–∞–Ω–∏–µ –æ—Ç —Ä–∞–Ω–µ–Ω–∏–π!")

        # –£–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–∞–≥–∞
        if 'current_enemy' in user_data[user_id]:
            user_data[user_id]['current_enemy'] = None

        save_data()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ—Ç–µ—Ä–µ —Å–æ–∑–Ω–∞–Ω–∏—è
        await callback.message.answer("üíÄ –í—ã –ø–æ—Ç–µ—Ä—è–ª–∏ —Å–æ–∑–Ω–∞–Ω–∏–µ –∏ –±—ã–ª–∏ –≤—ã–Ω–µ—Å–µ–Ω—ã —Å –ø–æ–ª—è –±–æ—è.")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤—ã—Ö–æ–¥–∞
        exit_btn = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üö™ –í—ã–π—Ç–∏ –∏–∑ –ø–æ–¥–∑–µ–º–µ–ª—å—è", callback_data="exit_maze")]
        ])
        await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=exit_btn)
        return

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ HP
    current_hp = user_data[user_id]['hero_stats']['hp']
    max_hp = user_data[user_id]['hero_stats']['hp_max']

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    message = (
        "üèÉ‚Äç‚ôÇÔ∏è –í—ã –ø–æ–ø—ã—Ç–∞–ª–∏—Å—å —Å–±–µ–∂–∞—Ç—å, –Ω–æ –≤—Ä–∞–≥ –∞—Ç–∞–∫–æ–≤–∞–ª –≤–∞—Å –≤ —Å–ø–∏–Ω—É!\n"
        f"üíî –ü–æ—Ç–µ—Ä—è–Ω–æ HP: {lost_hp}\n"
        f"‚ù§Ô∏è –û—Å—Ç–∞–ª–æ—Å—å HP: {current_hp}/{max_hp}"
    )

    # –£–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–∞–≥–∞
    if 'current_enemy' in user_data[user_id]:
        user_data[user_id]['current_enemy'] = None

    save_data()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç
    await callback.message.answer(message)

    # –£–¥–∞–ª—è–µ–º –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    await callback.message.edit_reply_markup(reply_markup=None)

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø—É—Ç—å"
    continue_markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚û°Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø—É—Ç—å", callback_data="continue_path")]
    ])

    await callback.message.answer("üö∂‚Äç‚ôÇÔ∏è –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å–≤–æ–π –ø—É—Ç—å.", reply_markup=continue_markup)
    await callback.answer()


async def calculate_enemy_hp(user_attack: int) -> int:
    """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç HP –≤—Ä–∞–≥–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞—Ç–∞–∫–∏ –∏–≥—Ä–æ–∫–∞"""
    base_hp = user_attack * ENEMY_HP_MULTIPLIER
    return int(base_hp * random.uniform(0.8, 1.2))  # +-20% —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Ä–∞–∑–±—Ä–æ—Å–∞


async def calculate_player_damage(hero_stats: dict) -> int:
    """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —É—Ä–æ–Ω –∏–≥—Ä–æ–∫–∞ —Å —É—á–µ—Ç–æ–º –∫—Ä–∏—Ç–æ–≤"""
    base_damage = hero_stats['attack']

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —É–¥–∞—Ä
    if random.random() < hero_stats['crit_chance']:
        damage = int(base_damage * hero_stats['crit_damage'])
        return damage, True  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Ä–æ–Ω –∏ —Ñ–ª–∞–≥ –∫—Ä–∏—Ç–∞
    return base_damage, False


async def generate_random_enemy(user_id: int) -> dict:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ª—É—á–∞–π–Ω–æ–≥–æ –≤—Ä–∞–≥–∞ –¥–ª—è –∏–≥—Ä–æ–∫–∞"""
    enemies_dict = Photo_Diryk.get("–†–∞–Ω–¥–æ–º–Ω—ã–π –≤—Ä–∞–≥", {})
    if not enemies_dict:
        return None

    # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —Ç–∏–ø –≤—Ä–∞–≥–∞ –∏ –µ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç
    enemy_type = random.choice(list(enemies_dict.keys()))
    enemy_variants = enemies_dict[enemy_type]
    enemy_name, enemy_photo_path = random.choice(list(enemy_variants.items()))

    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º HP –≤—Ä–∞–≥–∞
    hero_attack = user_data[user_id]['hero_stats'].get('attack', 10)
    enemy_hp = int(hero_attack * ENEMY_HP_MULTIPLIER * random.uniform(0.8, 1.2))

    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —É—Ä–æ–Ω
    crit_damage = int(hero_attack * user_data[user_id]['hero_stats']['crit_damage'])

    return {
        "name": enemy_name,
        "type": enemy_type,
        "hp": enemy_hp,
        "max_hp": enemy_hp,
        "photo_path": enemy_photo_path,
        "crit_damage": crit_damage  # –î–æ–±–∞–≤–ª—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —É—Ä–æ–Ω –≤ –¥–∞–Ω–Ω—ã–µ –≤—Ä–∞–≥–∞
    }


# ======================================–†–∞–Ω–¥–æ–º –≤—Ä–∞–≥====================================#


# ======================================–ó–∞–ª –û—á–∏—â–µ–Ω–∏—è====================================#
# –ó–∞–ª –æ—á–∏—â–µ–Ω–∏—è
@dp.message(Command("enter_purification_hall1"))
async def enter_purification_hall(message: types.Message, bot: Bot):
    chat_id = message.chat.id

    # 1. –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ –∑–∞–ª–∞ –æ—á–∏—â–µ–Ω–∏—è
    try:
        purification_photos = Photo_Diryk.get("–ó–∞–ª –û—á–∏—â–µ–Ω–∏–µ", {})
        if not purification_photos:
            await message.answer("üïäÔ∏è –ó–∞–ª –æ—á–∏—â–µ–Ω–∏—è —Å–µ–≥–æ–¥–Ω—è –∑–∞–∫—Ä—ã—Ç...")
            return

        random_photo_key = random.choice(list(purification_photos.keys()))
        photo = FSInputFile(purification_photos[random_photo_key])
        await message.answer_photo(photo, caption=f"üïäÔ∏è {random_photo_key}")
        await asyncio.sleep(1)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ç–æ: {e}")
        await message.answer("üïäÔ∏è –û—á–∏—â–µ–Ω–∏–µ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–æ... (—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –Ω–µ–ø–æ–ª–∞–¥–∫–∏)")
        return

    # 2. –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_stats = user_data[chat_id]['hero_stats']
    was_cursed = user_data[chat_id].get('current_category', False)

    # 3. –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–∫–ª—è—Ç–∏—è –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ HP
    hp_before = user_stats['hp']
    user_stats['hp'] = user_stats['hp_max']

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    if was_cursed:
        # 2.1 –ï—Å–ª–∏ –±—ã–ª–∏ –ø—Ä–æ–∫–ª—è—Ç—ã
        user_data[chat_id]['current_category'] = False
        curse_message = "üåÄ *–®—ë–ø–æ—Ç —Ç–µ–Ω–µ–π:* –í—ã —á—É–≤—Å—Ç–≤—É–µ—Ç–µ —Å–µ–±—è –ø—Ä–µ–∫—Ä–∞—Å–Ω–æ –∏ –≤—ã –ø–æ–Ω–∏–º–∞–µ—Ç–µ, —á—Ç–æ –ø—Ä–æ–∫–ª—è—Ç—å–µ —Å–Ω—è—Ç–æ...\n"
    else:
        # 1) –ï—Å–ª–∏ –Ω–µ –±—ã–ª–∏ –ø—Ä–æ–∫–ª—è—Ç—ã
        curse_message = "‚ú® –í—ã –Ω–µ –±—ã–ª–∏ –ø—Ä–æ–∫–ª—è—Ç—ã, –Ω–æ —á—É–≤—Å—Ç–≤—É–µ—Ç–µ –ª—ë–≥–∫–æ—Å—Ç—å –≤ –¥—É—à–µ...\n"

    # 4. –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º HP –∫–∞–∫ –≤ –ø—Ä–∏–º–µ—Ä–µ
    hp_info = f"‚ù§Ô∏è –¢–µ–∫—É—â–µ–µ HP: {hp_before} ‚Üí {user_stats['hp']}\n"

    result_message = (
        f"{curse_message}"
        f"{hp_info}"
        f"üïäÔ∏è –í–∞—à–µ –∑–¥–æ—Ä–æ–≤—å–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!"
    )

    await message.answer(result_message, parse_mode="Markdown")
    save_data()
    # 5. –ö–Ω–æ–ø–∫–∞ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è
    continue_btn = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚û°Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø—É—Ç—å", callback_data="continue_path")]
    ])
    await message.answer("–ö—É–¥–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ—Å—å —Ç–µ–ø–µ—Ä—å?", reply_markup=continue_btn)


# ======================================–ó–∞–ª –û—á–∏—â–µ–Ω–∏—è====================================#


# ======================================–ö—Ä–∏–ø—Ç–∞ –£–Ω–∏—á—Ç–æ–∂–µ–Ω–∏—è====================================#
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã  "–ö—Ä–∏–ø—Ç–∞ –£–Ω–∏—á—Ç–æ–∂–µ–Ω–∏—è" /enter_destruction_crypt1
@dp.message(Command("enter_destruction_crypt1"))
async def enter_destruction_crypt(message: types.Message, bot: Bot):
    user_id = message.from_user.id
    hero_stats = user_data[user_id]['hero_stats']
    max_hp = hero_stats['hp']  # –¢–µ–∫—É—â–µ–µ HP —Å—á–∏—Ç–∞–µ—Ç—Å—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º

    # 1) –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ –∫—Ä–∏–ø—Ç—ã —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏—è –∏–∑ Photo_Diryk
    try:
        crypt_photos = Photo_Diryk.get("–ö—Ä–∏–ø—Ç–∞ –£–Ω–∏—á—Ç–æ–∂–µ–Ω–∏—è", {})

        if not crypt_photos:
            await message.answer("üíÄ –ö—Ä–∏–ø—Ç–∞ —Å–µ–≥–æ–¥–Ω—è –∑–∞–∫—Ä—ã—Ç–∞...")
            return

        # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ —Ñ–æ—Ç–æ
        random_photo_key = random.choice(list(crypt_photos.keys()))
        photo_path = crypt_photos[random_photo_key]

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
        if not os.path.exists(photo_path):
            raise FileNotFoundError(f"–§–∞–π–ª {photo_path} –Ω–µ –Ω–∞–π–¥–µ–Ω")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ
        photo = FSInputFile(photo_path)
        await message.answer_photo(photo, caption=f"üíÄ {random_photo_key}")
        await asyncio.sleep(1)

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å —Ñ–æ—Ç–æ –∫—Ä–∏–ø—Ç—ã: {str(e)}")
        await message.answer("üíÄ –ö—Ä–∏–ø—Ç–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç... (–æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏)")
        return

    # 2) –°–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–ø–∞–¥–∞–Ω–∏–∏ –≤ –∫–æ–º–Ω–∞—Ç—É
    await message.answer("üåÄ –í—ã –ø–æ–ø–∞–ª–∏ –≤ –ö—Ä–∏–ø—Ç—É –£–Ω–∏—á—Ç–æ–∂–µ–Ω–∏—è!")
    await asyncio.sleep(1)

    # 3) –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤—ã–±–æ—Ä–æ–º –¥–µ–π—Å—Ç–≤–∏–π
    markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–®–∞–Ω—Å—ã", callback_data="destruction_crypt_chances"),
         InlineKeyboardButton(text="üé≤ –ë—Ä–æ—Å–∏—Ç—å –∫—É–±–∏–∫", callback_data="destruction_crypt_roll")]
    ])

    await message.answer(
        "üíÄ –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø—ã—Ç–∞—Ç—å —Å—É–¥—å–±—É...",
        reply_markup=markup
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ë—Ä–æ—Å–∏—Ç—å –∫—É–±–∏–∫"
@dp.callback_query(lambda c: c.data == "destruction_crypt_roll")
async def destruction_crypt_roll_handler(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    chat_id = callback.message.chat.id
    hero_stats = user_data[user_id]['hero_stats']
    max_hp = hero_stats['hp_max']

    # –£–¥–∞–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    try:
        await callback.message.edit_reply_markup(reply_markup=None)
    except Exception as e:
        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–±—Ä–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É: {e}")

    # –ë—Ä–æ—Å–∞–µ–º –∫—É–±–∏–∫
    roll_msg = await callback.message.answer("üé≤ –ë—Ä–æ—Å–∞–µ–º –∫—É–±–∏–∫ —Å—É–¥—å–±—ã...")
    dice_msg = await bot.send_dice(callback.message.chat.id, emoji='üé≤')
    await asyncio.sleep(4)

    current_roll = dice_msg.dice.value

    # –ï—Å–ª–∏ –≤—ã–ø–∞–ª–æ 1 - —Ç–µ—Ä—è–µ–º 40% HP
    if current_roll == 1:
        hp_loss = int(max_hp * 0.4)
        hero_stats['hp'] -= hp_loss
        # –ï—Å–ª–∏ –≤—ã–ø–∞–ª–æ 1 - —Ç–µ—Ä—è–µ–º 40% HP

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ HP –≤ –∏—Å—Ç–æ—Ä–∏—é
        if 'destruction_history' not in user_data[user_id]:
            user_data[user_id]['destruction_history'] = []
        user_data[user_id]['destruction_history'].append(hero_stats['hp'])

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Å—Ç–∞–ª–æ—Å—å –ª–∏ HP
        if hero_stats['hp'] <= 0:
            hero_stats['hp'] = 0
            await callback.message.answer(
                f"üíÄ –ö—Ä–∏–ø—Ç–∞ –∑–∞–±—Ä–∞–ª–∞ {hp_loss} HP!\n"
                f"‚ù§Ô∏è‚Äçü©π –ó–¥–æ—Ä–æ–≤—å–µ: 0/{max_hp}\n\n"
                "‚ò†Ô∏è –í—ã –ø–∞–¥–∞–µ—Ç–µ –∑–∞–º–µ—Ä—Ç–≤–æ..."
            )
            # –ï—Å–ª–∏ HP <= 0 - –≤—ã—Ö–æ–¥ –∏–∑ –ª–∞–±–∏—Ä–∏–Ω—Ç–∞
            fake_callback = types.CallbackQuery(
                id="0",
                from_user=callback.from_user,
                message=callback.message,
                chat_instance="0",
                data="exit_maze"
            )
            await exit_maze_handler(fake_callback)
            return

        # –ï—Å–ª–∏ HP > 0 - –∫–Ω–æ–ø–∫–∞ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å
        markup = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚û°Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø—É—Ç—å", callback_data="continue_path")]
        ])

        await callback.message.answer(
            f"üí¢ –ö—Ä–∏–ø—Ç–∞ –æ—Ç–Ω—è–ª–∞ {hp_loss} HP!\n"
            f"‚ù§Ô∏è‚Äçü©π –¢–µ–ø–µ—Ä—å —É –≤–∞—Å: {hero_stats['hp']}/{max_hp} HP",
            reply_markup=markup
        )
    else:
        # –ï—Å–ª–∏ –≤—ã–ø–∞–ª–æ –Ω–µ 1 - –ø—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ—Å–ª–µ–¥–Ω—è—è –ª–∏ —ç—Ç–æ –∫–æ–º–Ω–∞—Ç–∞
        current_floor = current_floor_diryk.get(chat_id, 0)
        max_floor = max(floors_lab_dir.keys()) if floors_lab_dir else 0

        if current_floor == max_floor:
            # –≠—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è –∫–æ–º–Ω–∞—Ç–∞ - –ø–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –ø–æ–±–µ–¥–æ–π!
            await callback.message.answer(
                "üî• –í—ã –ø—Ä–æ—à–ª–∏ –ö—Ä–∏–ø—Ç—É –£–Ω–∏—á—Ç–æ–∂–µ–Ω–∏—è –∏ –∑–∞–≤–µ—Ä—à–∏–ª–∏ –õ–∞–±–∏—Ä–∏–Ω—Ç –î–∏—Ä—É–∫–∞!"
            )
            await congratulate_user(chat_id)
        else:
            # –û–±—ã—á–Ω–∞—è –∫–æ–º–Ω–∞—Ç–∞ - –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
            markup = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚û°Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø—É—Ç—å", callback_data="continue_path")]
            ])
            await callback.message.answer(
                f"üéâ –í–∞–º –ø–æ–≤–µ–∑–ª–æ! –í—ã–ø–∞–ª–æ: {current_roll}\n"
                "–í—ã –∏–∑–±–µ–∂–∞–ª–∏ —Ä–∞–∑—Ä—É—à–∏—Ç–µ–ª—å–Ω–æ–π —Å–∏–ª—ã –∫—Ä–∏–ø—Ç—ã.",
                reply_markup=markup
            )
    save_data()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–®–∞–Ω—Å—ã"
@dp.callback_query(lambda c: c.data == "destruction_crypt_chances")
async def destruction_crypt_chances_handler(callback: types.CallbackQuery):
    await callback.answer(
        "üíÄ –®–∞–Ω—Å—ã –≤ –ö—Ä–∏–ø—Ç–µ –£–Ω–∏—á—Ç–æ–∂–µ–Ω–∏—è:\n"
        "1: –ü—Ä–æ–∏–≥—Ä—ã—à (-40% HP)\n"
        "2-6: –ë–µ–∑ –ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏–π",
        show_alert=True
    )


# ======================================–ö—Ä–∏–ø—Ç–∞ –£–Ω–∏—á—Ç–æ–∂–µ–Ω–∏—è====================================#


# ======================================–ó–∞–ª —Å–Ω–æ–≤====================================#
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã  "–ó–∞–ª —Å–Ω–æ–≤" /enter_dream_hall1
@dp.message(Command("enter_dream_hall1"))
async def enter_dream_hall(message: types.Message, bot: Bot):
    user_id = message.from_user.id

    # 1) –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –∑–∞–ª–∞ —Å–Ω–æ–≤
    dream_photos = Photo_Diryk.get("–ó–∞–ª –°–Ω–æ–≤", {})

    if not dream_photos:
        await message.answer("üí§ –ó–∞–ª —Å–Ω–æ–≤ —Å–µ–≥–æ–¥–Ω—è –∑–∞–∫—Ä—ã—Ç...")
        return

    # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ —Ñ–æ—Ç–æ
    random_photo_key = random.choice(list(dream_photos.keys()))
    photo_path = dream_photos[random_photo_key]

    try:
        photo = FSInputFile(photo_path)
        await message.answer_photo(photo, caption=f"üí§ {random_photo_key}")
        await asyncio.sleep(1)
    except FileNotFoundError:
        await message.answer("üí§ –°–Ω—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã... (–æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ)")
        return

    # 2) –°–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–ø–∞–¥–∞–Ω–∏–∏ –≤ –∫–æ–º–Ω–∞—Ç—É
    await message.answer("üåÄ –í—ã –ø–æ–ø–∞–ª–∏ –≤ –ó–∞–ª –°–Ω–æ–≤...")

    # 3) –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–Ω–æ–≤ —Å —Ä–∞–∑–Ω—ã–º –≤—Ä–µ–º–µ–Ω–µ–º –æ–∂–∏–¥–∞–Ω–∏—è
    dreams = [30, 45, 60]  # –í—Ä–µ–º—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    selected_dream_time = random.choice(dreams)

    # 4) –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–∞–π–º–µ—Ä–æ–º
    timer_msg = await message.answer(f"üí≠ –í–∞–º —Å–Ω–∏—Ç—Å—è —Å–æ–Ω... "
                                     f"–û—Å—Ç–∞–ª–æ—Å—å: {selected_dream_time} —Å–µ–∫.")

    # –û—Ç–º–µ–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é –∑–∞–¥–∞—á—É, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
    if user_id in user_dream_tasks:
        user_dream_tasks[user_id].cancel()

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä —Å –æ–±—Ä–∞—Ç–Ω—ã–º –æ—Ç—Å—á–µ—Ç–æ–º
    task = asyncio.create_task(
        dream_timer(
            user_id=user_id,
            chat_id=message.chat.id,
            timer_msg_id=timer_msg.message_id,
            duration=selected_dream_time
        )
    )
    user_dream_tasks[user_id] = task


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á —Å–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_dream_tasks = {}


async def dream_timer(user_id: int, chat_id: int, timer_msg_id: int, duration: int):
    try:
        while duration > 0:
            await asyncio.sleep(1)
            duration -= 1
            try:
                await bot.edit_message_text(
                    f"üí≠ –í–∞–º —Å–Ω–∏—Ç—Å—è —Å–æ–Ω... –û—Å—Ç–∞–ª–æ—Å—å: {duration} —Å–µ–∫.",
                    chat_id=chat_id,
                    message_id=timer_msg_id
                )
            except:
                pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        save_data()
        # 5) –ö–æ–≥–¥–∞ –≤—Ä–µ–º—è –∑–∞–∫–æ–Ω—á–∏–ª–æ—Å—å
        markup = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚û°Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø—É—Ç—å", callback_data="continue_path")]
        ])

        await bot.edit_message_text(
            "üí§ –í—ã –ø—Ä–æ—Å–Ω—É–ª–∏—Å—å...",
            chat_id=chat_id,
            message_id=timer_msg_id,
            reply_markup=markup
        )

    except asyncio.CancelledError:
        # –ó–∞–¥–∞—á–∞ –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ –∫–æ–º–Ω–∞—Ç—ã)
        pass
    finally:
        if user_id in user_dream_tasks:
            del user_dream_tasks[user_id]


# ======================================–ó–∞–ª —Å–Ω–æ–≤====================================#


# ======================================–ö–æ–º–Ω–∞—Ç–∞ —Å—Ç—Ä–∞—Ö–∞====================================#
math_problems = {
    "easy": {
        "üî¢ –†–µ—à–∏—Ç–µ –∑–∞–¥–∞—á—É: 2 + 2 √ó 2": "6",
        "üî¢ –†–µ—à–∏—Ç–µ –∑–∞–¥–∞—á—É: 15 - 3 √ó 4": "3",
        "üî¢ –†–µ—à–∏—Ç–µ –∑–∞–¥–∞—á—É: 20 √∑ (4 + 1)": "4",
        "üî¢ –†–µ—à–∏—Ç–µ –∑–∞–¥–∞—á—É: 3¬≤ + 4¬≤": "25"
    },
    "medium": {
        "üî¢ –†–µ—à–∏—Ç–µ –∑–∞–¥–∞—á—É: ‚à´(x¬≤)dx –æ—Ç 0 –¥–æ 1": "1/3",
        "üî¢ –†–µ—à–∏—Ç–µ –∑–∞–¥–∞—á—É: lim(x‚Üí‚àû) (1 + 1/x)À£": "e",
        "üî¢ –†–µ—à–∏—Ç–µ –∑–∞–¥–∞—á—É: d/dx (sin(x) + cos(x))": "cos(x)-sin(x)",
        "üî¢ –†–µ—à–∏—Ç–µ –∑–∞–¥–∞—á—É: ‚àö(16 + 9)": "5"
    },
    "hard": {
        "üî¢ –†–µ—à–∏—Ç–µ –∑–∞–¥–∞—á—É: : x¬≤ - 5x + 6 = 0": "2,3",
        "üî¢ –†–µ—à–∏—Ç–µ –∑–∞–¥–∞—á—É: –ß–∏—Å–ª–æ —Å–æ—á–µ—Ç–∞–Ω–∏–π C(5,2)": "10",
        "üî¢ –†–µ—à–∏—Ç–µ –∑–∞–¥–∞—á—É: –ß–∏—Å–ª–æ œÄ —Å —Ç–æ—á–Ω–æ—Å—Ç—å—é –¥–æ 0.01": "3.14",
        "üî¢ "
        "–†–µ—à–∏—Ç–µ –∑–∞–¥–∞—á—É: e^(iœÄ) + 1": "0"
    }
}


# /enter_fear_room1
@dp.message(Command("enter_fear_room1"))
async def enter_fear_room(message: types.Message, bot: Bot):
    user_id = message.from_user.id
    chat_id = message.chat.id

    try:
        # 1) –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∫–æ–º–Ω–∞—Ç—ã
        fear_photos = Photo_Diryk.get("–ö–æ–º–Ω–∞—Ç–∞ —Å—Ç—Ä–∞—Ö–∞", {})
        if not fear_photos:
            await message.answer("üö™ –î–≤–µ—Ä—å –≤ –∫–æ–º–Ω–∞—Ç—É —Å—Ç—Ä–∞—Ö–∞ –∑–∞–ø–µ—á–∞—Ç–∞–Ω–∞...", parse_mode="HTML")
            return

        # 2) –í—ã–±–æ—Ä —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Ñ–æ—Ç–æ
        random_photo_key, photo_path = random.choice(list(fear_photos.items()))

        # 3) –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞
        if not os.path.exists(photo_path):
            await message.answer("üì∏ –ó–µ—Ä–∫–∞–ª–∞ –∫–æ–º–Ω–∞—Ç—ã —Ç—Ä–µ—Å–Ω—É–ª–∏!", parse_mode="HTML")
            return

        # 4) –°–æ–∑–¥–∞–Ω–∏–µ –∞—Ç–º–æ—Å—Ñ–µ—Ä—ã
        await message.answer("üïØÔ∏è <i>–°–≤–µ—á–∏ –≥–∞—Å–Ω—É—Ç...</i>", parse_mode="HTML")
        await asyncio.sleep(1)

        # 5) –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ
        try:
            photo = FSInputFile(photo_path)
            await message.answer_photo(
                photo,
                caption=f"üëπ <b>{random_photo_key}</b>\nüíÄ <i>–¢—å–º–∞ —à–µ–ø—á–µ—Ç...</i>",
                parse_mode="HTML"
            )
            await asyncio.sleep(2)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ: {e}")
            await message.answer("üåÄ <b>–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏—Å–∫–∞–∂–µ–Ω–æ!</b>", parse_mode="HTML")

        # 6) –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫—É—é –∑–∞–¥–∞—á—É
        difficulty = random.choice(list(math_problems.keys()))
        problem, correct_answer = random.choice(list(math_problems[difficulty].items()))

        # 7) –°–æ–∑–¥–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤
        answers = [correct_answer]
        while len(answers) < 6:
            wrong_answer = str(random.randint(1, 100))
            if wrong_answer not in answers:
                answers.append(wrong_answer)

        random.shuffle(answers)

        # 8) –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ –≤ 2 —Å—Ç–æ–ª–±—Ü–∞
        buttons = []
        for i in range(0, len(answers), 2):
            row = []
            if i < len(answers):
                row.append(
                    InlineKeyboardButton(text=answers[i], callback_data=f"math_answer_{answers[i]}_{correct_answer}"))
            if i + 1 < len(answers):
                row.append(InlineKeyboardButton(text=answers[i + 1],
                                                callback_data=f"math_answer_{answers[i + 1]}_{correct_answer}"))
            if row:
                buttons.append(row)

        markup = InlineKeyboardMarkup(inline_keyboard=buttons)

        # 9) –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å —Å —Ç–∞–π–º–µ—Ä–æ–º
        question_msg = await message.answer(
            f"üî¢ <b>–†–µ—à–∏—Ç–µ –∑–∞–¥–∞—á—É:</b>\n\n{problem}\n\n",
            parse_mode="HTML",
            reply_markup=markup
        )

        # 10) –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä
        active_timers[chat_id] = asyncio.create_task(update_timer(question_msg, chat_id, 60, correct_answer))

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")
        await message.answer("üí• <b>–ö–æ–º–Ω–∞—Ç–∞ —Ä–∞–∑—Ä—É—à–∞–µ—Ç—Å—è!</b>", parse_mode="HTML")


# –î–æ–±–∞–≤–∏–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–∞–π–º–µ—Ä–æ–≤
active_timers = {}


@dp.callback_query(lambda c: c.data.startswith("math_answer_"))
async def handle_math_answer(callback: types.CallbackQuery):
    # –†–∞–∑–±–∏—Ä–∞–µ–º callback_data –≤ —Ñ–æ—Ä–º–∞—Ç–µ "math_answer_–≤—ã–±—Ä–∞–Ω–Ω—ã–π_–æ—Ç–≤–µ—Ç_–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π_–æ—Ç–≤–µ—Ç"
    parts = callback.data.split("_")
    selected_answer = "_".join(parts[2:-1])  # –û–±—ä–µ–¥–∏–Ω—è–µ–º —á–∞—Å—Ç–∏ –æ—Ç–≤–µ—Ç–∞ (–Ω–∞ —Å–ª—É—á–∞–π –µ—Å–ª–∏ –æ—Ç–≤–µ—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç _)
    correct_answer = parts[-1]  # –ü–æ—Å–ª–µ–¥–Ω—è—è —á–∞—Å—Ç—å - –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç

    chat_id = callback.message.chat.id

    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä
    if chat_id in active_timers:
        active_timers[chat_id].cancel()
        del active_timers[chat_id]

    # –£–¥–∞–ª—è–µ–º –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏
    try:
        await callback.message.edit_reply_markup(reply_markup=None)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–Ω–æ–ø–æ–∫: {e}")

    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –æ—Ç–≤–µ—Ç—ã –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è (–ø—Ä–∏–≤–æ–¥–∏–º –∫ —Å—Ç—Ä–æ–∫–µ –∏ —É–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã)
    normalized_selected = str(selected_answer).strip().replace(" ", "")
    normalized_correct = str(correct_answer).strip().replace(" ", "")

    if normalized_selected == normalized_correct:
        # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç - –Ω–µ –Ω–∞–Ω–æ—Å–∏–º —É—Ä–æ–Ω
        await callback.answer("‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ! –í—ã –∏–∑–±–µ–∂–∞–ª–∏ –ª–æ–≤—É—à–∫–∏.", show_alert=True)
        save_data()
        continue_btn = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚û°Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø—É—Ç—å", callback_data="continue_path")]
        ])
        await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞–ª—å–Ω–µ–π—à–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=continue_btn)
    else:
        # –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç - –Ω–∞–Ω–æ—Å–∏–º —É—Ä–æ–Ω 5%
        user_stats = user_data[chat_id]['hero_stats']
        damage = int(user_stats['hp_max'] * 0.05)
        user_stats['hp'] = max(0, user_stats['hp'] - damage)  # –ù–µ —É—Ö–æ–¥–∏–º –Ω–∏–∂–µ 0

        if user_stats['hp'] <= 0:
            await callback.answer("üíÄ –í—ã –ø–æ–ª—É—á–∏–ª–∏ —Å–º–µ—Ä—Ç–µ–ª—å–Ω—ã–π —É–¥–∞—Ä!", show_alert=True)
            await exit_maze_handler(callback)
        else:
            await callback.answer(
                f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ! –í—ã —Ç–µ—Ä—è–µ—Ç–µ 5% HP ({damage} –µ–¥–∏–Ω–∏—Ü). –¢–µ–∫—É—â–µ–µ HP: {user_stats['hp']}/{user_stats['hp_max']}",
                show_alert=True
            )
            save_data()
            continue_btn = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚û°Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø—É—Ç—å", callback_data="continue_path")]
            ]
            )

            await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞–ª—å–Ω–µ–π—à–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=continue_btn)


async def update_timer(message, chat_id, time_left, correct_answer):
    if chat_id in active_timers and active_timers[chat_id].cancelled():
        return

    if time_left > 0:
        try:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç, —Å–æ—Ö—Ä–∞–Ω—è—è –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            original_text = "\n".join(message.text.split("\n")[1:])  # –£–±–∏—Ä–∞–µ–º —Å—Ç—Ä–æ–∫—É —Å —Ç–∞–π–º–µ—Ä–æ–º
            await message.edit_text(
                text=f"‚è≥ –ß—Ç–æ–±—ã —Ä–µ—à–∏—Ç—å —É –≤–∞—Å –µ—Å—Ç—å: {time_left} —Å–µ–∫.\n{original_text}",
                reply_markup=message.reply_markup
            )
            await asyncio.sleep(1)
            active_timers[chat_id] = asyncio.create_task(update_timer(message, chat_id, time_left - 1, correct_answer))
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–∞–π–º–µ—Ä–∞: {e}")
    else:
        # –£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø—Ä–∏ –∏—Å—Ç–µ—á–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏
        try:
            await message.edit_reply_markup(reply_markup=None)
        except:
            pass

        # –ù–∞–Ω–æ—Å–∏–º —É—Ä–æ–Ω
        if chat_id in user_data:
            user_stats = user_data[chat_id]['hero_stats']
            user_stats['hp'] -= user_stats['hp_max'] * 0.1

            if user_stats['hp'] <= 0:
                await message.answer("üíÄ –í—ã –Ω–µ —É—Å–ø–µ–ª–∏ –æ—Ç–≤–µ—Ç–∏—Ç—å –∏ –ø–æ–ª—É—á–∏–ª–∏ —Å–º–µ—Ä—Ç–µ–ª—å–Ω—ã–π —É–¥–∞—Ä!")

                await exit_maze_handler(message)
            else:
                save_data()
                await message.answer(
                    f"‚è∞ –í—Ä–µ–º—è –≤—ã—à–ª–æ! –í—ã –ø–æ—Ç–µ—Ä—è–ª–∏ 10% HP (—Ç–µ–ø–µ—Ä—å HP: {user_stats['hp']}/{user_stats['hp_max']})")
                continue_btn = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚û°Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø—É—Ç—å", callback_data="continue_path")]
                ])
                await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞–ª—å–Ω–µ–π—à–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=continue_btn)


# ======================================–ö–æ–º–Ω–æ—Ç–∞ —Å—Ç—Ä–∞—Ö–∞====================================#


# ======================================–†—É–¥–Ω–∏–∫====================================#
ore_names = {
    "–∫–∞–º–µ–Ω—å": "–ö–∞–º–µ–Ω—å",
    "–∂–µ–ª–µ–∑–æ": "–ñ–µ–ª–µ–∑–Ω–∞—è —Ä—É–¥–∞",
    "—Å—Ç–∞–ª—å": "–°—Ç–∞–ª—å",
    "–∞–ª–º–∞–∑": "–ê–ª–º–∞–∑",
    "–º–∏—Ñ—Ä–∏–ª": "–ú–∏—Ñ—Ä–∏–ª",
}
mine_ores = {
    "–∫–∞–º–µ–Ω—å": {"chance": 0.4, "min": 2, "max": 5},
    "–∂–µ–ª–µ–∑–æ": {"chance": 0.3, "min": 1, "max": 3},
    "—Å—Ç–∞–ª—å": {"chance": 0.2, "min": 1, "max": 2},
    "–∞–ª–º–∞–∑": {"chance": 0.05, "min": 1, "max": 1},
    "–º–∏—Ñ—Ä–∏–ª": {"chance": 0.05, "min": 1, "max": 1},

}


# /mine_with_ores1
@dp.message(Command("mine_with_ores1"))
async def mine_with_ores(message: types.Message, bot: Bot):
    user_id = str(message.from_user.id)  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å—Ç—Ä–æ–∫—É, —Ç–∞–∫ –∫–∞–∫ –≤ JSON –∫–ª—é—á–∏ —Å—Ç—Ä–æ–∫–∏

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
    try:
        with open(CHARACTER_DATA_FILE, 'r', encoding='utf-8') as f:
            character_data = json.load(f)
    except FileNotFoundError:
        await message.answer("–û—à–∏–±–∫–∞: —Ñ–∞–π–ª –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    except json.JSONDecodeError:
        await message.answer("–û—à–∏–±–∫–∞: –ø–æ–≤—Ä–µ–∂–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id not in character_data:
        await message.answer("–£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞. –°–æ–∑–¥–∞–π—Ç–µ –µ–≥–æ —Å–Ω–∞—á–∞–ª–∞.")
        return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –∏–∑ –†—É–¥–Ω–∏–∫–∞
    ores_photos = Photo_Diryk.get("–†—É–¥–Ω–∏–∫", {})
    if not ores_photos:
        await message.answer("–†—É–¥–Ω–∏–∫ —Å–µ–≥–æ–¥–Ω—è –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç...")
        return

    random_photo_key = random.choice(list(ores_photos.keys()))
    photo_path = ores_photos[random_photo_key]

    try:
        photo = FSInputFile(photo_path)
        sent_message = await message.answer_photo(photo, caption=f"‚õèÔ∏è {random_photo_key}")
    except FileNotFoundError:
        await message.answer("üõ†Ô∏è –†—É–¥–Ω–∏–∫ –≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–∫—Ä—ã—Ç... (—Ñ–æ—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ)")
        return

    # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –¥–æ–±—ã—á–∏
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚õèÔ∏è –î–æ–±—ã—Ç—å —Ä—É–¥—É", callback_data="mine_ore")]
    ])
    action_message = await message.answer("–í—ã –≤—Å—Ç—Ä–µ—Ç–∏–ª–∏ —Å–≤–µ–∂—É—é —Ä—É–¥–Ω—É—é –∂–∏–ª—É! –ß—Ç–æ –±—É–¥–µ—Ç–µ –¥–µ–ª–∞—Ç—å?", reply_markup=keyboard)


@dp.callback_query(lambda c: c.data == "mine_ore")
async def mine_ore_handler(callback: types.CallbackQuery):
    user_id = str(callback.from_user.id)  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å—Ç—Ä–æ–∫—É, —Ç–∞–∫ –∫–∞–∫ –≤ JSON –∫–ª—é—á–∏ —Å—Ç—Ä–æ–∫–∏

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
    try:
        with open(CHARACTER_DATA_FILE, 'r', encoding='utf-8') as f:
            character_data = json.load(f)
    except FileNotFoundError:
        await callback.answer("–û—à–∏–±–∫–∞: —Ñ–∞–π–ª –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    except json.JSONDecodeError:
        await callback.answer("–û—à–∏–±–∫–∞: –ø–æ–≤—Ä–µ–∂–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞", show_alert=True)
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id not in character_data:
        await callback.answer("–£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞", show_alert=True)
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∫–∏—Ä–∫–∏ –≤ –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
    if not character_data[user_id].get('equipped_kyrka', False):
        await callback.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –∫–∏—Ä–∫–∏!", show_alert=True)
        return

    # –£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–î–æ–±—ã—Ç—å —Ä—É–¥—É"
    try:
        await callback.message.edit_reply_markup(reply_markup=None)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–Ω–æ–ø–∫–∏: {e}")

    # –î–æ–±—ã—á–∞ —Ä—É–¥—ã
    materials = list(mine_ores.keys())
    weights = [mine_ores[ore]["chance"] for ore in materials]
    chosen_ore = random.choices(materials, weights=weights, k=1)[0]
    mined_qty = random.randint(mine_ores[chosen_ore]["min"], mine_ores[chosen_ore]["max"])

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è –≤ character_data
    if "material_user" not in character_data[user_id]:
        character_data[user_id]["material_user"] = {}
    character_data[user_id]["material_user"][chosen_ore] = character_data[user_id]["material_user"].get(chosen_ore,
                                                                                                        0) + mined_qty

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    try:
        with open(CHARACTER_DATA_FILE, 'w', encoding='utf-8') as f:
            json.dump(character_data, f, ensure_ascii=False, indent=4)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
        return

    # –°–æ–æ–±—â–µ–Ω–∏–µ –æ –¥–æ–±—ã—á–µ
    ore_display_name = ore_names.get(chosen_ore, chosen_ore)
    await callback.message.answer(
        f"üåü –í—ã –¥–æ–±—ã–ª–∏ {mined_qty} {ore_display_name}!\n"
        f"–¢–µ–ø–µ—Ä—å —É –≤–∞—Å {character_data[user_id]['material_user'].get(chosen_ore, 0)} {ore_display_name} –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ."
    )

    # –ö–Ω–æ–ø–∫–∞ "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø—É—Ç—å"
    continue_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚û°Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø—É—Ç—å", callback_data="continue_path")]
    ])
    await callback.message.answer("–ö—É–¥–∞ –æ—Ç–ø—Ä–∞–≤–∏–º—Å—è –¥–∞–ª—å—à–µ?", reply_markup=continue_keyboard)
    await callback.answer()


# ======================================–†—É–¥–Ω–∏–∫====================================#


# ======================================–ê–ª—Ç–∞—Ä—å –∂–µ—Ä—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏====================================#
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã  "–ê–ª—Ç–∞—Ä—å –∂–µ—Ä—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏" /altar_of_sacrifice1
@dp.message(Command("altar_of_sacrifice1"))
async def altar_of_sacrifice(message: types.Message, bot: Bot):
    # 1. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –ê–ª—Ç–∞—Ä—è –ñ–µ—Ä—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏
    altar_photos = Photo_Diryk.get("–ê–ª—Ç–∞—Ä—å –ñ–µ—Ä—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏", {})

    if not altar_photos:
        await message.answer("–ê–ª—Ç–∞—Ä—å —Å–µ–≥–æ–¥–Ω—è –Ω–µ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∂–µ—Ä—Ç–≤—ã...")
        return

    random_photo_key = random.choice(list(altar_photos.keys()))
    photo_path = altar_photos[random_photo_key]

    try:
        if not os.path.exists(photo_path):
            raise FileNotFoundError

        photo = FSInputFile(photo_path)
        await message.answer_photo(photo, caption=f"ü©∏ {random_photo_key}")
    except FileNotFoundError:
        error_msg = (
            "ü©∏ –ê–ª—Ç–∞—Ä—å –≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–∫—Ä—ã—Ç...\n"
            f"(–§–æ—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ –ø—É—Ç–∏: {photo_path})"
        )
        await message.answer(error_msg)
        return

    # 2. –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_id = message.from_user.id
    hero_stats = user_data[user_id]['hero_stats']
    max_hp = hero_stats['hp_max']  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ HP
    current_hp = hero_stats.get('current_hp', max_hp)  # –¢–µ–∫—É—â–µ–µ HP –∏–ª–∏ max_hp –µ—Å–ª–∏ –Ω–µ –∑–∞–¥–∞–Ω–æ

    # 3. –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏—è
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text=sacrifice_options[1]["name"], callback_data="sacrifice_1"),
            InlineKeyboardButton(text=sacrifice_options[2]["name"], callback_data="sacrifice_2"),
            InlineKeyboardButton(text=sacrifice_options[3]["name"], callback_data="sacrifice_3")
        ],
        [InlineKeyboardButton(text="‚û°Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø—É—Ç—å", callback_data="continue_path")]
    ])

    await message.answer(
        "ü©∏ –ü–µ—Ä–µ–¥ –≤–∞–º–∏ –°–æ—Å—É–¥ –ñ–µ—Ä—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏. –ù–∞ —Å–∫–æ–ª—å–∫–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –µ–≥–æ –Ω–∞–ø–æ–ª–Ω–∏—Ç—å —Å–≤–æ–µ–π –∫—Ä–æ–≤—å—é?\n\n",
        reply_markup=keyboard
    )


@dp.callback_query(lambda c: c.data.startswith("sacrifice_"))
async def sacrifice_handler(callback: types.CallbackQuery):
    user_id = callback.from_user.id

    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≥–µ—Ä–æ—è
        hero_stats = user_data[user_id]['hero_stats']
        max_hp = hero_stats['hp_max']  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ HP
        current_hp = hero_stats['hp']  # –¢–µ–∫—É—â–µ–µ HP

        option = int(callback.data.split("_")[1])
        hp_cost = int(max_hp * sacrifice_options[option]["percent"] / 100)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∂–µ—Ä—Ç–≤—É–µ—Ç—Å—è –º–∏–Ω–∏–º—É–º 1 HP
        hp_cost = max(1, hp_cost)  # –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ –±—É–¥–µ—Ç –æ—Ç–Ω—è—Ç–æ —Ö–æ—Ç—è –±—ã 1 HP

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ HP
        if current_hp <= hp_cost:
            await callback.answer(
                f"‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ HP! –ù—É–∂–Ω–æ {hp_cost}, —É –≤–∞—Å {current_hp}",
                show_alert=True
            )
            return

        # –í—ã—á–∏—Ç–∞–µ–º HP (–æ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è, –∫–∞–∫ –≤ –ø—Ä–∏–º–µ—Ä–µ)
        hero_stats['hp'] = current_hp - hp_cost

        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–≥—Ä–∞–¥—É —Å –≤–µ—Å–æ–≤—ã–º–∏ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—è–º–∏
        reward_types = ["materials", "armor", "weapon"]
        weights = [0.6, 0.25, 0.15]  # 60% –º–∞—Ç–µ—Ä–∏–∞–ª—ã, 25% –±—Ä–æ–Ω—è, 15% –æ—Ä—É–∂–∏–µ
        reward_type = random.choices(reward_types, weights=weights, k=1)[0]
        reward_data = reward_the_Altar_of_Sacrifice[option]

        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        try:
            await callback.message.edit_text(
                f"ü©∏ –í—ã –≤—ã–±—Ä–∞–ª–∏: {sacrifice_options[option]['name']}\n"
                f"üíî –ü–æ—Ç–µ—Ä—è–Ω–æ HP: {hp_cost}\n",
                reply_markup=None
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            await callback.message.delete()

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–∞–≥—Ä–∞–¥—É
        reward_msg = ""
        if reward_type == "materials":
            materials = reward_data["materials"]
            for item, (min_q, max_q) in materials.items():
                qty = random.randint(min_q, max_q)
                user_data[user_id]["material_user"][item] = user_data[user_id]["material_user"].get(item, 0) + qty
                reward_msg += f"\nüì¶ {item.capitalize()}: +{qty}"

        elif reward_type in ["armor", "weapon"]:
            item_type = "BR" if reward_type == "armor" else "AR"
            items = reward_data[reward_type]
            item = random.choice(items)

            if item not in user_data[user_id][item_type]:
                # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –ø—Ä–µ–¥–º–µ—Ç
                stats = {
                    "hp": 10 * option,
                    "defense": 5 * option
                } if reward_type == "armor" else {
                    "attack": 5 * option,
                    "crit_chance": 0.05 * option
                }
                user_data[user_id][item_type][item] = stats
                reward_msg = f"\n{'üõ°Ô∏è' if reward_type == 'armor' else '‚öîÔ∏è'} –ü–æ–ª—É—á–µ–Ω–æ: {item}"
            else:
                # –£–ª—É—á—à–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø—Ä–µ–¥–º–µ—Ç
                for stat in user_data[user_id][item_type][item]:
                    user_data[user_id][item_type][item][stat] += 2 * option
                reward_msg = f"\n‚ú® –£–ª—É—á—à–µ–Ω–æ: {item} (+{2 * option} –∫ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º)"

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–∞–≥—Ä–∞–¥–æ–π
        continue_btn = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚û°Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø—É—Ç—å", callback_data="continue_path")]
        ])

        await callback.message.answer(
            f"üéÅ –ù–∞–≥—Ä–∞–¥–∞ ({reward_type}):{reward_msg}\n\n"
            f"‚ù§Ô∏è HP: {hero_stats['hp']}/{max_hp}\n"
            f"üí∞ –ó–æ–ª–æ—Ç–æ: {user_data[user_id].get('gold', 0)}\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞–ª—å–Ω–µ–π—à–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=continue_btn
        )
        save_data()
        await callback.answer()

    except KeyError as e:
        await callback.answer("–û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–∞", show_alert=True)
        print(f"KeyError in sacrifice_handler: {e}")
    except Exception as e:
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)
        print(f"Error in sacrifice_handler: {e}")


sacrifice_options = {
    1: {"name": "15%", "percent": 15},
    2: {"name": "35%", "percent": 35},
    3: {"name": "55%", "percent": 55}
}
reward_the_Altar_of_Sacrifice = {
    1: {  # 15% –∂–µ—Ä—Ç–≤–∞
        "materials": {
            "–¥–µ—Ä–µ–≤–æ": (5, 10),
            "–∫–æ–∂–∞": (3, 6),
            "–∫–∞–º–µ–Ω—å": (5, 8),
            "–∂–µ–ª–µ–∑–æ": (2, 4)
        },
        "armor": [
            "–ö–æ–∂–∞–Ω–∞—è –±—Ä–æ–Ω—è",
            "–ü–ª–∞—â –ª–µ–≥–∫–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞",
            "–û–¥–µ—è–Ω–∏–µ —É—á–µ–Ω–∏–∫–∞ –º–∞–≥–∞"
        ],

        "weapon": [
            "–î–µ—Ä–µ–≤—è–Ω–Ω—ã–π –º–µ—á",
            "–î–µ—Ä–µ–≤—è–Ω–Ω—ã–π –ø–æ—Å–æ—Ö",
            "–î–µ—Ä–µ–≤—è–Ω–Ω—ã–π –ª—É–∫",
            "–î–µ—Ä–µ–≤—è–Ω–Ω–æ–µ –∫–æ–ø—å–µ",
            "–î–µ—Ä–µ–≤—è–Ω–Ω—ã–π –¥–≤—É—Ä—É—á–Ω—ã–π –º–µ—á",

        ],
        "recipes_armor": [
            "–†–µ—Ü–µ–ø—Ç-–ö–æ–∂–∞–Ω–∞—è –±—Ä–æ–Ω—è",
            "–†–µ—Ü–µ–ø—Ç-–ü–ª–∞—â –ª–µ–≥–∫–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞",
            "–†–µ—Ü–µ–ø—Ç-–û–¥–µ—è–Ω–∏–µ —É—á–µ–Ω–∏–∫–∞ –º–∞–≥–∞"
        ],
        "recipes_weapon": [
            "–†–µ—Ü–µ–ø—Ç-–î–µ—Ä–µ–≤—è–Ω–Ω—ã–π –º–µ—á",
            "–†–µ—Ü–µ–ø—Ç-–î–µ—Ä–µ–≤—è–Ω–Ω—ã–π –ø–æ—Å–æ—Ö",
            "–†–µ—Ü–µ–ø—Ç-–î–µ—Ä–µ–≤—è–Ω–Ω—ã–π –ª—É–∫",
            "–†–µ—Ü–µ–ø—Ç-–î–µ—Ä–µ–≤—è–Ω–Ω–æ–µ –∫–æ–ø—å–µ",
            "–†–µ—Ü–µ–ø—Ç-–î–µ—Ä–µ–≤—è–Ω–Ω—ã–π –¥–≤—É—Ä—É—á–Ω—ã–π –º–µ—á"
        ],
        "messages": {
            "materials": "–ê–ª—Ç–∞—Ä—å –¥–∞—Ä–∏—Ç –≤–∞–º –æ—Å–Ω–æ–≤–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è —Ä–µ–º–µ—Å–ª–∞",
            "armor": "–ò–∑ –∫—Ä–æ–≤–∏ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è –ø—Ä–æ—Å—Ç–∞—è –∑–∞—â–∏—Ç–Ω–∞—è —ç–∫–∏–ø–∏—Ä–æ–≤–∫–∞",
            "weapon": "–í–∞—à–∞ –∂–µ—Ä—Ç–≤–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–∏–∑—É–µ—Ç—Å—è –≤ –ø—Ä–æ—Å—Ç–æ–µ –æ—Ä—É–∂–∏–µ",
            "recipe_armor": "–í –∫—Ä–æ–≤–∞–≤–æ–º —Ç—É–º–∞–Ω–µ –ø—Ä–æ—è–≤–ª—è—é—Ç—Å—è –∑–Ω–∞–Ω–∏—è –æ —Å–æ–∑–¥–∞–Ω–∏–∏ –±—Ä–æ–Ω–∏",
            "recipe_weapon": "–ö—Ä–æ–≤—å —Ä–∞—Å–∫—Ä—ã–≤–∞–µ—Ç —Å–µ–∫—Ä–µ—Ç—ã –∏–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è –æ—Ä—É–∂–∏—è"
        }
    },
    2: {  # 35% –∂–µ—Ä—Ç–≤–∞
        "materials": {
            "–∂–µ–ª–µ–∑–æ": (5, 8),
            "—Å—Ç–∞–ª—å": (2, 4),
            "–∫–æ–∂–∞": (5, 8),
            "–∞–ª–º–∞–∑": (1, 2),
            "–º–∏—Ñ—Ä–∏–ª": (1, 2)
        },
        "armor": [
            "–ñ–µ–ª–µ–∑–Ω–∞—è –∫–∏—Ä–∞—Å–∞",
            "–ñ–µ–ª–µ–∑–Ω—ã–µ –ª–∞—Ç—ã",
            "–ñ–µ–ª–µ–∑–Ω–∞—è –∫–æ–ª—å—á—É–≥–∞"
            "–ü–ª–∞—â –ª–µ–≥–∫–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞",
            "–û–¥–µ—è–Ω–∏–µ —Ü–∏–Ω—Ç–∞ –º–∞–≥–∞",
            "–ü–ª–∞—â –ª—É–Ω–Ω–æ–π –ø—ã–ª–∏"
            "–ü–ª–∞—â –ª—É–Ω–Ω–æ–≥–æ —Å–≤–µ—Ç–∞",
            "–û–¥–µ—è–Ω–∏–µ –≤–µ—Ç—Ä–∞",
            "–û–¥–µ—è–Ω–∏–µ –ª–µ–¥—è–Ω–æ–≥–æ –≤–∑–¥–æ—Ö–∞",
        ],
        "weapon": [
            "–ñ–µ–ª–µ–∑–Ω–∞—è –ø–∞–ª–∏—Ü–∞",
            "–ñ–µ–ª–µ–∑–Ω—ã–π –∫–∏–Ω–∂–∞–ª",
            "–ñ–µ–ª–µ–∑–Ω—ã–π –∞—Ä–±–∞–ª–µ—Ç"
            "–ñ–µ–ª–µ–∑–Ω—ã–π –ª—É–∫",
            "–ñ–µ–ª–µ–∑–Ω—ã–π –ø–∞–ª–∞—à",
            "–ñ–µ–ª–µ–∑–Ω—ã–π –ø–æ—Å–æ—Ö"
            "–ñ–µ–ª–µ–∑–Ω–∞—è –±—É–ª–∞–≤–∞",
            "–ñ–µ–ª–µ–∑–Ω—ã–π –±–æ–µ–≤–æ–π –º–æ–ª–æ—Ç",
            "–ñ–µ–ª–µ–∑–Ω—ã–π –¥–≤—É—Ä—É—á–Ω—ã–π –º–µ—á"
            "–ñ–µ–ª–µ–∑–Ω—ã–π —Ç–æ–ø–æ—Ä",
            "–ñ–µ–ª–µ–∑–Ω–æ–µ –∫–æ–ø—å–µ",
            "–ñ–µ–ª–µ–∑–Ω–∞—è –±—É–ª–∞–≤–∞"
            "–ñ–µ–ª–µ–∑–Ω—ã–π –º–µ—á",
            "–ñ–µ–ª–µ–∑–Ω–∞—è —Å–∞–±–ª—è",

        ],
        "recipes_armor": [
            "–†–µ—Ü–µ–ø—Ç-–ñ–µ–ª–µ–∑–Ω–∞—è –∫–∏—Ä–∞—Å–∞",
            "–†–µ—Ü–µ–ø—Ç-–ñ–µ–ª–µ–∑–Ω—ã–µ –ª–∞—Ç—ã",
            "–†–µ—Ü–µ–ø—Ç-–ñ–µ–ª–µ–∑–Ω–∞—è –∫–æ–ª—å—á—É–≥–∞"
            "–†–µ—Ü–µ–ø—Ç-–ü–ª–∞—â –ª–µ–≥–∫–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞",
            "–†–µ—Ü–µ–ø—Ç-–û–¥–µ—è–Ω–∏–µ —Ü–∏–Ω—Ç–∞ –º–∞–≥–∞",
            "–†–µ—Ü–µ–ø—Ç-–ü–ª–∞—â –ª—É–Ω–Ω–æ–π –ø—ã–ª–∏"
            "–†–µ—Ü–µ–ø—Ç-–ü–ª–∞—â –ª—É–Ω–Ω–æ–≥–æ —Å–≤–µ—Ç–∞",
            "–†–µ—Ü–µ–ø—Ç-–û–¥–µ—è–Ω–∏–µ –≤–µ—Ç—Ä–∞",
            "–†–µ—Ü–µ–ø—Ç-–û–¥–µ—è–Ω–∏–µ –ª–µ–¥—è–Ω–æ–≥–æ –≤–∑–¥–æ—Ö–∞",
        ],
        "recipes_weapon": [
            "–†–µ—Ü–µ–ø—Ç-–ñ–µ–ª–µ–∑–Ω–∞—è –ø–∞–ª–∏—Ü–∞",
            "–†–µ—Ü–µ–ø—Ç-–ñ–µ–ª–µ–∑–Ω—ã–π –∫–∏–Ω–∂–∞–ª",
            "–†–µ—Ü–µ–ø—Ç-–ñ–µ–ª–µ–∑–Ω—ã–π –∞—Ä–±–∞–ª–µ—Ç"
            "–†–µ—Ü–µ–ø—Ç-–ñ–µ–ª–µ–∑–Ω—ã–π –ª—É–∫",
            "–†–µ—Ü–µ–ø—Ç-–ñ–µ–ª–µ–∑–Ω—ã–π –ø–∞–ª–∞—à",
            "–†–µ—Ü–µ–ø—Ç-–ñ–µ–ª–µ–∑–Ω—ã–π –ø–æ—Å–æ—Ö"
            "–†–µ—Ü–µ–ø—Ç-–ñ–µ–ª–µ–∑–Ω–∞—è –±—É–ª–∞–≤–∞",
            "–†–µ—Ü–µ–ø—Ç-–ñ–µ–ª–µ–∑–Ω—ã–π –±–æ–µ–≤–æ–π –º–æ–ª–æ—Ç",
            "–†–µ—Ü–µ–ø—Ç-–ñ–µ–ª–µ–∑–Ω—ã–π –¥–≤—É—Ä—É—á–Ω—ã–π –º–µ—á"
            "–†–µ—Ü–µ–ø—Ç-–ñ–µ–ª–µ–∑–Ω—ã–π —Ç–æ–ø–æ—Ä",
            "–†–µ—Ü–µ–ø—Ç-–ñ–µ–ª–µ–∑–Ω–æ–µ –∫–æ–ø—å–µ",
            "–†–µ—Ü–µ–ø—Ç-–ñ–µ–ª–µ–∑–Ω–∞—è –±—É–ª–∞–≤–∞"
            "–†–µ—Ü–µ–ø—Ç-–ñ–µ–ª–µ–∑–Ω—ã–π –º–µ—á",
            "–†–µ—Ü–µ–ø—Ç-–ñ–µ–ª–µ–∑–Ω–∞—è —Å–∞–±–ª—è",
        ],
        "messages": {
            "materials": "–ê–ª—Ç–∞—Ä—å —â–µ–¥—Ä–æ –æ–¥–∞—Ä–∏–≤–∞–µ—Ç –≤–∞—Å —Ü–µ–Ω–Ω—ã–º–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º–∏",
            "armor": "–í–∞—à–∞ –∫—Ä–æ–≤—å –∫—Ä–∏—Å—Ç–∞–ª–ª–∏–∑—É–µ—Ç—Å—è –≤ –ø—Ä–æ—á–Ω—É—é –±—Ä–æ–Ω—é",
            "weapon": "–ò–∑ –∫—Ä–æ–≤–∞–≤–æ–≥–æ —Ç—É–º–∞–Ω–∞ –≤–æ–∑–Ω–∏–∫–∞–µ—Ç –æ—Ä—É–∂–∏–µ –∏–∑ –∂–µ–ª–µ–∑–∞",
            "recipe_armor": "–ñ–µ—Ä—Ç–≤–µ–Ω–Ω–∞—è –∫—Ä–æ–≤—å –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç —Ç–∞–π–Ω—ã –∫–æ–≤–∫–∏ –¥–æ—Å–ø–µ—Ö–æ–≤",
            "recipe_weapon": "–í—Å–ø–ª–µ—Å–∫ –∫—Ä–æ–≤–∏ –¥–∞—ë—Ç –ø–æ–Ω–∏–º–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ä—É–∂–∏—è"
        }
    },
    3: {  # 55% –∂–µ—Ä—Ç–≤–∞
        "materials": {
            "–∂–µ–ª–µ–∑–æ": (1, 10),
            "–∞–ª–º–∞–∑": (1, 4),
            "—Å—Ç–∞–ª—å": (1, 7),
            "—Ç–µ–Ω–µ–≤–æ–π —à–µ–ª–∫": (1, 7),
            "–º–∏—Ñ—Ä–∏–ª": (1, 9),
            "—Ç–∫–∞–Ω—å –∑–∞–±—ã—Ç—ã—Ö": (1, 5),
            "–ø–µ–ø–µ–ª —Ñ–µ–Ω–∏–∫—Å–∞": (1, 5),
            "—Ç–µ–Ω–µ–≤–æ–π —Å–∞–≤–∞–Ω": (1, 6),
            "–∏—Å–∫—Ä–∞ –¥—É—à–∏": (1, 4),
        },
        "armor": [
            "–û–¥–µ—è–Ω–∏–µ —Å—Ç–∞—Ä–æ–≥–æ –º–∞–≥–∞",
            "–ë–ª–∞—Ö–∞–Ω —Ü–∏–Ω—Ç–∞",
            "–ú–∞–Ω—Ç–∏—è –≥—Ä–æ–∑–æ–≤–æ–≥–æ —à—ë–ø–æ—Ç–∞",
            "–ú–∞–Ω—Ç–∏—è –ø—ã–ª–∞—é—â–µ–π –º–∞–≥–º—ã"
        ],
        "weapon": [
            "–°—Ç–∞–ª—å–Ω–∞—è –∫–∞—Ç–∞–Ω–∞",
            "–°—Ç–∞–ª—å–Ω–æ–µ –∫–æ–ø—å–µ",
            "–°—Ç–∞–ª—å–Ω–æ–π –∞—Ä–±–∞–ª–µ—Ç",
            "–°—Ç–∞–ª—å–Ω–æ–π –±–æ–µ–≤–æ–π –º–æ–ª–æ—Ç",
            "–°—Ç–∞–ª—å–Ω–æ–π –¥–≤—É—Ä—É—á–Ω—ã–π –º–µ—á",
            "–°—Ç–∞–ª—å–Ω–æ–π –∫–∏–Ω–∂–∞–ª",
            "–°—Ç–∞–ª—å–Ω–æ–π –º–µ—á",

        ],
        "recipes_armor": [
            "–†–µ—Ü–µ–ø—Ç-–ú–∏—Ñ—Ä–∏–ª–æ–≤—ã–π –¥–æ—Å–ø–µ—Ö",
            "–†–µ—Ü–µ–ø—Ç-–û–¥–µ—è–Ω–∏–µ —Å—Ç–∞—Ä–æ–≥–æ –º–∞–≥–∞",
            "–†–µ—Ü–µ–ø—Ç-–ë–ª–∞—Ö–∞–Ω —Ü–∏–Ω—Ç–∞",
            "–†–µ—Ü–µ–ø—Ç-–ú–∞–Ω—Ç–∏—è –≥—Ä–æ–∑–æ–≤–æ–≥–æ —à—ë–ø–æ—Ç–∞",
            "–†–µ—Ü–µ–ø—Ç-–ú–∞–Ω—Ç–∏—è –ø—ã–ª–∞—é—â–µ–π –º–∞–≥–º—ã"
        ],
        "recipes_weapon": [
            "–†–µ—Ü–µ–ø—Ç-–°—Ç–∞–ª—å–Ω–∞—è –∫–∞—Ç–∞–Ω–∞",
            "–†–µ—Ü–µ–ø—Ç-–°—Ç–∞–ª—å–Ω–æ–µ –∫–æ–ø—å–µ",
            "–†–µ—Ü–µ–ø—Ç-–°—Ç–∞–ª—å–Ω–æ–π –∞—Ä–±–∞–ª–µ—Ç",
            "–†–µ—Ü–µ–ø—Ç-–°—Ç–∞–ª—å–Ω–æ–π –±–æ–µ–≤–æ–π –º–æ–ª–æ—Ç",
            "–†–µ—Ü–µ–ø—Ç-–°—Ç–∞–ª—å–Ω–æ–π –¥–≤—É—Ä—É—á–Ω—ã–π –º–µ—á",
            "–†–µ—Ü–µ–ø—Ç-–°—Ç–∞–ª—å–Ω–æ–π –∫–∏–Ω–∂–∞–ª",
            "–†–µ—Ü–µ–ø—Ç-–°—Ç–∞–ª—å–Ω–æ–π –º–µ—á",
            "–†–µ—Ü–µ–ø—Ç-–ú–∏—Ñ—Ä–∏–ª–æ–≤—ã–π –ø–æ—Å–æ—Ö",
            "–†–µ—Ü–µ–ø—Ç-–ú–∏—Ñ—Ä–∏–ª–æ–≤—ã–π –º–µ—á",
            "–†–µ—Ü–µ–ø—Ç-–ú–∏—Ñ—Ä–∏–ª–æ–≤—ã–π –ª—É–∫",
            "–†–µ—Ü–µ–ø—Ç-–ú–∏—Ñ—Ä–∏–ª–æ–≤—ã–π –∫–∏–Ω–∂–∞–ª",
            "–†–µ—Ü–µ–ø—Ç-–ú–∏—Ñ—Ä–∏–ª–æ–≤–∞—è –Ω–∞–≥–∏–Ω–∞—Ç–∞",
        ],
        "messages": {
            "materials": "–ê–ª—Ç–∞—Ä—å –ø—Ä–µ–ø–æ–¥–Ω–æ—Å–∏—Ç –≤–∞–º —Ä–µ–¥—á–∞–π—à–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã",
            "armor": "–í–µ–ª–∏–∫–∞—è –∂–µ—Ä—Ç–≤–∞ —Ä–æ–∂–¥–∞–µ—Ç –ª–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–µ –¥–æ—Å–ø–µ—Ö–∏",
            "weapon": "–ò–∑ –∫—Ä–æ–≤–∞–≤–æ–≥–æ –≤–∏—Ö—Ä—è –ø–æ—è–≤–ª—è–µ—Ç—Å—è –æ—Ä—É–∂–∏–µ –Ω–µ–≤–µ—Ä–æ—è—Ç–Ω–æ–π –º–æ—â–∏",
            "recipe_armor": "–ö—Ä–æ–≤—å –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –¥—Ä–µ–≤–Ω–∏–µ –∑–Ω–∞–Ω–∏—è –æ –º–∏—Ñ—Ä–∏–ª–æ–≤–æ–π –±—Ä–æ–Ω–µ",
            "recipe_weapon": "–ñ–µ—Ä—Ç–≤–∞ –ø—Ä–æ–±—É–∂–¥–∞–µ—Ç –∑–∞–±—ã—Ç—ã–µ —Ç–µ—Ö–Ω–∏–∫–∏ –∫–æ–≤–∫–∏"
        }
    }
}


# ======================================–ê–ª—Ç–∞—Ä—å –∂–µ—Ä—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏====================================#


# ======================================–ë–æ—Å—Å====================================#
#   /encounter_boss1
def get_boss_stats_lab(boss_stats):
    return [
        ("üëπ –ë–æ—Å—Å", ""),
        ("‚ù§Ô∏è HP", f"{boss_stats['hp']}/{boss_stats['max_hp']}"),
        ("üîÆ –ú–∞–Ω–∞", f"{boss_stats.get('mana', 0)}"),
        ("üó°Ô∏è –ê—Ç–∞–∫–∞", f"{boss_stats['attack']}"),
        ("üõ°Ô∏è –ó–∞—â–∏—Ç–∞", f"{boss_stats['defense']}"),
        ("üéØ –®–∞–Ω—Å.–ö—Ä–∏—Ç", f"{boss_stats['crit_chance'] * 100:.1f}%"),
        ("üí• –ö—Ä–∏—Ç.–£—Ä–æ–Ω", f"{boss_stats['crit_damage']}x")
    ]


def get_player_stats_lab(user_stats):
    return [
        ("üßç –ü–µ—Ä—Å–æ–Ω–∞–∂", ""),
        ("‚ù§Ô∏è HP", f"{user_stats['hp']}/{user_stats['hp_max']}"),
        ("üîÆ –ú–∞–Ω–∞", f"{user_stats['mana']}"),
        ("üó°Ô∏è –ê—Ç–∞–∫–∞", f"{user_stats['attack']}"),
        ("üõ°Ô∏è –ó–∞—â–∏—Ç–∞", f"{user_stats['defense']}"),
        ("üéØ –ö—Ä–∏—Ç", f"{user_stats['crit_chance'] * 100:.1f}%"),
        ("üí• –ö—Ä–∏—Ç.–£—Ä–æ–Ω", f"{user_stats['crit_damage']}x")
    ]


BOSS_ESCAPE_DAMAGE_PERCENT = 0.5  # 50% —É—Ä–æ–Ω–∞ –ø—Ä–∏ –ø–æ–±–µ–≥–µ
bosses = {
    "–°–∫–µ–ª–µ—Ç –õ–µ–π—Ç–µ–Ω–∞–Ω—Ç": {
        'hp': 800,
        'max_hp': 800,
        "mana": 200,
        'attack': 15,
        'defense': 3,
        'crit_chance': 0.99,
        'crit_damage': 2.5,
        'special': "–ö–æ—Å—Ç—è–Ω–æ–π —â–∏—Ç (–±–ª–æ–∫–∏—Ä—É–µ—Ç 30% —É—Ä–æ–Ω–∞)",
        "chance_special": 90,
    },
    "–ê—Ä—Ö–∏–ª–∏—á": {
        'hp': 600,
        'max_hp': 600,
        "mana": 600,
        'attack': 25,
        'defense': 1,
        'crit_chance': 0.99,
        'crit_damage': 1.5,
        'special': "–û–≥–Ω–µ–Ω–Ω—ã–π —à–∞—Ä (–¥–≤–æ–π–Ω–æ–π —É—Ä–æ–Ω)",
        "chance_special": 90,
    },
    "–í–∞–º–ø–∏—Ä": {
        'hp': 1200,
        'max_hp': 12000,
        "mana": 150,
        'attack': 20,
        'defense': 5,
        'crit_chance': 0.99,
        'crit_damage': 1.5,
        'special': "–ö—Ä–æ–≤–æ–ø—É—Å–∫–∞–Ω–∏–µ (–≤–æ—Ä—É–µ—Ç 10% HP)",
        "chance_special": 90,
    },
    "–ú—É—Ä–ª–∞": {
        'hp': 500,
        'max_hp': 5000,
        "mana": 100,
        'attack': 30,
        'defense': 0,
        'crit_chance': 0.99,
        'crit_damage': 1.5,
        'special': "–Ø–¥–æ–≤–∏—Ç—ã–π –∫–ª–∏–Ω–æ–∫ (—É—Ä–æ–Ω –Ω–∞ 3 —Ö–æ–¥–∞)",
        "chance_special": 90,
    }
}
BOSS_SPECIAL_SKILLS = {
    "–°–∫–µ–ª–µ—Ç –õ–µ–π—Ç–µ–Ω–∞–Ω—Ç": {
        'name': "–®–∏–ø–∞—Å—Ç–∞—è –±—Ä–æ–Ω—è",
        'description': "–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç 30% –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ —É—Ä–æ–Ω–∞",
        'mana_cost': 50,
        'effect': lambda boss, user: {
            'message': f"ü¶¥ {boss['name']} –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –®–∏–ø–∞—Å—Ç—É—é –±—Ä–æ–Ω—é! (-50 –º–∞–Ω—ã)",
            'thorns': 0.3,  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º 30% —É—Ä–æ–Ω–∞
            'duration': 2
        }
    },
    "–ê—Ä—Ö–∏–ª–∏—á": {
        'name': "–û–≥–Ω–µ–Ω–Ω—ã–π —à–∞—Ä",
        'description': "–ú–≥–Ω–æ–≤–µ–Ω–Ω–æ –Ω–∞–Ω–æ—Å–∏—Ç —É—Ä–æ–Ω, –∑–∞–≤–∏—Å—è—â–∏–π –æ—Ç –±—Ä–æ—Å–∫–∞ –∫—É–±–∏–∫–∞ (1-5)",
        'mana_cost': 300,
        'effect': lambda boss, user: {
            'message': f"üî• {boss['name']} –±—Ä–æ—Å–∞–µ—Ç –û–≥–Ω–µ–Ω–Ω—ã–π —à–∞—Ä! (-300 –º–∞–Ω—ã)",
            'instant_damage': boss['attack'] * (random.randint(1, 5))  # –£—Ä–æ–Ω –æ—Ç 1x –¥–æ 20x –∞—Ç–∞–∫–∏
        }
    },
    "–í–∞–º–ø–∏—Ä": {
        'name': "–ö—Ä–æ–≤–æ–ø—É—Å–∫–∞–Ω–∏–µ",
        'description': "–í–æ—Ä—É–µ—Ç 1% HP –∏–≥—Ä–æ–∫–∞",
        'mana_cost': 75,
        'effect': lambda boss, user: {
            'message': f"üíâ {boss['name']} –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ö—Ä–æ–≤–æ–ø—É—Å–∫–∞–Ω–∏–µ! (-75 –º–∞–Ω—ã)",
            'hp_steal': user['hp'] * 0.01,
            'heal': boss['attack'] * 2.5
        }
    },
    "–ú—É—Ä–ª–∞": {
        'name': "–Ø–¥–æ–≤–∏—Ç—ã–π –∫–ª–∏–Ω–æ–∫",
        'description': "–ù–∞–Ω–æ—Å–∏—Ç —É—Ä–æ–Ω –Ω–∞ 3 —Ö–æ–¥–∞",
        'mana_cost': 60,
        'effect': lambda boss, user: {
            'message': f"‚ò†Ô∏è {boss['name']} –æ—Ç—Ä–∞–≤–ª—è–µ—Ç –≤–∞—Å! (-60 –º–∞–Ω—ã)",
            'poison_damage': boss['attack'] * 0.5,
            'duration': 3
        }
    }
}
# –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å –ø—É—Ç—è–º–∏ –∫ —Ñ–æ—Ç–æ –±–æ—Å—Å–æ–≤
one_photo_boss_enemy = {
    "boss": {
        "boss1": "Photo/KingDang/LabDiryk/Boss_Diryk/one.jpg"
    }
}

awards_boss_lab = {
    'gold': lambda: random.randint(200, 500),
    'materials': {
        '—Å—Ç–∞–ª—å': lambda: random.randint(3, 5),
        '–∂–µ–ª–µ–∑–æ': lambda: random.randint(3, 5),
        '–∫–æ–∂–∞': lambda: random.randint(3, 5),
        '–∫–æ—Å—Ç—è–Ω–∞—è —Å—Ç–∞–ª—å': lambda: random.randint(3, 5),
        '—Ñ–∞–Ω—Ç–æ–º–Ω—ã–π —à–µ–ª–∫': lambda: random.randint(3, 5),
        '—Ç–µ–Ω–µ–≤–æ–π —Å–∞–≤–∞–Ω': lambda: random.randint(3, 5)
    }
}


async def give_boss_rewards(chat_id):
    try:
        if chat_id not in user_data:
            user_data[chat_id] = {
                'gold': 0,
                'material_user': defaultdict(int),
                'hero_stats': {},
                # –¥—Ä—É–≥–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–æ–ª—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            }

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–∞–≥—Ä–∞–¥—ã
        rewards = {
            'gold': awards_boss_lab['gold']() if callable(awards_boss_lab['gold']) else awards_boss_lab['gold']
        }
        # –í—ã–±–∏—Ä–∞–µ–º 2 —Å–ª—É—á–∞–π–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–∞
        materials = random.sample(list(awards_boss_lab['materials'].keys()), 2)
        for material in materials:
            reward_func = awards_boss_lab['materials'][material]
            rewards[material] = reward_func() if callable(reward_func) else reward_func

        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–≥—Ä–∞–¥—ã –∏–≥—Ä–æ–∫—É
        user_data[chat_id]['gold'] = user_data[chat_id].get('gold', 0) + rewards['gold']

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º material_user –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        if 'material_user' not in user_data[chat_id]:
            user_data[chat_id]['material_user'] = defaultdict(int)

        # –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª—ã
        for material in materials:
            user_data[chat_id]['material_user'][material] += rewards[material]

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        save_data()

        return rewards

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ give_boss_rewards: {e}")
        return {}


@dp.message(Command("encounter_boss1"))
async def encounter_boss(message: types.Message, bot: Bot):
    chat_id = message.chat.id
    boss_name = "boss1"  # –ò–º—è –±–æ—Å—Å–∞ –¥–ª—è —ç—Ç–æ–≥–æ —ç–≤–µ–Ω—Ç–∞

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if chat_id not in user_data:
            await message.answer("–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∏–≥—Ä—É —Å–Ω–∞—á–∞–ª–∞.")
            return

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
        user_stats = user_data[chat_id].setdefault('hero_stats', {
            'hp': 10,
            'hp_max': 10,
            'attack': 1,
            'defense': 0
        })

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∂–∏–≤ –ª–∏ –∏–≥—Ä–æ–∫
        if user_stats['hp'] <= 0:
            await message.answer("–í–∞—à –≥–µ—Ä–æ–π –º–µ—Ä—Ç–≤! –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–¥–æ—Ä–æ–≤—å–µ.")
            return

        # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ –±–æ—Å—Å–∞
        try:
            photo_path = one_photo_boss_enemy["boss"][boss_name]
            photo = FSInputFile(photo_path)

            await bot.send_photo(
                chat_id=chat_id,
                photo=photo,
                caption="–í—ã –≤—Å—Ç—Ä–µ—Ç–∏–ª–∏ –≥—Ä–æ–∑–Ω–æ–≥–æ –±–æ—Å—Å–∞! –ß—Ç–æ –±—É–¥–µ—Ç–µ –¥–µ–ª–∞—Ç—å?",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚öîÔ∏è –ê—Ç–∞–∫–æ–≤–∞—Ç—å", callback_data="attack_boss_lab"),
                     InlineKeyboardButton(text="üèÉ –°–±–µ–∂–∞—Ç—å", callback_data="flee_from_boss_lab")]
                ])
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ –±–æ—Å—Å–∞: {e}")
            # –§–æ–ª–±—ç–∫ –Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await message.answer(
                "–í—ã –≤—Å—Ç—Ä–µ—Ç–∏–ª–∏ –≥—Ä–æ–∑–Ω–æ–≥–æ –±–æ—Å—Å–∞! –ß—Ç–æ –±—É–¥–µ—Ç–µ –¥–µ–ª–∞—Ç—å?",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚öîÔ∏è –ê—Ç–∞–∫–æ–≤–∞—Ç—å", callback_data="attack_boss_lab"),
                     InlineKeyboardButton(text="üèÉ –°–±–µ–∂–∞—Ç—å", callback_data="flee_from_boss_lab")]
                ])
            )

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ encounter_boss: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Å—Ç—Ä–µ—á–µ —Å –±–æ—Å—Å–æ–º.")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–±–µ–≥–∞ –æ—Ç –±–æ—Å—Å–∞
@dp.callback_query(lambda c: c.data == "flee_from_boss_lab")
async def flee_from_boss_handler(callback: types.CallbackQuery, bot: Bot):
    chat_id = callback.message.chat.id
    user_stats = user_data[chat_id]['hero_stats']

    # –ù–∞–Ω–æ—Å–∏–º 50% —É—Ä–æ–Ω–∞ –æ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ HP
    damage = int(user_stats['hp_max'] * BOSS_ESCAPE_DAMAGE_PERCENT)
    user_stats['hp'] = max(1, user_stats['hp'] - damage)

    if user_stats['hp'] > 1:
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å
        continue_btn = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚û°Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø—É—Ç—å", callback_data="continue_path")]
        ])

        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await callback.message.edit_caption(
            caption=f"–í—ã –ø–æ–ø—ã—Ç–∞–ª–∏—Å—å —Å–±–µ–∂–∞—Ç—å! \n–í–∞–º –Ω–∞–Ω–µ—Å–µ–Ω–æ {damage} —É—Ä–æ–Ω–∞ü©∏.\n"
                    f"–û—Å—Ç–∞–ª–æ—Å—å HP: {user_stats['hp']}/{user_stats['hp_max']}",
            reply_markup=continue_btn
        )
    else:
        # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã—Ö–æ–¥–∞ –∏–∑ –ª–∞–±–∏—Ä–∏–Ω—Ç–∞
        exit_btn = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üö™ –í—ã–π—Ç–∏ –∏–∑ –ª–∞–±–∏—Ä–∏–Ω—Ç–∞", callback_data="exit_maze")]
        ])

        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await callback.message.edit_caption(
            caption=f"–í—ã –ø–æ–ø—ã—Ç–∞–ª–∏—Å—å —Å–±–µ–∂–∞—Ç—å! –í–∞–º –Ω–∞–Ω–µ—Å–µ–Ω–æ {damage} —É—Ä–æ–Ω–∞.\n"
                    "–í—ã –µ–¥–≤–∞ –∂–∏–≤—ã –∏ –¥–æ–ª–∂–Ω—ã –ø–æ–∫–∏–Ω—É—Ç—å –ª–∞–±–∏—Ä–∏–Ω—Ç.",
            reply_markup=exit_btn
        )

    await callback.answer()
    save_data()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞—Ç–∞–∫–∏ –Ω–∞ –±–æ—Å—Å–∞
@dp.callback_query(lambda c: c.data == "attack_boss_lab")
async def attack_boss_handler(callback: types.CallbackQuery, bot: Bot):
    chat_id = callback.message.chat.id
    player_stats = user_data[chat_id]['hero_stats']
    boss_name = random.choice(list(bosses.keys()))
    boss_stats = copy.deepcopy(bosses[boss_name])

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –ø—É—Ç—å –∫ —Ñ–æ—Ç–æ, –∞ –Ω–µ –æ–±—ä–µ–∫—Ç FSInputFile
    photo_path = Photo_Diryk["–ë–æ—Å—Å"][boss_name]
    user_data[chat_id]['current_boss'] = {
        'name': boss_name,
        'stats': boss_stats,
        'photo_path': photo_path  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –ø—É—Ç—å –∫–∞–∫ —Å—Ç—Ä–æ–∫—É
    }

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ –≤–∏–¥–µ —Ç–∞–±–ª–∏—Ü—ã —Å HTML —Ç–µ–≥–∞–º–∏
    stats_table = format_stats_table(boss_stats, player_stats)

    try:
        media = InputMediaPhoto(
            media=FSInputFile(photo_path),
            caption=(
                f"‚öîÔ∏è –í—ã –≤—Å—Ç—É–ø–∏–ª–∏ –≤ –±–æ–π —Å {boss_name}!\n\n"
                f"<pre>{stats_table}</pre>\n\n"
                f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
            ),
            parse_mode="HTML"
        )

        await bot.edit_message_media(
            chat_id=chat_id,
            message_id=callback.message.message_id,
            media=media,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üó°Ô∏è –ê—Ç–∞–∫–∞", callback_data="boss_attack_lab")],
                # InlineKeyboardButton(text="üîÆ –£–º–µ–Ω–∏—è", callback_data="player_boss_skills_handler_lab")]
            ])
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ –±–æ—Å—Å–∞: {e}")
        await callback.message.edit_text(
            text=(
                f"‚öîÔ∏è –í—ã –≤—Å—Ç—É–ø–∏–ª–∏ –≤ –±–æ–π —Å {boss_name}!\n\n"
                f"<pre>{stats_table}</pre>\n\n"
                f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
            ),
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üó°Ô∏è –ê—Ç–∞–∫–∞", callback_data="boss_attack_lab")],
                # InlineKeyboardButton(text="üîÆ –£–º–µ–Ω–∏—è", callback_data="player_boss_skills_handler_lab")]
            ]),
            parse_mode="HTML"
        )
    finally:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
        try:
            save_data()
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")

    await callback.answer()


@dp.callback_query(lambda c: c.data == "boss_back_lab")
async def boss_back_handler(callback: types.CallbackQuery, bot: Bot):
    chat_id = callback.message.chat.id
    message_id = callback.message.message_id

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –±–æ—Å—Å–∞
    if chat_id not in user_data or 'current_boss' not in user_data[chat_id]:
        await callback.answer("–ë–æ–π –Ω–µ –Ω–∞–π–¥–µ–Ω!", show_alert=True)
        return

    try:
        user_stats = user_data[chat_id]['hero_stats']
        boss_data = user_data[chat_id]['current_boss']
        boss_name = boss_data['name']
        boss_stats = boss_data['stats']

        # –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ —Ñ–æ—Ç–æ (–µ—Å–ª–∏ –æ–Ω —Ö—Ä–∞–Ω–∏—Ç—Å—è –∫–∞–∫ FSInputFile, –∏–∑–≤–ª–µ–∫–∞–µ–º –ø—É—Ç—å)
        photo_path = boss_data['photo'].path if isinstance(boss_data['photo'], FSInputFile) else boss_data['photo']

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ –≤–∏–¥–µ —Ç–∞–±–ª–∏—Ü—ã —Å HTML —Ç–µ–≥–∞–º–∏
        stats_table = format_stats_table(boss_stats, user_stats)

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å HTML —Ä–∞–∑–º–µ—Ç–∫–æ–π
        caption = (
            f"‚öîÔ∏è –í—ã –≤—Å—Ç—É–ø–∏–ª–∏ –≤ –±–æ–π —Å {boss_name}!\n\n"
            f"<pre>{stats_table}</pre>\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        )

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üó°Ô∏è –ê—Ç–∞–∫–∞", callback_data="boss_attack_lab")],
            # InlineKeyboardButton(text="üîÆ –£–º–µ–Ω–∏—è", callback_data="player_boss_skills_handler_lab")
        ])

        # –í–∞—Ä–∏–∞–Ω—Ç 1: –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –º–µ–¥–∏–∞
        try:
            await bot.edit_message_media(
                chat_id=chat_id,
                message_id=message_id,
                media=InputMediaPhoto(
                    media=FSInputFile(photo_path),
                    caption=caption,
                    parse_mode="HTML"  # –î–æ–±–∞–≤–ª—è–µ–º HTML –ø–∞—Ä—Å–∏–Ω–≥
                ),
                reply_markup=keyboard
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–µ–¥–∏–∞: {e}")
            # –í–∞—Ä–∏–∞–Ω—Ç 2: –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
            try:
                await bot.delete_message(chat_id=chat_id, message_id=message_id)
                await bot.send_photo(
                    chat_id=chat_id,
                    photo=FSInputFile(photo_path),
                    caption=caption,
                    reply_markup=keyboard,
                    parse_mode="HTML"  # –î–æ–±–∞–≤–ª—è–µ–º HTML –ø–∞—Ä—Å–∏–Ω–≥
                )
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ–≥–æ —Ñ–æ—Ç–æ: {e}")
                # –í–∞—Ä–∏–∞–Ω—Ç 3: Fallback –Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                await bot.send_message(
                    chat_id=chat_id,
                    text=caption,
                    reply_markup=keyboard,
                    parse_mode="HTML"  # –î–æ–±–∞–≤–ª—è–µ–º HTML –ø–∞—Ä—Å–∏–Ω–≥
                )

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ boss_back_handler: {e}")
        await callback.answer("‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –≤ –º–µ–Ω—é –±–æ—è!", show_alert=True)
    finally:
        await callback.answer()


@dp.callback_query(lambda c: c.data == "boss_attack_lab")
async def player_attack_handler(callback: types.CallbackQuery, bot: Bot):
    chat_id = callback.message.chat.id
    user_stats = user_data[chat_id]['hero_stats']
    boss_data = user_data[chat_id]['current_boss']
    boss_name = boss_data['name']
    boss_stats = boss_data['stats']

    try:
        battle_log = []

        # 1. –ê—Ç–∞–∫–∞ –∏–≥—Ä–æ–∫–∞
        base_damage = user_stats['attack']
        is_crit = random.random() < user_stats['crit_chance']
        crit_multiplier = user_stats['crit_damage'] if is_crit else 1.0
        total_damage = base_damage * crit_multiplier
        armor_reduction = boss_stats['defense']
        final_damage = max(0, math.ceil(total_damage - armor_reduction))

        crit_text = f" (üí•–ö—Ä–∏—Ç x{crit_multiplier:.1f})" if is_crit else ""
        damage_details = f"{math.ceil(base_damage)}{crit_text} ‚Üí {final_damage} —É—Ä–æ–Ω–∞"

        if boss_stats['defense'] > 0:
            damage_details += f"\nüî∞ –ë—Ä–æ–Ω—è {boss_name} –ø–æ–≥–ª–æ—Ç–∏–ª–∞ {armor_reduction} —É—Ä–æ–Ω–∞"
        if final_damage == 0:
            damage_details = "üî∞ –ë—Ä–æ–Ω—è –ø–æ–ª–Ω–æ—Å—Ç—å—é –±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∞ —É—Ä–æ–Ω!"

        old_boss_hp = boss_stats['hp']
        boss_stats['hp'] = max(0, boss_stats['hp'] - final_damage)

        battle_log.append(
            f"üó°Ô∏è –ò–≥—Ä–æ–∫ –∞—Ç–∞–∫—É–µ—Ç: {damage_details}\n"
            f"{boss_name}: {old_boss_hp}/{boss_stats['max_hp']} ‚ù§Ô∏è ‚Üí "
            f"{boss_stats['hp']}/{boss_stats['max_hp']} ‚ù§Ô∏è"
        )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É–±–∏—Ç –ª–∏ –±–æ—Å—Å
        if boss_stats['hp'] <= 0:
            battle_log.append(f"\nüéâ –í—ã –ø–æ–±–µ–¥–∏–ª–∏ {boss_name}!")
            rewards = await give_boss_rewards(chat_id)

            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞–≥—Ä–∞–¥–∞—Ö –≤ –ª–æ–≥
            if rewards:
                reward_text = "\nüèÜ –ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã:\n"
                reward_text += f"üí∞ –ó–æ–ª–æ—Ç–æ: +{rewards['gold']}\n"
                for material, amount in [(k, v) for k, v in rewards.items() if k != 'gold']:
                    reward_text += f"{material}: +{amount}\n"
                battle_log.append(reward_text)

            await update_battle_message_lab(callback, bot, battle_log, is_boss_defeated=True)
            return

        # 2. –ê—Ç–∞–∫–∞ –±–æ—Å—Å–∞
        base_damage = boss_stats['attack']
        is_crit = random.random() < boss_stats['crit_chance']
        crit_multiplier = boss_stats['crit_damage'] if is_crit else 1.0
        total_damage = base_damage * crit_multiplier
        armor_reduction = user_stats['defense']
        final_damage = max(0, math.ceil(total_damage - armor_reduction))

        crit_text = f" (üí•–ö—Ä–∏—Ç x{crit_multiplier:.1f})" if is_crit else ""
        damage_details = f"{math.ceil(base_damage)}{crit_text} ‚Üí {final_damage} —É—Ä–æ–Ω–∞"

        if user_stats['defense'] > 0:
            damage_details += f"\nüõ°Ô∏è –í–∞—à–∞ –±—Ä–æ–Ω—è –ø–æ–≥–ª–æ—Ç–∏–ª–∞ {armor_reduction} —É—Ä–æ–Ω–∞"
        if final_damage == 0:
            damage_details = "üõ°Ô∏è –í–∞—à–∞ –±—Ä–æ–Ω—è –ø–æ–ª–Ω–æ—Å—Ç—å—é –±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∞ —É—Ä–æ–Ω!"

        old_player_hp = user_stats['hp']
        user_stats['hp'] = max(0, user_stats['hp'] - final_damage)

        battle_log.append(
            f"\nüëπ {boss_name} –∞—Ç–∞–∫—É–µ—Ç: {damage_details}\n"
            f"–ò–≥—Ä–æ–∫: {old_player_hp}/{user_stats['hp_max']} ‚ù§Ô∏è ‚Üí "
            f"{user_stats['hp']}/{user_stats['hp_max']} ‚ù§Ô∏è"
        )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É–±–∏—Ç –ª–∏ –∏–≥—Ä–æ–∫
        if user_stats['hp'] <= 0:
            await update_battle_message_lab(callback, bot, battle_log, is_player_defeated=True)
            return

        await update_battle_message_lab(callback, bot, battle_log)

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ player_attack_handler: {e}")
        await callback.answer("‚ö† –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ —Ö–æ–¥–µ –±–æ—è!", show_alert=True)


@dp.callback_query(F.data.startswith("use_skill_lab:"))
async def execute_skill_handler_dang(callback: types.CallbackQuery, bot: Bot):
    try:
        chat_id = callback.message.chat.id
        user_id = callback.from_user.id

        if chat_id not in user_data or 'current_boss' not in user_data[chat_id]:
            await callback.answer("–ë–æ–π –Ω–µ –Ω–∞–π–¥–µ–Ω!", show_alert=True)
            return

        user_info = user_data[chat_id]
        hero_stats = user_info['hero_stats']
        boss_data = user_info['current_boss']
        boss_name = boss_data['name']
        boss_stats = boss_data['stats']
        skill_name = callback.data.split(":")[1]

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —É–º–µ–Ω–∏—è
        special_skills = hero_stats.get('special_skills', {})
        skill_data = special_skills.get(skill_name)

        if not skill_data:
            await callback.answer(f"–£–º–µ–Ω–∏–µ '{skill_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!", show_alert=True)
            return

        if hero_stats['mana'] < skill_data['cost']:
            await callback.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–∞–Ω—ã!", show_alert=True)
            return

        # –ü—Ä–∏–º–µ–Ω—è–µ–º —É–º–µ–Ω–∏–µ
        if isinstance(skill_data['effect'], str):
            effect = eval(skill_data['effect'])
        else:
            effect = skill_data['effect']

        damage = effect(hero_stats)
        defense_reduction = boss_stats['defense'] // 2
        final_damage = max(1, damage - defense_reduction)

        # –õ–æ–≥ –∞—Ç–∞–∫–∏ –∏–≥—Ä–æ–∫–∞
        battle_log = [{
            'type': 'player_attack',
            'skill_name': skill_name,
            'damage': final_damage,
            'boss_name': boss_name,
            'boss_hp_before': boss_stats['hp'],
            'boss_hp_after': boss_stats['hp'] - final_damage
        }]

        boss_stats['hp'] -= final_damage
        hero_stats['mana'] -= skill_data['cost']

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–±–µ–¥—É
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–±–µ–¥—É
        if boss_stats['hp'] <= 0:
            boss_stats['hp'] = 0
            battle_log.append(f"üéâ {boss_name} –ø–æ–≤–µ—Ä–∂–µ–Ω!")
            rewards = await give_boss_rewards(chat_id)

            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞–≥—Ä–∞–¥–∞—Ö –≤ –ª–æ–≥
            if rewards:
                reward_text = "\nüèÜ –ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã:\n"
                reward_text += f"üí∞ –ó–æ–ª–æ—Ç–æ: +{rewards['gold']}\n"
                for material, amount in [(k, v) for k, v in rewards.items() if k != 'gold']:
                    reward_text += f"{material}: +{amount}\n"
                battle_log.append(reward_text)

            is_boss_defeated = True
            del user_data[chat_id]['current_boss']
        else:
            is_boss_defeated = False
            # –ë–æ—Å—Å –∞—Ç–∞–∫—É–µ—Ç –≤ –æ—Ç–≤–µ—Ç
            base_damage = boss_stats['attack']
            is_crit = random.random() < boss_stats['crit_chance']
            crit_multiplier = boss_stats['crit_damage'] if is_crit else 1.0
            defense_reduction = hero_stats['defense'] // 2
            final_damage = max(1, (base_damage * crit_multiplier) - defense_reduction)

            battle_log.append({
                'type': 'boss_attack',
                'boss_name': boss_name,
                'base_damage': base_damage,
                'is_crit': is_crit,
                'crit_multiplier': crit_multiplier,
                'defense_reduction': defense_reduction,
                'final_damage': final_damage,
                'player_hp_before': hero_stats['hp'],
                'player_hp_after': hero_stats['hp'] - final_damage
            })

            hero_stats['hp'] -= final_damage

            if hero_stats['hp'] <= 0:
                hero_stats['hp'] = 0
                battle_log.append("üíÄ –í—ã –ø–æ–≥–∏–±–ª–∏...")
                is_player_defeated = True
            else:
                is_player_defeated = False

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—è
        await update_battle_message_lab(
            callback=callback,
            bot=bot,
            battle_log=battle_log,
            is_boss_defeated=is_boss_defeated,
            is_player_defeated=is_player_defeated
        )

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ execute_skill_handler_dang: {str(e)}")
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ —É–º–µ–Ω–∏—è!", show_alert=True)
    finally:
        await callback.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–µ–Ω—é —É–º–µ–Ω–∏–π –≤ –±–æ—é —Å –±–æ—Å—Å–æ–º
@dp.callback_query(lambda c: c.data == "player_boss_skills_handler_lab")
async def player_boss_skills_handler_lab(callback: types.CallbackQuery, bot: Bot):
    chat_id = callback.message.chat.id

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –±–æ—Å—Å–∞
    if chat_id not in user_data or 'current_boss' not in user_data[chat_id]:
        await callback.answer("–ë–æ–π –Ω–µ –Ω–∞–π–¥–µ–Ω!", show_alert=True)
        return

    try:
        user_stats = user_data[chat_id]['hero_stats']
        boss_stats = user_data[chat_id]['current_boss']['stats']

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É–º–µ–Ω–∏–π, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        if 'special_skills' not in user_stats or not user_stats['special_skills']:
            user_stats['special_skills'] = {
                "–ö–∞–º–µ–Ω—å-–û–≥–Ω–µ–Ω–Ω—ã–π –≤–∑—Ä—ã–≤": {
                    "description": "üî• –ú–æ—â–Ω—ã–π –≤–∑—Ä—ã–≤ –æ–≥–Ω—è, –Ω–∞–Ω–æ—Å—è—â–∏–π —É—Ä–æ–Ω —Ä–∞–≤–Ω—ã–π (intelligence * 3) + (attack * 2)",
                    "cost": 30,
                    "effect": lambda stats: (stats['intelligence'] * 3) + (stats['attack'] * 2)
                },
                # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–∏–µ —É–º–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            }

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —É–º–µ–Ω–∏–π
        available_skills = []
        message_text = "üîÆ <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ —É–º–µ–Ω–∏—è:</b>\n\n"

        for skill_name, skill_data in user_stats['special_skills'].items():
            if user_stats['mana'] >= skill_data['cost']:
                available_skills.append(
                    [InlineKeyboardButton(
                        text=f"{skill_name} (üîÆ{skill_data['cost']} –º–∞–Ω—ã)",
                        callback_data=f"use_skill_lab:{skill_name}"
                    )]
                )
                message_text += f"<b>{skill_name}</b>\n{skill_data['description']}\n\n"
            else:
                message_text += f"<s>{skill_name}</s> (–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–∞–Ω—ã: {skill_data['cost']})\n\n"

        # –ï—Å–ª–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —É–º–µ–Ω–∏–π
        if not available_skills:
            await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —É–º–µ–Ω–∏–π –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–∞–Ω—ã!", show_alert=True)
            return

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
        available_skills.append(
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="boss_back_lab")]
        )

        # –ü—ã—Ç–∞–µ–º—Å—è –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
        try:
            await callback.message.edit_text(
                text=message_text,
                parse_mode="HTML",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=available_skills)
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            # Fallback - —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
            await callback.message.delete()
            await bot.send_message(
                chat_id=chat_id,
                text=message_text,
                parse_mode="HTML",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=available_skills)
            )

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ player_boss_skills_handler_lab: {e}")
        await callback.answer("‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –º–µ–Ω—é —É–º–µ–Ω–∏–π!", show_alert=True)

    await callback.answer()


async def handle_boss_special_skill_lab(boss_name, boss_stats, user_stats):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–≥–æ –Ω–∞–≤—ã–∫–∞ –±–æ—Å—Å–∞"""
    if boss_name not in BOSS_SPECIAL_SKILLS:
        return {'message': f"{boss_name} –Ω–µ –∏–º–µ–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–≥–æ –Ω–∞–≤—ã–∫–∞!"}

    skill = BOSS_SPECIAL_SKILLS[boss_name]

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –º–∞–Ω—ã
    if boss_stats.get('mana', 0) < skill['mana_cost']:
        return {
            'message': f"üåÄ {boss_name} –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –º–∞–Ω—ã –¥–ª—è {skill['name']}!",
            'failed': True
        }

    # –†–∞—Å—Ö–æ–¥ –º–∞–Ω—ã
    boss_stats['mana'] -= skill['mana_cost']

    effect = skill['effect']({'name': boss_name, **boss_stats}, user_stats)
    result = {
        'message': effect.get('message', ""),
        'damage_multiplier': effect.get('damage_multiplier', 1.0),
        'damage_reduction': effect.get('damage_reduction', 0.0)
    }

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
    if 'hp_steal' in effect:  # –í–∞–º–ø–∏—Ä
        steal_amount = min(effect['hp_steal'], user_stats['hp'] - 1)
        user_stats['hp'] -= steal_amount
        boss_stats['hp'] = min(boss_stats['hp'] + effect['heal'], boss_stats['max_hp'])
        result['message'] += f"\nüíî –£–∫—Ä–∞–¥–µ–Ω–æ {int(steal_amount)} HP | +{int(effect['heal'])} HP –±–æ—Å—Å—É"

    if 'poison_damage' in effect:  # –ú—É—Ä–ª–∞
        if 'poison' not in user_stats:
            user_stats['poison'] = {
                'damage': effect['poison_damage'],
                'turns': effect['duration']
            }
            result[
                'message'] += f"\n‚ò†Ô∏è –Ø–¥ –Ω–∞–Ω–æ—Å–∏—Ç {int(effect['poison_damage'])} —É—Ä–æ–Ω–∞ –∑–∞ —Ö–æ–¥ ({effect['duration']} —Ö–æ–¥–∞)"

    if 'instant_damage' in effect:  # –ê—Ä—Ö–∏–ª–∏—á
        damage = math.ceil(effect['instant_damage'])
        user_stats['hp'] = max(0, user_stats['hp'] - damage)
        result['message'] += f"\nüí• –ù–∞–Ω–æ—Å–∏—Ç {damage} —É—Ä–æ–Ω–∞!"
        result['damage'] = damage

    if 'thorns' in effect:  # –°–∫–µ–ª–µ—Ç
        if 'thorns' not in boss_stats:
            boss_stats['thorns'] = effect['thorns']
            boss_stats['thorns_turns'] = effect.get('duration', 2)
            result[
                'message'] += f"\nü¶æ –ë—Ä–æ–Ω—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç {int(effect['thorns'] * 100)}% —É—Ä–æ–Ω–∞ ({boss_stats['thorns_turns']} —Ö–æ–¥–∞)"

    return result


def format_stats_table(boss_stats, user_stats):
    # –î–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã
    stats = [
        ("üëπ –ë–æ—Å—Å", "", "üßç –ü–µ—Ä—Å–æ–Ω–∞–∂"),
        ("‚ù§Ô∏è HP", f" {boss_stats['hp']}/{boss_stats['max_hp']}", f"  {user_stats['hp']}/{user_stats['hp_max']}"),
        ("üîÆ –ú–∞–Ω–∞", f"{boss_stats.get('mana', 0)}", f" {user_stats['mana']}"),
        ("üó°Ô∏è –ê—Ç–∞–∫–∞", f" {boss_stats['attack']}", f"  {user_stats['attack']}"),
        ("üõ°Ô∏è –ó–∞—â–∏—Ç–∞", f" {boss_stats['defense']}", f"  {user_stats['defense']}"),
        ("üéØ –ö—Ä–∏—Ç", f"{boss_stats['crit_chance'] * 100:.1f}%", f" {user_stats['crit_chance'] * 100:.1f}%"),
        ("üí• –£—Ä–æ–Ω", f"{boss_stats['crit_damage']}x", f" {user_stats['crit_damage']}x")
    ]

    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —à–∏—Ä–∏–Ω—É —Å—Ç–æ–ª–±—Ü–æ–≤
    col1_width = max(len(row[0]) for row in stats) + 2  # +2 –¥–ª—è –æ—Ç—Å—Ç—É–ø–æ–≤
    col2_width = max(len(row[1]) for row in stats) + 2
    col3_width = max(len(row[2]) for row in stats) + 2

    # –°—Ç—Ä–æ–∏–º —Ç–∞–±–ª–∏—Ü—É —Å –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ–º –ø–æ –ª–µ–≤–æ–º—É –∫—Ä–∞—é
    table = []
    for row in stats:
        line = (
                row[0].ljust(col1_width) +
                row[1].ljust(col2_width) +
                row[2].ljust(col3_width))
        table.append(line)

    return "\n".join(table)


async def update_battle_message_lab(callback: types.CallbackQuery, bot: Bot, battle_log: list,
                                    is_boss_defeated: bool = False, is_player_defeated: bool = False):
    chat_id = callback.message.chat.id
    user_stats = user_data[chat_id]['hero_stats']
    boss_data = user_data[chat_id]['current_boss']
    boss_stats = boss_data['stats']
    boss_photo_path = boss_data.get('photo_path')  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—É—Ç—å –≤–º–µ—Å—Ç–æ –æ–±—ä–µ–∫—Ç–∞ —Ñ–æ—Ç–æ

    try:
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        message_text = f"‚öîÔ∏è <b>–•–æ–¥ –±–æ—è</b> ‚öîÔ∏è\n\n"

        # –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥ –±–æ—è —Å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç—è–º–∏
        for log_entry in battle_log:
            if isinstance(log_entry, dict):  # –ü–æ–¥—Ä–æ–±–Ω—ã–π –ª–æ–≥ —É–¥–∞—Ä–∞
                if log_entry['type'] == 'player_attack':
                    message_text += (
                        f"üîÆ –í—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ {log_entry['skill_name']}!\n"
                        f"üí• –ù–∞–Ω–µ—Å–µ–Ω–æ {log_entry['damage']} —É—Ä–æ–Ω–∞!\n"
                        f"{log_entry['boss_name']}: {log_entry['boss_hp_before']:.1f}/"
                        f"{boss_stats['max_hp']} ‚ù§Ô∏è ‚Üí {log_entry['boss_hp_after']:.1f}/"
                        f"{boss_stats['max_hp']} ‚ù§Ô∏è\n\n"
                    )
                elif log_entry['type'] == 'boss_attack':
                    message_text += (
                        f"üëπ {log_entry['boss_name']} –∞—Ç–∞–∫—É–µ—Ç: {log_entry['base_damage']:.1f} "
                        f"{'(üí•–ö—Ä–∏—Ç x' + str(log_entry['crit_multiplier']) + ')' if log_entry['is_crit'] else ''}"
                        f" ‚Üí {log_entry['final_damage']:.1f} —É—Ä–æ–Ω–∞\n"
                        f"üõ°Ô∏è –í–∞—à–∞ –±—Ä–æ–Ω—è –ø–æ–≥–ª–æ—Ç–∏–ª–∞ {log_entry['defense_reduction']:.1f} —É—Ä–æ–Ω–∞\n"
                        f"–ò–≥—Ä–æ–∫: {log_entry['player_hp_before']:.1f}/{user_stats['hp_max']} ‚ù§Ô∏è ‚Üí "
                        f"{log_entry['player_hp_after']:.1f}/{user_stats['hp_max']} ‚ù§Ô∏è\n\n"
                    )
            else:  # –ü—Ä–æ—Å—Ç—ã–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                message_text += f"{log_entry}\n\n"

        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        message_text += "<pre>" + format_stats_table(boss_stats, user_stats) + "</pre>\n\n"

        # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
        if is_boss_defeated:
            message_text += "üéâ <b>–ü–æ–±–µ–¥–∞!</b> –í—ã –ø–æ–±–µ–¥–∏–ª–∏ –±–æ—Å—Å–∞!"
            markup = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚û°Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø—É—Ç—å", callback_data="continue_path")]
            ])
        elif is_player_defeated:
            message_text += "üíÄ <b>–ü–æ—Ä–∞–∂–µ–Ω–∏–µ!</b> –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏!"
            markup = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üö™ –í—ã–π—Ç–∏ –∏–∑ –ª–∞–±–∏—Ä–∏–Ω—Ç–∞", callback_data="exit_maze")]
            ])
        else:
            message_text += "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
            markup = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üó°Ô∏è –ê—Ç–∞–∫–∞", callback_data="boss_attack_lab")],
                # InlineKeyboardButton(text="üîÆ –£–º–µ–Ω–∏—è", callback_data="player_boss_skills_handler_lab")]
            ])

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        if boss_photo_path and hasattr(callback.message, 'photo'):
            try:
                await bot.edit_message_media(
                    chat_id=chat_id,
                    message_id=callback.message.message_id,
                    media=InputMediaPhoto(
                        media=FSInputFile(boss_photo_path),  # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Ñ–æ—Ç–æ –∏–∑ –ø—É—Ç–∏
                        caption=message_text,
                        parse_mode="HTML"
                    ),
                    reply_markup=markup
                )
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –º–µ–¥–∏–∞: {e}")
                await edit_as_text(callback, bot, chat_id, message_text, markup)
        else:
            await edit_as_text(callback, bot, chat_id, message_text, markup)

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ update_battle_message_lab: {e}")
        await callback.answer("‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –±–æ—è!", show_alert=True)


async def edit_as_text(callback: types.CallbackQuery, bot: Bot, chat_id: int, message_text: str,
                       markup: InlineKeyboardMarkup):
    """–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∫ —Ç–µ–∫—Å—Ç–∞"""
    try:
        await callback.message.edit_text(
            text=message_text,
            reply_markup=markup,
            parse_mode="HTML"
        )
    except:
        try:
            await callback.message.delete()
        except:
            pass
        await bot.send_message(
            chat_id=chat_id,
            text=message_text,
            parse_mode="HTML",
            reply_markup=markup
        )


# ======================================–ó–∞–±—Ä–æ—à–µ–Ω–Ω–∞—è –ö–∞–∑–∞—Ä–º–∞===============================–±–∞—Ä–∞–∫==–ë–∞—Ä–∞–∫===#
# /Abandoned_barracks1
@dp.message(Command("Abandoned_barracks1"))
async def enter_abandoned_barracks(message: types.Message, bot: Bot):
    # 1. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –ê–ª—Ç–∞—Ä—è –ñ–µ—Ä—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏
    abandoned_barracks = Photo_Diryk.get("–ó–∞–±—Ä–æ—à–µ–Ω–Ω–∞—è –ö–∞–∑–∞—Ä–º–∞", {})

    if not abandoned_barracks:
        await message.answer("–ó–∞–±—Ä–æ—à–µ–Ω–Ω–∞—è –ö–∞–∑–∞—Ä–º–∞ –±—ã–ª–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–∑—Ä—É—à–µ–Ω–∞...")
        return

    random_photo_key = random.choice(list(abandoned_barracks.keys()))
    photo_path = abandoned_barracks[random_photo_key]

    try:
        if not os.path.exists(photo_path):
            raise FileNotFoundError

        photo = FSInputFile(photo_path)
        await message.answer_photo(photo, caption=f"üèöÔ∏è {random_photo_key}")
    except FileNotFoundError:
        error_msg = (
            "–ó–∞–±—Ä–æ—à–µ–Ω–Ω–∞—è –ö–∞–∑–∞—Ä–º–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–∫—Ä—ã—Ç...\n"
            f"(–§–æ—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ –ø—É—Ç–∏: {photo_path})"
        )
        await message.answer(error_msg)
        return

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–®–∞–Ω—Å—ã", callback_data="barracks_chances"),
         InlineKeyboardButton(text="üîç –ò—Å–∫–∞—Ç—å —Å–Ω–∞—Ä—è–∂–µ–Ω–∏–µ", callback_data="barracks_search")]
    ])

    await message.answer("–í—ã –≤ –ó–∞–±—Ä–æ—à–µ–Ω–Ω–æ–π –ö–∞–∑–∞—Ä–º–µ. –ß—Ç–æ –±—É–¥–µ—Ç–µ –¥–µ–ª–∞—Ç—å?", reply_markup=markup)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "üîç –ò—Å–∫–∞—Ç—å —Å–Ω–∞—Ä—è–∂–µ–Ω–∏–µ"
@dp.callback_query(lambda callback_query: callback_query.data == "barracks_search")
async def handle_barracks_search(call: types.CallbackQuery):
    user_id = call.from_user.id
    chat_id = call.message.chat.id

    # –£–¥–∞–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω—É—é –∫–Ω–æ–ø–∫—É
    await call.message.edit_reply_markup(reply_markup=None)

    # –ë—Ä–æ—Å–∞–µ–º –∫—É–±–∏–∫ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —É—Å–ø–µ—Ö–∞ –ø–æ–∏—Å–∫–∞
    await call.message.answer("–û—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç–µ –∫–∞–∑–∞—Ä–º—É...")
    dice_message = await bot.send_dice(chat_id, emoji='üé≤')
    dice_value = dice_message.dice.value
    await asyncio.sleep(4)  # –ñ–¥–µ–º 4 —Å–µ–∫—É–Ω–¥—ã –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏ –∫—É–±–∏–∫–∞

    # –®–∞–Ω—Å—ã –Ω–∞–π—Ç–∏ –ø—Ä–µ–¥–º–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∫—É–±–∏–∫–∞
    find_chance = {
        1: 20,  # 20% —à–∞–Ω—Å
        2: 30,
        3: 40,
        4: 50,
        5: 70,
        6: 90  # 90% —à–∞–Ω—Å
    }.get(dice_value, 0)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—à–ª–∏ –ª–∏ –ø—Ä–µ–¥–º–µ—Ç
    found_something = random.randint(1, 100) <= find_chance

    if not found_something:
        await call.message.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–ª–∏ –≤ —ç—Ç–∏—Ö —Ä–∞–∑–≤–∞–ª–∏–Ω–∞—Ö.")
    else:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞
        if dice_value <= 4:
            # –î–µ—Ä–µ–≤—è–Ω–Ω–æ–µ –æ—Ä—É–∂–∏–µ –∏–ª–∏ –ª–µ–≥–∫–∞—è –±—Ä–æ–Ω—è (–µ—Å–ª–∏ –∫—É–±–∏–∫ 1-4)
            category = random.choice(["weapon", "armor"])
            item_type = "wood" if category == "weapon" else "light"
        else:
            # –ñ–µ–ª–µ–∑–Ω–æ–µ –æ—Ä—É–∂–∏–µ –∏–ª–∏ —Ç—è–∂–µ–ª–∞—è –±—Ä–æ–Ω—è (–µ—Å–ª–∏ –∫—É–±–∏–∫ 5-6)
            category = random.choice(["weapon", "armor"])
            item_type = "iron" if category == "weapon" else "heavy"

        # –í—ã–±–∏—Ä–∞–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        if category == "weapon":
            if item_type == "wood":
                item_name = random.choice([
                    "–î–µ—Ä–µ–≤—è–Ω–Ω—ã–π –º–µ—á", "–î–µ—Ä–µ–≤—è–Ω–Ω–æ–µ –∫–æ–ø—å–µ", "–î–µ—Ä–µ–≤—è–Ω–Ω–æ–µ –ø–æ—Å–æ—Ö",
                    "–î–µ—Ä–µ–≤—è–Ω–Ω—ã–π –¥–≤—É—Ä—É—á–Ω—ã–π –º–µ—á", "–î–µ—Ä–µ–≤—è–Ω–Ω—ã–π –ª—É–∫"
                ])
            else:  # iron
                item_name = random.choice([
                    "–ñ–µ–ª–µ–∑–Ω—ã–π –º–µ—á", "–ñ–µ–ª–µ–∑–Ω—ã–π —Ç–æ–ø–æ—Ä", "–ñ–µ–ª–µ–∑–Ω—ã–π –∫–æ–ø—å–µ",
                    "–ñ–µ–ª–µ–∑–Ω—ã–π –ø–æ—Å–æ—Ö", "–ñ–µ–ª–µ–∑–Ω—ã–π –¥–≤—É—Ä—É—á–Ω—ã–π –º–µ—á", "–ñ–µ–ª–µ–∑–Ω—ã–π –ª—É–∫"
                ])
        else:  # armor
            if item_type == "light":
                item_name = random.choice([
                    "–ü–ª–∞—â –ª–µ–≥–∫–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞", "–û–¥–µ—è–Ω–∏–µ —É—á–µ–Ω–∏–∫–∞ –º–∞–≥–∞",
                    "–ö–æ–∂–∞–Ω–∞—è –±—Ä–æ–Ω—è", "–ü–ª–∞—â –ª—É–Ω–Ω–æ–≥–æ —Å–≤–µ—Ç–∞"
                ])
            else:  # heavy
                item_name = random.choice([
                    "–ñ–µ–ª–µ–∑–Ω–∞—è –∫–∏—Ä–∞—Å–∞", "–ñ–µ–ª–µ–∑–Ω—ã–µ –ª–∞—Ç—ã", "–ñ–µ–ª–µ–∑–Ω–∞—è –∫–æ–ª—å—á—É–≥–∞"
                ])

        # –ü–æ–ª—É—á–∞–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –ø—Ä–µ–¥–º–µ—Ç–∞ –∏–∑ –±–∞–∑—ã
        try:
            if category == "weapon":
                item_stats = Abandoned_barracks["weapon"][item_name]
            else:
                item_stats = Abandoned_barracks["armor"][item_name]
        except KeyError:
            await call.message.answer("–û—à–∏–±–∫–∞: –ø—Ä–µ–¥–º–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Å–∏–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞—Ö –ø—Ä–µ–¥–º–µ—Ç–∞
        stats_message = (
            f"üéâ –í—ã –Ω–∞—à–ª–∏: <b>{item_name}</b>!\n\n"
            "üìä –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –ø—Ä–µ–¥–º–µ—Ç–∞:\n"
            f"‚öîÔ∏è–ê—Ç–∞–∫–∞: {item_stats.get('attack', 0)}\n"
            f"üõ°Ô∏è–ó–∞—â–∏—Ç–∞: {item_stats.get('defense', 0)}\n"
            f"‚ù§Ô∏è–ó–¥–æ—Ä–æ–≤—å–µ: {item_stats.get('hp', 0)}\n"
            f"üîÆ–ú–∞–Ω–∞: {item_stats.get('mana', 0)}\n"
            f"üí™–°–∏–ª–∞: {item_stats.get('strength', 0)}\n"
            f"üèπ–õ–æ–≤–∫–æ—Å—Ç—å: {item_stats.get('agility', 0)}\n"
            f"üìö–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç: {item_stats.get('intelligence', 0)}\n"
            f"üéØ–®–∞–Ω—Å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ —É–¥–∞—Ä–∞: {item_stats.get('crit_chance', 0) * 100:.1f}%\n"
            f"üí•–£—Ä–æ–Ω –æ—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ —É–¥–∞—Ä–∞: {item_stats.get('crit_damage', 0) * 100:.1f}%\n"
        )

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        if user_id not in user_data:
            user_data[user_id] = {
                'BR': {},  # –ë—Ä–æ–Ω—è
                'AR': {}  # –û—Ä—É–∂–∏–µ
            }

        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥–º–µ—Ç –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å
        if category == "weapon":
            if item_name not in user_data[user_id]['AR']:
                user_data[user_id]['AR'][item_name] = item_stats
                added_message = f"üî™ –û—Ä—É–∂–∏–µ <b>{item_name}</b> –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –≤–∞—à –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å!"
            else:
                await call.message.answer(f"‚ö†Ô∏è –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å <b>{item_name}</b>, –ø–æ—ç—Ç–æ–º—É –≤—ã –æ—Å—Ç–∞–≤–ª—è–µ—Ç–µ –µ–≥–æ.")
                return
        else:  # armor
            if item_name not in user_data[user_id]['BR']:
                user_data[user_id]['BR'][item_name] = item_stats
                added_message = f"üõ°Ô∏è –ë—Ä–æ–Ω—è <b>{item_name}</b> –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –≤–∞—à –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å!"
            else:
                await call.message.answer(f"‚ö†Ô∏è –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å <b>{item_name}</b>, –ø–æ—ç—Ç–æ–º—É –≤—ã –æ—Å—Ç–∞–≤–ª—è–µ—Ç–µ –µ–≥–æ.")
                return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
        save_data()
        await call.message.answer(stats_message, parse_mode='HTML')
        await call.message.answer(added_message, parse_mode='HTML')

    # –ö–Ω–æ–ø–∫–∞ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è
    continue_btn = InlineKeyboardButton(text="‚û°Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø—É—Ç—å", callback_data="continue_path")
    markup = InlineKeyboardMarkup(inline_keyboard=[[continue_btn]])
    await call.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–®–∞–Ω—Å—ã" –≤ –ö–∞–∑–∞—Ä–º–µ
@dp.callback_query(lambda callback_query: callback_query.data == "barracks_chances")
async def show_barracks_chances(call: types.CallbackQuery):
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —à–∞–Ω—Å–∞—Ö —Å —ç–º–æ–¥–∑–∏
    chances_message = (
        "üè∞ <b>–®–∞–Ω—Å—ã –Ω–∞ –Ω–∞—Ö–æ–¥–∫—É –≤ –ö–∞–∑–∞—Ä–º–µ:</b>\n\n"
        "üé≤ <b>–ï—Å–ª–∏ –≤—ã–ø–∞–¥–µ—Ç —á–∏—Å–ª–æ 1:</b>\n"
        "‚ñ´Ô∏è –ù–∏—á–µ–≥–æ: <b>80%</b>\n"
        "‚ñ´Ô∏è –û—Ä—É–∂–∏–µ: <b>15%</b>\n"
        "‚ñ´Ô∏è –ë—Ä–æ–Ω—è: <b>5%</b>\n\n"
        "üé≤ <b>–ï—Å–ª–∏ –≤—ã–ø–∞–¥–µ—Ç —á–∏—Å–ª–æ 2:</b>\n"
        "‚ñ´Ô∏è –ù–∏—á–µ–≥–æ: <b>70%</b>\n"
        "‚ñ´Ô∏è –û—Ä—É–∂–∏–µ: <b>20%</b>\n"
        "‚ñ´Ô∏è –ë—Ä–æ–Ω—è: <b>10%</b>\n\n"
        "üé≤ <b>–ï—Å–ª–∏ –≤—ã–ø–∞–¥–µ—Ç —á–∏—Å–ª–æ 3:</b>\n"
        "‚ñ´Ô∏è –ù–∏—á–µ–≥–æ: <b>60%</b>\n"
        "‚ñ´Ô∏è –û—Ä—É–∂–∏–µ: <b>25%</b>\n"
        "‚ñ´Ô∏è –ë—Ä–æ–Ω—è: <b>15%</b>\n\n"
        "üé≤ <b>–ï—Å–ª–∏ –≤—ã–ø–∞–¥–µ—Ç —á–∏—Å–ª–æ 4:</b>\n"
        "‚ñ´Ô∏è –ù–∏—á–µ–≥–æ: <b>50%</b>\n"
        "‚ñ´Ô∏è –û—Ä—É–∂–∏–µ: <b>30%</b>\n"
        "‚ñ´Ô∏è –ë—Ä–æ–Ω—è: <b>20%</b>\n\n"
        "üé≤ <b>–ï—Å–ª–∏ –≤—ã–ø–∞–¥–µ—Ç —á–∏—Å–ª–æ 5:</b>\n"
        "‚ñ´Ô∏è –ù–∏—á–µ–≥–æ: <b>40%</b>\n"
        "‚ñ´Ô∏è –û—Ä—É–∂–∏–µ: <b>35%</b>\n"
        "‚ñ´Ô∏è –ë—Ä–æ–Ω—è: <b>25%</b>\n\n"
        "üé≤ <b>–ï—Å–ª–∏ –≤—ã–ø–∞–¥–µ—Ç —á–∏—Å–ª–æ 6:</b>\n"
        "‚ñ´Ô∏è –ù–∏—á–µ–≥–æ: <b>30%</b>\n"
        "‚ñ´Ô∏è –û—Ä—É–∂–∏–µ: <b>40%</b>\n"
        "‚ñ´Ô∏è –ë—Ä–æ–Ω—è: <b>30%</b>"
    )

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥" —Å —ç–º–æ–¥–∑–∏
    markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="barracks_back")]
    ])

    await call.message.edit_text(
        chances_message,
        reply_markup=markup,
        parse_mode='HTML'
    )


@dp.callback_query(lambda callback_query: callback_query.data == "barracks_back")
async def barracks_back(call: types.CallbackQuery):
    chat_id = call.message.chat.id

    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –≤–æ–∑–≤—Ä–∞—â–∞—è –µ–≥–æ –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É –º–µ–Ω—é –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
    await call.message.edit_text(
        "–í—ã –≤ –ó–∞–±—Ä–æ—à–µ–Ω–Ω–æ–π –ö–∞–∑–∞—Ä–º–µ. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–®–∞–Ω—Å—ã", callback_data="barracks_chances"),
             InlineKeyboardButton(text="üîç –ò—Å–∫–∞—Ç—å —Å–Ω–∞—Ä—è–∂–µ–Ω–∏–µ", callback_data="barracks_search")]
        ])
    )


Abandoned_barracks = {
    "weapon": {
        # –î–µ—Ä–µ–≤—è–Ω–Ω–æ–µ –æ—Ä—É–∂–∏–µ
        "–î–µ—Ä–µ–≤—è–Ω–Ω—ã–π –º–µ—á": {
            'hp': 0, 'mana': 0, 'attack': 5, 'defense': 0, 'strength': 0, 'agility': 0, 'intelligence': 0,
            'crit_chance': 0.01, 'crit_damage': 0.05,
        },
        "–î–µ—Ä–µ–≤—è–Ω–Ω–æ–µ –∫–æ–ø—å–µ": {
            'hp': 0,
            'mana': 0,
            'attack': 0,
            'defense': 0,
            'strength': 0,
            'agility': 1,
            'intelligence': 0,
            'crit_chance': 0.01,
            'crit_damage': 0.05,
        },
        "–î–µ—Ä–µ–≤—è–Ω–Ω–æ–µ –ø–æ—Å–æ—Ö": {
            'hp': 0,
            'mana': 2,
            'attack': 5,
            'defense': 0,
            'strength': 0,
            'agility': 0,
            'intelligence': 1,
            'crit_chance': 0,
            'crit_damage': 0,
        },
        "–î–µ—Ä–µ–≤—è–Ω–Ω—ã–π –¥–≤—É—Ä—É—á–Ω—ã–π –º–µ—á": {
            'hp': 0,
            'mana': 0,
            'attack': 8,
            'defense': 1,
            'strength': 2,
            'agility': 0,
            'intelligence': 0,
            'crit_chance': 0,
            'crit_damage': 0,
        },
        "–î–µ—Ä–µ–≤—è–Ω–Ω—ã–π –ª—É–∫": {
            'hp': 0,
            'mana': 0,
            'attack': 5,
            'defense': 0,
            'strength': 0,
            'agility': 2,
            'intelligence': 0,
            'crit_chance': 0.03,
            'crit_damage': 0.05,
        },
        # –ñ–µ–ª–µ–∑–Ω–æ–µ –æ—Ä—É–∂–∏–µ
        "–ñ–µ–ª–µ–∑–Ω—ã–π –º–µ—á": {
            'hp': 0,
            'mana': 0,
            'attack': 15,
            'defense': 0,
            'strength': 2,
            'agility': 1,
            'intelligence': 1,
            'crit_chance': 0.04,
            'crit_damage': 0.05,
        },
        "–ñ–µ–ª–µ–∑–Ω—ã–π —Ç–æ–ø–æ—Ä": {
            'hp': 10,
            'mana': 0,
            'attack': 10,
            'defense': 0,
            'strength': 2,
            'agility': 1,
            'intelligence': 1,
            'crit_chance': 0.04,
            'crit_damage': 0.05,
        },
        "–ñ–µ–ª–µ–∑–Ω—ã–π –∫–æ–ø—å–µ": {
            'hp': 0,
            'mana': 0,
            'attack': 15,
            'defense': 0,
            'strength': 1,
            'agility': 2,
            'intelligence': 0,
            'crit_chance': 0.03,
            'crit_damage': 0.01,
        },
        "–ñ–µ–ª–µ–∑–Ω—ã–π –ø–æ—Å–æ—Ö": {
            'hp': 0,
            'mana': 10,
            'attack': 5,
            'defense': 0,
            'strength': 1,
            'agility': 1,
            'intelligence': 3,
            'crit_chance': 0.02,
            'crit_damage': 0.03,
        },
        "–ñ–µ–ª–µ–∑–Ω—ã–π –¥–≤—É—Ä—É—á–Ω—ã–π –º–µ—á": {
            'hp': 5,
            'mana': 0,
            'attack': 25,
            'defense': 0,
            'strength': 5,
            'agility': 1,
            'intelligence': 0,
            'crit_chance': 0.05,
            'crit_damage': 0.10,
        },
        "–ñ–µ–ª–µ–∑–Ω—ã–π –ª—É–∫": {
            'hp': 0,
            'mana': 0,
            'attack': 18,
            'defense': 0,
            'strength': 2,
            'agility': 4,
            'intelligence': 1,
            'crit_chance': 0.06,
            'crit_damage': 0.08,
        },
        "–ñ–µ–ª–µ–∑–Ω—ã–π –∫–∏–Ω–∂–∞–ª": {
            'hp': 0,
            'mana': 0,
            'attack': 12,
            'defense': 0,
            'strength': 1,
            'agility': 3,
            'intelligence': 0,
            'crit_chance': 0.08,
            'crit_damage': 0.12,
        },
        "–ñ–µ–ª–µ–∑–Ω—ã–π –∞—Ä–±–∞–ª–µ—Ç": {
            'hp': 0,
            'mana': 0,
            'attack': 20,
            'defense': 0,
            'strength': 3,
            'agility': 2,
            'intelligence': 1,
            'crit_chance': 0.04,
            'crit_damage': 0.07,
        },
        "–ñ–µ–ª–µ–∑–Ω–∞—è –ø–∞–ª–∏—Ü–∞": {
            'hp': 0,
            'mana': 0,
            'attack': 16,
            'defense': 0,
            'strength': 4,
            'agility': 1,
            'intelligence': 0,
            'crit_chance': 0.03,
            'crit_damage': 0.05,
        },
        "–ñ–µ–ª–µ–∑–Ω—ã–π –ø–∞–ª–∞—à": {
            'hp': 0,
            'mana': 0,
            'attack': 20,
            'defense': 0,
            'strength': 3,
            'agility': 2,
            'intelligence': 0,
            'crit_chance': 0.05,
            'crit_damage': 0.09,
        },
        "–ñ–µ–ª–µ–∑–Ω–∞—è –±—É–ª–∞–≤–∞": {
            'hp': 0,
            'mana': 0,
            'attack': 18,
            'defense': 0,
            'strength': 4,
            'agility': 1,
            'intelligence': 0,
            'crit_chance': 0.04,
            'crit_damage': 0.06,
        },
        "–ñ–µ–ª–µ–∑–Ω—ã–π –±–æ–µ–≤–æ–π –º–æ–ª–æ—Ç": {
            'hp': 0,
            'mana': 0,
            'attack': 30,
            'defense': 0,
            'strength': 6,
            'agility': 0,
            'intelligence': 0,
            'crit_chance': 0.03,
            'crit_damage': 0.15,
        },
        "–ñ–µ–ª–µ–∑–Ω–∞—è —Å–∞–±–ª—è": {
            'hp': 0,
            'mana': 0,
            'attack': 18,
            'defense': 0,
            'strength': 2,
            'agility': 3,
            'intelligence': 0,
            'crit_chance': 0.06,
            'crit_damage': 0.08,
        }
    },
    "armor": {
        "–ü–ª–∞—â –ª–µ–≥–∫–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞": {
            'hp': 0,
            'mana': 10,
            'attack': -2,
            'defense': 5,
            'strength': 0,
            'agility': 3,
            'intelligence': 1,
            'crit_chance': 0.00,
            'crit_damage': 0.00,
        },
        "–û–¥–µ—è–Ω–∏–µ —É—á–µ–Ω–∏–∫–∞ –º–∞–≥–∞": {
            'hp': 5,
            'mana': 25,
            'attack': -5,
            'defense': 8,
            'strength': 0,
            'agility': -1,
            'intelligence': 3,
            'crit_chance': 0.00,
            'crit_damage': 0.00,
        },
        "–ü–ª–∞—â –ª—É–Ω–Ω–æ–π –ø—ã–ª–∏": {
            'hp': 0,
            'mana': 15,
            'attack': -5,
            'defense': 6,
            'strength': 0,
            'agility': 2,
            'intelligence': 2,
            'crit_chance': 0.00,
            'crit_damage': 0.00,
        },
        "–ü–ª–∞—â –ª—É–Ω–Ω–æ–≥–æ —Å–≤–µ—Ç–∞": {
            'hp': 0,
            'mana': 20,
            'attack': -5,
            'defense': 4,
            'strength': 0,
            'agility': 1,
            'intelligence': 4,
            'crit_chance': 0.00,
            'crit_damage': 0.00,
        },
        "–ö–æ–∂–∞–Ω–∞—è –±—Ä–æ–Ω—è": {
            'hp': 10,
            'mana': 5,
            'attack': 0,
            'defense': 5,
            'strength': 1,
            'agility': 1,
            'intelligence': 1,
            'crit_chance': 0.00,
            'crit_damage': 0.00,
        },
        # –ñ–µ–ª–µ–∑–Ω–∞—è-—Å—Ç–∞–ª—å–Ω–∞—è –±—Ä–æ–Ω—è
        "–ñ–µ–ª–µ–∑–Ω–∞—è –∫–∏—Ä–∞—Å–∞": {
            'hp': 20,
            'mana': 0,
            'attack': 0,
            'defense': 15,
            'strength': 3,
            'agility': -1,
            'intelligence': 0,
            'crit_chance': 0.00,
            'crit_damage': 0.00,
        },
        "–ñ–µ–ª–µ–∑–Ω—ã–µ –ª–∞—Ç—ã": {
            'hp': 25,
            'mana': 0,
            'attack': 0,
            'defense': 20,
            'strength': 4,
            'agility': -2,
            'intelligence': 0,
            'crit_chance': 0.00,
            'crit_damage': 0.00,
        },
        "–ñ–µ–ª–µ–∑–Ω–∞—è –∫–æ–ª—å—á—É–≥–∞": {
            'hp': 15,
            'mana': 0,
            'attack': 0,
            'defense': 10,
            'strength': 2,
            'agility': 1,
            'intelligence': 0,
            'crit_chance': 0.00,
            'crit_damage': 0.00,
        }
    }
}

# ======================================–ó–∞–ª –ú–∏–≤–æ–≤====================================#


# ======================================–î—Ä–µ–≤–Ω—è—è –∫—É–∑–Ω—è====================================#
# –†–µ—Ü–µ–ø—Ç—ã –¥—Ä–µ–≤–Ω–µ–π –∫—É–∑–Ω–∏—Ü—ã
ancient_forge_recipes = {
    "–º–∏—Ñ—Ä–∏–ª": {
        "—Å–æ—Å—Ç—è–Ω–∞—è —Å—Ç–∞–ª—å": 4,
        "—Å—Ç–∞–ª—å": 3,
        "–∂–µ–ª–µ–∑–æ": 5,
        "–∫–∞–º–µ–Ω—å": 11,
    },

}


# /ancient_forge
@dp.message(Command("ancient_forge"))
async def ancient_forge_handler(message: types.Message, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –¥—Ä–µ–≤–Ω–µ–π –∫—É–∑–Ω–∏—Ü—ã."""
    # –ü–æ–ª—É—á–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ —Ñ–æ—Ç–æ –∫—É–∑–Ω–∏—Ü—ã
    forge_photos = Photo_Diryk.get("–ì–æ—Ä–Ω –î—Ä–µ–≤–Ω–∏—Ö", {})

    if not forge_photos:
        await message.answer("üöß –î—Ä–µ–≤–Ω—è—è –∫—É–∑–Ω–∏—Ü–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
        return

    try:
        photo_name, photo_path = random.choice(list(forge_photos.items()))
        if not os.path.exists(photo_path):
            raise FileNotFoundError(f"–§–æ—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ: {photo_path}")

        photo = FSInputFile(photo_path)
        await message.answer_photo(
            photo,
            caption=f"üèõÔ∏è {photo_name} –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!",
            reply_markup=create_ancient_keyboard()
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ –∫—É–∑–Ω–∏—Ü—ã: {e}")
        await message.answer(
            "üèõÔ∏è –ì–æ—Ä–Ω –î—Ä–µ–≤–Ω–∏—Ö –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!",
            reply_markup=create_ancient_keyboard()
        )


def create_ancient_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –¥—Ä–µ–≤–Ω–µ–π –∫—É–∑–Ω–∏—Ü—ã."""
    buttons = [
        [InlineKeyboardButton(text="üìú –†–µ—Ü–µ–ø—Ç—ã –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤", callback_data="ancient_recipes"),
         InlineKeyboardButton(text="‚öíÔ∏è –°–æ–∑–¥–∞—Ç—å –∞—Ä—Ç–µ—Ñ–∞–∫—Ç", callback_data="ancient_create")],
        [InlineKeyboardButton(text="‚û°Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø—É—Ç—å", callback_data="continue_path")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)


@dp.callback_query(F.data == "ancient_recipes")
async def show_ancient_recipes(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã."""
    try:
        recipes_text = "üìú –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã –¥—Ä–µ–≤–Ω–µ–≥–æ –≥–æ—Ä–Ω–∞:\n\n"
        for item, components in ancient_forge_recipes.items():
            components_str = " + ".join([f"{amount} {comp}" for comp, amount in components.items()])
            recipes_text += f"üîπ 1 {item} = {components_str}\n"

        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="ancient_back_to_main")]
            ]
        )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
        if callback.message.text:  # –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–µ–∫—Å—Ç –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
            await callback.message.edit_text(recipes_text, reply_markup=keyboard)
        else:  # –ï—Å–ª–∏ –Ω–µ—Ç —Ç–µ–∫—Å—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ/—Å—Ç–∏–∫–µ—Ä–æ–º)
            await callback.message.delete()  # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await callback.message.answer(recipes_text, reply_markup=keyboard)

        await callback.answer()  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É callback

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ show_ancient_recipes: {e}", exc_info=True)
        try:
            await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–µ—Ü–µ–ø—Ç–æ–≤!")
            await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–µ—Ü–µ–ø—Ç–æ–≤!", show_alert=True)
        except Exception as e2:
            logging.error(f"–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—à–∏–±–∫–∏: {e2}")


@dp.callback_query(F.data == "ancient_create")
async def select_material_ancient_craft(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–∞—Ç–µ—Ä–∏–∞–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –≤ –¥—Ä–µ–≤–Ω–µ–º –≥–æ—Ä–Ω–µ."""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ ancient_forge_recipes —è–≤–ª—è–µ—Ç—Å—è —Å–ª–æ–≤–∞—Ä—ë–º
        if not isinstance(ancient_forge_recipes, dict):
            raise TypeError("ancient_forge_recipes –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–ª–æ–≤–∞—Ä—ë–º (dict)")

        user_id = callback.from_user.id
        user_materials = user_data.get(user_id, {}).get("material_user", {})

        buttons = []
        for material, components in ancient_forge_recipes.items():
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ components —Ç–æ–∂–µ —Å–ª–æ–≤–∞—Ä—å
            if not isinstance(components, dict):
                continue

            can_craft = all(user_materials.get(item, 0) >= amount
                            for item, amount in components.items())

            if can_craft:
                buttons.append([
                    InlineKeyboardButton(
                        text=f"üõ† –°–æ–∑–¥–∞—Ç—å {material}",
                        callback_data=f"ancient_craft_{material}"
                    )
                ])

        message_text = "üî® –í—ã–±–µ—Ä–∏—Ç–µ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è:" if buttons else "‚ùå –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤!"
        buttons.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="ancient_back_to_main")])

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
        if callback.message.text:  # –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–µ–∫—Å—Ç –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
            await callback.message.edit_text(
                message_text,
                reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons)
            )
        else:  # –ï—Å–ª–∏ –Ω–µ—Ç —Ç–µ–∫—Å—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ/—Å—Ç–∏–∫–µ—Ä–æ–º)
            await callback.message.delete()  # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await callback.message.answer(
                message_text,
                reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons)
            )

        await callback.answer()  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É callback

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ select_material_ancient_craft: {e}", exc_info=True)
        try:
            await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–µ—Ü–µ–ø—Ç–æ–≤!")
            await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–µ—Ü–µ–ø—Ç–æ–≤!", show_alert=True)
        except Exception as e2:
            logging.error(f"–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—à–∏–±–∫–∏: {e2}")


@dp.callback_query(F.data.startswith("ancient_craft_"))
async def craft_material_ancient(callback: types.CallbackQuery):
    """–°–æ–∑–¥–∞–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∞—Ä—Ç–µ—Ñ–∞–∫—Ç –≤ –¥—Ä–µ–≤–Ω–µ–º –≥–æ—Ä–Ω–µ."""
    user_id = callback.from_user.id
    material = callback.data.split("_")[2]

    if user_id not in user_data:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!", show_alert=True)
        return

    user_materials = user_data[user_id].setdefault("material_user", {})

    try:
        required_components = ancient_forge_recipes.get(material)
        if not required_components:
            await callback.answer("‚ùå –≠—Ç–æ—Ç –∞—Ä—Ç–µ—Ñ–∞–∫—Ç –Ω–µ–ª—å–∑—è —Å–æ–∑–¥–∞—Ç—å!", show_alert=True)
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
        missing = []
        for item, amount in required_components.items():
            if user_materials.get(item, 0) < amount:
                missing.append(f"{amount} {item}")

        if missing:
            await callback.answer(f"‚ùå –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç: {', '.join(missing)}", show_alert=True)
            return

        # –í—ã—á–∏—Ç–∞–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª—ã –∏ –¥–æ–±–∞–≤–ª—è–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–π –∞—Ä—Ç–µ—Ñ–∞–∫—Ç
        for item, amount in required_components.items():
            user_materials[item] -= amount
            if user_materials[item] <= 0:
                del user_materials[item]

        user_materials[material] = user_materials.get(material, 0) + 1

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ
        used_materials = [f"{amount} {item}" for item, amount in required_components.items()]
        await callback.answer(
            f"‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –∞—Ä—Ç–µ—Ñ–∞–∫—Ç: 1 {material}\n"
            f"üìâ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: {', '.join(used_materials)}",
            show_alert=True
        )

        # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é –∫—Ä–∞—Ñ—Ç–∞
        await select_material_ancient_craft(callback)

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ craft_material_ancient: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞!", show_alert=True)


@dp.callback_query(F.data == "ancient_back_to_main")
async def back_to_ancient_main(callback: types.CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –¥—Ä–µ–≤–Ω–µ–≥–æ –≥–æ—Ä–Ω–∞."""
    try:
        # –í—Å–µ–≥–¥–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        forge_photos = Photo_Diryk.get("–ì–æ—Ä–Ω –î—Ä–µ–≤–Ω–∏—Ö", {})

        if forge_photos:
            photo_name, photo_path = random.choice(list(forge_photos.items()))
            if os.path.exists(photo_path):
                # –ï—Å–ª–∏ –±—ã–ª–æ —Ñ–æ—Ç–æ - –ø—Ä–æ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å—å –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
                if callback.message.photo:
                    await callback.message.edit_caption(
                        caption=f"üèõÔ∏è –ì–æ—Ä–Ω –î—Ä–µ–≤–Ω–∏—Ö '{photo_name}' –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!",
                        reply_markup=create_ancient_keyboard()
                    )
                    return

        # –ï—Å–ª–∏ —Ñ–æ—Ç–æ –Ω–µ—Ç –∏–ª–∏ —ç—Ç–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await callback.message.edit_text(
            "üèõÔ∏è –ì–æ—Ä–Ω –î—Ä–µ–≤–Ω–∏—Ö –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!",
            reply_markup=create_ancient_keyboard()
        )

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ back_to_ancient_main: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!", show_alert=True)


# ======================================–î—Ä–µ–≤–Ω—è—è –∫—É–∑–Ω—è====================================#

@dp.message(F.text == "–í–æ–∑–≤—ã—à–µ–Ω–∏–µ üåå")
async def ascend(message: types.Message):
    chat_id = message.chat.id
    user_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π —ç—Ç–∞–∂ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    current_floor = user_data.get(user_id, {}).get('dungeon_floor', 0)
    abs_floor = abs(current_floor)

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø—Ä–æ—à–µ–ª 44 —ç—Ç–∞–∂–∞
    if abs_floor < 44:
        await message.answer("üö´ –í–æ–∑–≤—ã—à–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ —Ç–µ–º, –∫—Ç–æ –¥–æ—Å—Ç–∏–≥ 44 —ç—Ç–∞–∂–∞ –ë–∞—à–Ω–∏ –ù–µ–≤–µ–¥–æ–º–æ–≥–æ!")
        return

    # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    markup = InlineKeyboardMarkup()
    button1 = InlineKeyboardButton("–£–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –æ –≤–æ–∑–≤—ã—à–µ–Ω–∏–∏", callback_data='about_ascend')
    button2 = InlineKeyboardButton("–ù–∞—á–∞—Ç—å –≤–æ–∑–≤—ã—à–µ–Ω–∏–µ", callback_data='start_ascend')
    markup.row(button1, button2)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
    await message.answer(
        "–í—ã –ø–æ–¥–Ω–∏–º–∞–µ—Ç–µ—Å—å –Ω–∞ –≤–æ–∑–≤—ã—à–µ–Ω–∏–µ, —Ç—É–¥–∞, –≥–¥–µ –≤–∏–¥–Ω—ã –≥–æ—Ä–∏–∑–æ–Ω—Ç—ã!\n"
        "–ó–¥–µ—Å—å –≤–∞—Å –∂–¥—É—Ç –Ω–æ–≤—ã–µ –∏—Å–ø—ã—Ç–∞–Ω–∏—è –∏ –≤–µ–ª–∏–∫–∏–µ –Ω–∞–≥—Ä–∞–¥—ã.",
        reply_markup=markup
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–ª–±–µ–∫–æ–≤
@dp.callback_query(lambda call: call.data.startswith("'about_ascend'"))
async def callback_ascend(call: types.CallbackQuery):
    chat_id = call.message.chat.id
    await bot.answer_callback_query(call.id)  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –∫–æ–ª–±–µ–∫
    await bot.send_message(chat_id,
                           "–ù–∞ –≤–æ–∑–≤—ã—à–µ–Ω–∏–∏ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è –ø—Ä–µ–∫—Ä–∞—Å–Ω—ã–π –≤–∏–¥ –Ω–∞ –æ–∫—Ä—É–∂–∞—é—â–∏–π –ª–∞–Ω–¥—à–∞—Ñ—Ç –∏ –≥–æ—Ä–∏–∑–æ–Ω—Ç—ã –≤–¥–∞–ª–∏!")


@dp.message()
async def handle_other_messages(message: Message):
    if message.from_user.id not in authorized_users:
        await message.answer(
            "üì¢ –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª:",
            reply_markup=get_subscribe_keyboard()
        )
    else:
        await message.answer(
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏",
            reply_markup=get_main_menu()
        )

    # –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç


async def auto_save():
    while True:
        await asyncio.sleep(600)
        try:
            save_data()
            logging.info("–î–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: {e}")


load_data()


async def main():
    load_data()
    asyncio.create_task(auto_save())
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
